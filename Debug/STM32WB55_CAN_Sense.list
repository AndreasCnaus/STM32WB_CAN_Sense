
STM32WB55_CAN_Sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eef8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800f038  0800f038  00010038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f4b8  0800f4b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f4c0  0800f4c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f4c4  0800f4c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002c8  20000008  0800f4c8  00011008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c98  200002d0  0800f790  000112d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001f68  0800f790  00011f68  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f1d3  00000000  00000000  00011300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004759  00000000  00000000  000304d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020e8  00000000  00000000  00034c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000191e  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00026b5a  00000000  00000000  00038636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000227d2  00000000  00000000  0005f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e69f5  00000000  00000000  00081962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00168357  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009c94  00000000  00000000  0016839c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  00172030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002d0 	.word	0x200002d0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f020 	.word	0x0800f020

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002d4 	.word	0x200002d4
 800017c:	0800f020 	.word	0x0800f020

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b99d 	b.w	8000eb4 <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f835 	bl	8000bf8 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f828 	bl	8000bf8 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f817 	bl	8000bf8 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f809 	bl	8000bf8 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <BME280_init>:
 * @param pointer to device structure
 * @param HAL-I2C handle
 * @retval BME280_CMD_OK by success, error code else
 */
BME280_cmd_res BME280_init(BME280 *dev, I2C_HandleTypeDef *i2c1)
{
 8000eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ebc:	b08f      	sub	sp, #60	@ 0x3c
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	466b      	mov	r3, sp
 8000ec6:	461e      	mov	r6, r3
	// check input parameters
	if (i2c1 == NULL) {
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <BME280_init+0x1a>
		return BME280_ERROR_INVALID_INPUT_PARAM;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e1fb      	b.n	80012ca <BME280_init+0x412>
	}

	// initialize device structure
	dev->hi2c1 = i2c1;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	601a      	str	r2, [r3, #0]
	dev->adc_T = 0;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
	dev->adc_P = 0;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
	dev->adc_H = 0;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
	dev->T = 0;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
	dev->P = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
	dev->H = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]

	HAL_StatusTypeDef status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t err_num = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t reg_data = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	77fb      	strb	r3, [r7, #31]

	// read and verify the chip-Id
	status = BME280_read_register(dev->hi2c1, BME280_REG_ID, &reg_data);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f107 021f 	add.w	r2, r7, #31
 8000f14:	21d0      	movs	r1, #208	@ 0xd0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fdf2 	bl	8001b00 <BME280_read_register>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (reg_data != BME280_CHIP_ID) return BME280_ERROR_WRONG_DEVID;
 8000f22:	7ffb      	ldrb	r3, [r7, #31]
 8000f24:	2b60      	cmp	r3, #96	@ 0x60
 8000f26:	d001      	beq.n	8000f2c <BME280_init+0x74>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e1ce      	b.n	80012ca <BME280_init+0x412>

	/* Read calibration data */
	// temperature and pressure calibration data
	const uint8_t nof_tp_data = BME280_REG_CALIB25 - BME280_REG_CALIB00 + 1;
 8000f2c:	231a      	movs	r3, #26
 8000f2e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t calib0[nof_tp_data];	// calibration data from register: 0x88 to 0xA1
 8000f32:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f36:	3b01      	subs	r3, #1
 8000f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f3a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f3e:	2200      	movs	r2, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	00cb      	lsls	r3, r1, #3
 8000f50:	6839      	ldr	r1, [r7, #0]
 8000f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	00ca      	lsls	r2, r1, #3
 8000f5a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f5e:	2200      	movs	r2, #0
 8000f60:	469a      	mov	sl, r3
 8000f62:	4693      	mov	fp, r2
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f78:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f7c:	3307      	adds	r3, #7
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	ebad 0d03 	sub.w	sp, sp, r3
 8000f86:	466b      	mov	r3, sp
 8000f88:	3300      	adds	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t reg_start_addrs = BME280_REG_CALIB00;
 8000f8c:	2388      	movs	r3, #136	@ 0x88
 8000f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	status = BME280_read_registers(dev->hi2c1, reg_start_addrs, calib0, nof_tp_data);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f9a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fa0:	f000 fdc8 	bl	8001b34 <BME280_read_registers>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err_num += (status != HAL_OK);
 8000faa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    // humidity calibration data
    const uint8_t nof_h_data = NOF_H_CALIB_DATA;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint8_t calib1[nof_h_data];	// calibration data from register: 0xE1 to 0xE8
 8000fca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4698      	mov	r8, r3
 8000fda:	4691      	mov	r9, r2
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fe8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ff0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	461c      	mov	r4, r3
 8000ff8:	4615      	mov	r5, r2
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	00eb      	lsls	r3, r5, #3
 8001004:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001008:	00e2      	lsls	r2, r4, #3
 800100a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800100e:	3307      	adds	r3, #7
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	ebad 0d03 	sub.w	sp, sp, r3
 8001018:	466b      	mov	r3, sp
 800101a:	3300      	adds	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
    reg_start_addrs = BME280_REG_CALIB26;
 800101e:	23e1      	movs	r3, #225	@ 0xe1
 8001020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    status = BME280_read_registers(dev->hi2c1, reg_start_addrs, calib1, nof_h_data);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800102c:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8001030:	6a3a      	ldr	r2, [r7, #32]
 8001032:	f000 fd7f 	bl	8001b34 <BME280_read_registers>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err_num += (status != HAL_OK);
 800103c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001050:	4413      	add	r3, r2
 8001052:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    if (err_num != 0) return BME280_ERROR_CALIB_DATA_READ;	// fatal error, return
 8001056:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <BME280_init+0x1aa>
 800105e:	2303      	movs	r3, #3
 8001060:	e133      	b.n	80012ca <BME280_init+0x412>

    /* Create compensation parameters */
    // Temperature compensation parameters
    dig_T1 = (calib0[1] << 8 | calib0[0]);
 8001062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21b      	sxth	r3, r3
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b98      	ldr	r3, [pc, #608]	@ (80012d8 <BME280_init+0x420>)
 8001078:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calib0[3] << 8 | calib0[2]);
 800107a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107c:	78db      	ldrb	r3, [r3, #3]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001084:	789b      	ldrb	r3, [r3, #2]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b93      	ldr	r3, [pc, #588]	@ (80012dc <BME280_init+0x424>)
 800108e:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calib0[5] << 8 | calib0[4]);
 8001090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001092:	795b      	ldrb	r3, [r3, #5]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b8f      	ldr	r3, [pc, #572]	@ (80012e0 <BME280_init+0x428>)
 80010a4:	801a      	strh	r2, [r3, #0]

    // Pressure compensation parameters
    dig_P1 = (calib0[7] << 8 | calib0[6]);
 80010a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a8:	79db      	ldrb	r3, [r3, #7]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b0:	799b      	ldrb	r3, [r3, #6]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b8a      	ldr	r3, [pc, #552]	@ (80012e4 <BME280_init+0x42c>)
 80010bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calib0[9] << 8 | calib0[8]);
 80010be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c0:	7a5b      	ldrb	r3, [r3, #9]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c8:	7a1b      	ldrb	r3, [r3, #8]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b85      	ldr	r3, [pc, #532]	@ (80012e8 <BME280_init+0x430>)
 80010d2:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calib0[11] << 8 | calib0[10]);
 80010d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d6:	7adb      	ldrb	r3, [r3, #11]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010de:	7a9b      	ldrb	r3, [r3, #10]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b81      	ldr	r3, [pc, #516]	@ (80012ec <BME280_init+0x434>)
 80010e8:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calib0[13] << 8 | calib0[12]);
 80010ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ec:	7b5b      	ldrb	r3, [r3, #13]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f4:	7b1b      	ldrb	r3, [r3, #12]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b7c      	ldr	r3, [pc, #496]	@ (80012f0 <BME280_init+0x438>)
 80010fe:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calib0[15] << 8 | calib0[14]);
 8001100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001102:	7bdb      	ldrb	r3, [r3, #15]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110a:	7b9b      	ldrb	r3, [r3, #14]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b78      	ldr	r3, [pc, #480]	@ (80012f4 <BME280_init+0x43c>)
 8001114:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calib0[17] << 8 | calib0[16]);
 8001116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001118:	7c5b      	ldrb	r3, [r3, #17]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001120:	7c1b      	ldrb	r3, [r3, #16]
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b21a      	sxth	r2, r3
 8001128:	4b73      	ldr	r3, [pc, #460]	@ (80012f8 <BME280_init+0x440>)
 800112a:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calib0[19] << 8 | calib0[18]);
 800112c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112e:	7cdb      	ldrb	r3, [r3, #19]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001136:	7c9b      	ldrb	r3, [r3, #18]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b6f      	ldr	r3, [pc, #444]	@ (80012fc <BME280_init+0x444>)
 8001140:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calib0[21] << 8 | calib0[20]);
 8001142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001144:	7d5b      	ldrb	r3, [r3, #21]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800114c:	7d1b      	ldrb	r3, [r3, #20]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b6a      	ldr	r3, [pc, #424]	@ (8001300 <BME280_init+0x448>)
 8001156:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calib0[23] << 8 | calib0[22]);
 8001158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115a:	7ddb      	ldrb	r3, [r3, #23]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001162:	7d9b      	ldrb	r3, [r3, #22]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <BME280_init+0x44c>)
 800116c:	801a      	strh	r2, [r3, #0]

    // Humidity compensation parameters
    dig_H1 = calib0[25];
 800116e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001170:	7e5a      	ldrb	r2, [r3, #25]
 8001172:	4b65      	ldr	r3, [pc, #404]	@ (8001308 <BME280_init+0x450>)
 8001174:	701a      	strb	r2, [r3, #0]
    dig_H2 = (calib1[1] << 8 | calib1[0]);
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b60      	ldr	r3, [pc, #384]	@ (800130c <BME280_init+0x454>)
 800118a:	801a      	strh	r2, [r3, #0]
    dig_H3 = calib1[2];
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	789a      	ldrb	r2, [r3, #2]
 8001190:	4b5f      	ldr	r3, [pc, #380]	@ (8001310 <BME280_init+0x458>)
 8001192:	701a      	strb	r2, [r3, #0]
    dig_H4 = (calib1[3] << 4 | (calib1[4] & 0x0F));
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	78db      	ldrb	r3, [r3, #3]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	b21a      	sxth	r2, r3
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b59      	ldr	r3, [pc, #356]	@ (8001314 <BME280_init+0x45c>)
 80011ae:	801a      	strh	r2, [r3, #0]
    dig_H5 = (calib1[5] << 4 | (calib1[4] & 0xF0) >> 4);
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	795b      	ldrb	r3, [r3, #5]
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b54      	ldr	r3, [pc, #336]	@ (8001318 <BME280_init+0x460>)
 80011c8:	801a      	strh	r2, [r3, #0]
    dig_H6 = calib1[4];
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	4b52      	ldr	r3, [pc, #328]	@ (800131c <BME280_init+0x464>)
 80011d2:	701a      	strb	r2, [r3, #0]

    /* Set device and measurement configuration */
    // Device configuration
    MBE280_config_reg conf_reg = {0};
 80011d4:	2300      	movs	r3, #0
 80011d6:	773b      	strb	r3, [r7, #28]
    conf_reg.spi3w_en = 0; // I2C interface is used
 80011d8:	7f3b      	ldrb	r3, [r7, #28]
 80011da:	f36f 0300 	bfc	r3, #0, #1
 80011de:	773b      	strb	r3, [r7, #28]
    conf_reg.filter = BME280_FILTER_OFF;	// IR-filter inactive
 80011e0:	7f3b      	ldrb	r3, [r7, #28]
 80011e2:	f36f 0384 	bfc	r3, #2, #3
 80011e6:	773b      	strb	r3, [r7, #28]
    conf_reg.t_sb = BME280_TSB_T1000MS;	// standby time=1s in normal mode operation
 80011e8:	7f3b      	ldrb	r3, [r7, #28]
 80011ea:	2205      	movs	r2, #5
 80011ec:	f362 1347 	bfi	r3, r2, #5, #3
 80011f0:	773b      	strb	r3, [r7, #28]
    status = BME280_write_register(dev->hi2c1, BME280_REG_CONFIG, &conf_reg.val);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f107 021c 	add.w	r2, r7, #28
 80011fa:	21f5      	movs	r1, #245	@ 0xf5
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fcb7 	bl	8001b70 <BME280_write_register>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	err_num += (status != HAL_OK);
 8001208:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf14      	ite	ne
 8001210:	2301      	movne	r3, #1
 8001212:	2300      	moveq	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800121c:	4413      	add	r3, r2
 800121e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	// humidity measurement configuration
	MBE280_ctrl_hum_reg ctrl_hum_reg = {0};
 8001222:	2300      	movs	r3, #0
 8001224:	763b      	strb	r3, [r7, #24]
	ctrl_hum_reg.osrs_h = BME280_OS1;	// no oversampling for humidity
 8001226:	7e3b      	ldrb	r3, [r7, #24]
 8001228:	2201      	movs	r2, #1
 800122a:	f362 0302 	bfi	r3, r2, #0, #3
 800122e:	763b      	strb	r3, [r7, #24]
	status = BME280_write_register(dev->hi2c1, BME280_REG_CTRL_HUM, &ctrl_hum_reg.val);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f107 0218 	add.w	r2, r7, #24
 8001238:	21f2      	movs	r1, #242	@ 0xf2
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fc98 	bl	8001b70 <BME280_write_register>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	err_num += (status != HAL_OK);
 8001246:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800125a:	4413      	add	r3, r2
 800125c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	// temperature, pressure measurement and operation mode configuration
	BME280_ctrl_meas_reg ctrl_meas_reg = {0};
 8001260:	2300      	movs	r3, #0
 8001262:	753b      	strb	r3, [r7, #20]
	ctrl_meas_reg.mode = BME280_MODE_NORMAL;	// the sensor alternates between active measurements and standby periods
 8001264:	7d3b      	ldrb	r3, [r7, #20]
 8001266:	f043 0303 	orr.w	r3, r3, #3
 800126a:	753b      	strb	r3, [r7, #20]
	ctrl_meas_reg.osrs_p = BME280_OS1;	// no oversampling for pressure
 800126c:	7d3b      	ldrb	r3, [r7, #20]
 800126e:	2201      	movs	r2, #1
 8001270:	f362 0384 	bfi	r3, r2, #2, #3
 8001274:	753b      	strb	r3, [r7, #20]
	ctrl_meas_reg.osrs_t = BME280_OS1;	// no oversampling for temperature
 8001276:	7d3b      	ldrb	r3, [r7, #20]
 8001278:	2201      	movs	r2, #1
 800127a:	f362 1347 	bfi	r3, r2, #5, #3
 800127e:	753b      	strb	r3, [r7, #20]
    status = BME280_write_register(dev->hi2c1, BME280_REG_CTRL_MEAS, &ctrl_meas_reg.val);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f107 0214 	add.w	r2, r7, #20
 8001288:	21f4      	movs	r1, #244	@ 0xf4
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fc70 	bl	8001b70 <BME280_write_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	err_num += (status != HAL_OK);
 8001296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80012aa:	4413      	add	r3, r2
 80012ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	// error handling
	if (err_num == 1) return BME280_ERROR_DEV_CONFIG;
 80012b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <BME280_init+0x404>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e006      	b.n	80012ca <BME280_init+0x412>
	else if (err_num > 1) return BME280_ERROR_MEAS_CONFIG;
 80012bc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d901      	bls.n	80012c8 <BME280_init+0x410>
 80012c4:	2305      	movs	r3, #5
 80012c6:	e000      	b.n	80012ca <BME280_init+0x412>

	return BME280_CMD_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	46b5      	mov	sp, r6
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	373c      	adds	r7, #60	@ 0x3c
 80012d0:	46bd      	mov	sp, r7
 80012d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d6:	bf00      	nop
 80012d8:	200002ec 	.word	0x200002ec
 80012dc:	200002ee 	.word	0x200002ee
 80012e0:	200002f0 	.word	0x200002f0
 80012e4:	200002f2 	.word	0x200002f2
 80012e8:	200002f4 	.word	0x200002f4
 80012ec:	200002f6 	.word	0x200002f6
 80012f0:	200002f8 	.word	0x200002f8
 80012f4:	200002fa 	.word	0x200002fa
 80012f8:	200002fc 	.word	0x200002fc
 80012fc:	200002fe 	.word	0x200002fe
 8001300:	20000300 	.word	0x20000300
 8001304:	20000302 	.word	0x20000302
 8001308:	20000304 	.word	0x20000304
 800130c:	20000306 	.word	0x20000306
 8001310:	20000308 	.word	0x20000308
 8001314:	2000030a 	.word	0x2000030a
 8001318:	2000030c 	.word	0x2000030c
 800131c:	2000030e 	.word	0x2000030e

08001320 <BME280_read_env_data>:
 *
 * @param pointer to device structure
 * @retval BME280_CMD_OK by success, error code else
 */
BME280_cmd_res BME280_read_env_data(BME280 *dev)
{
 8001320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001324:	b087      	sub	sp, #28
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	466b      	mov	r3, sp
 800132c:	461e      	mov	r6, r3
	// check input parameters
	if (dev == NULL || dev->hi2c1 == NULL) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <BME280_read_env_data+0x1c>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <BME280_read_env_data+0x20>
		return BME280_ERROR_INVALID_INPUT_PARAM;
 800133c:	2301      	movs	r3, #1
 800133e:	e079      	b.n	8001434 <BME280_read_env_data+0x114>
	}

	// read measurement data from registers
	HAL_StatusTypeDef status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	75fb      	strb	r3, [r7, #23]
	uint8_t reg_start_addrs = BME280_REG_PRESS_MSB;
 8001344:	23f7      	movs	r3, #247	@ 0xf7
 8001346:	75bb      	strb	r3, [r7, #22]
	const uint8_t nof_meas_data = BME280_REG_HUM_LSB - BME280_REG_PRESS_MSB + 1 ;
 8001348:	2308      	movs	r3, #8
 800134a:	757b      	strb	r3, [r7, #21]
	uint8_t meas_data[nof_meas_data];
 800134c:	7d7b      	ldrb	r3, [r7, #21]
 800134e:	3b01      	subs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	7d7b      	ldrb	r3, [r7, #21]
 8001354:	2200      	movs	r2, #0
 8001356:	4698      	mov	r8, r3
 8001358:	4691      	mov	r9, r2
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800136a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800136e:	7d7b      	ldrb	r3, [r7, #21]
 8001370:	2200      	movs	r2, #0
 8001372:	461c      	mov	r4, r3
 8001374:	4615      	mov	r5, r2
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	00eb      	lsls	r3, r5, #3
 8001380:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001384:	00e2      	lsls	r2, r4, #3
 8001386:	7d7b      	ldrb	r3, [r7, #21]
 8001388:	3307      	adds	r3, #7
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	ebad 0d03 	sub.w	sp, sp, r3
 8001392:	466b      	mov	r3, sp
 8001394:	3300      	adds	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	status = BME280_read_registers(dev->hi2c1, reg_start_addrs, &meas_data[0], nof_meas_data);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	7d7b      	ldrb	r3, [r7, #21]
 80013a0:	7db9      	ldrb	r1, [r7, #22]
 80013a2:	f000 fbc7 	bl	8001b34 <BME280_read_registers>
 80013a6:	4603      	mov	r3, r0
 80013a8:	75fb      	strb	r3, [r7, #23]

	if (status != HAL_OK) return BME280_ERROR_MEAS_DATA_READ;	// fatal error, return
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <BME280_read_env_data+0x94>
 80013b0:	2306      	movs	r3, #6
 80013b2:	e03f      	b.n	8001434 <BME280_read_env_data+0x114>

	dev->adc_P = (((uint32_t)meas_data[0] << 12) | ((uint32_t)meas_data[1] << 4) | ((meas_data[2] & 0xF0) >> 4));	// raw pressure data
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	031a      	lsls	r2, r3, #12
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4313      	orrs	r3, r2
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	7892      	ldrb	r2, [r2, #2]
 80013c6:	0912      	lsrs	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	4313      	orrs	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	609a      	str	r2, [r3, #8]
	dev->adc_T = (((uint32_t)meas_data[3] << 12) | ((uint32_t)meas_data[4] << 4) | ((meas_data[5] & 0xF0) >> 4));	// raw temperature data
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	78db      	ldrb	r3, [r3, #3]
 80013d6:	031a      	lsls	r2, r3, #12
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4313      	orrs	r3, r2
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	7952      	ldrb	r2, [r2, #5]
 80013e4:	0912      	lsrs	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	4313      	orrs	r3, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	605a      	str	r2, [r3, #4]
	dev->adc_H = ((uint32_t)meas_data[6] << 8) | (meas_data[7]);	// raw humidity data
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	799b      	ldrb	r3, [r3, #6]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	79d2      	ldrb	r2, [r2, #7]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60da      	str	r2, [r3, #12]

	// Compensate raw measurement data
	dev->P = BME280_compensate_P_int64(dev->adc_P);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f81a 	bl	8001440 <BME280_compensate_P_int64>
 800140c:	4602      	mov	r2, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
	dev->T = BME280_compensate_T_int32(dev->adc_T);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fad8 	bl	80019cc <BME280_compensate_T_int32>
 800141c:	4602      	mov	r2, r0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	615a      	str	r2, [r3, #20]
	dev->H = BME280_compensate_H_int32(dev->adc_H);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fafe 	bl	8001a28 <BME280_compensate_H_int32>
 800142c:	4602      	mov	r2, r0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]

	return BME280_CMD_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	46b5      	mov	sp, r6
}
 8001436:	4618      	mov	r0, r3
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001440 <BME280_compensate_P_int64>:
 *
 * @param un-compensated pressure data as 32bit integer
 * @retval Output value of "24674867" represents 24674867/256 = 96386.2Pa = 963.862hPa
 */
BME280_U32_t BME280_compensate_P_int64(BME280_S32_t adc_P)
{
 8001440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001444:	b0ca      	sub	sp, #296	@ 0x128
 8001446:	af00      	add	r7, sp, #0
 8001448:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	BME280_S64_t var1, var2, p;
	var1 = ((BME280_S64_t)t_fine) - 128000;
 800144c:	4baf      	ldr	r3, [pc, #700]	@ (800170c <BME280_compensate_P_int64+0x2cc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	17da      	asrs	r2, r3, #31
 8001452:	461c      	mov	r4, r3
 8001454:	4615      	mov	r5, r2
 8001456:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800145a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800145e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BME280_S64_t)dig_P6;
 8001462:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001466:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800146a:	fb03 f102 	mul.w	r1, r3, r2
 800146e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001472:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	18ca      	adds	r2, r1, r3
 800147c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001480:	fba3 8903 	umull	r8, r9, r3, r3
 8001484:	eb02 0309 	add.w	r3, r2, r9
 8001488:	4699      	mov	r9, r3
 800148a:	4ba1      	ldr	r3, [pc, #644]	@ (8001710 <BME280_compensate_P_int64+0x2d0>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	b21b      	sxth	r3, r3
 8001492:	17da      	asrs	r2, r3, #31
 8001494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001498:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800149c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014a0:	4603      	mov	r3, r0
 80014a2:	fb03 f209 	mul.w	r2, r3, r9
 80014a6:	460b      	mov	r3, r1
 80014a8:	fb08 f303 	mul.w	r3, r8, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	4602      	mov	r2, r0
 80014b0:	fba8 1202 	umull	r1, r2, r8, r2
 80014b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014b8:	460a      	mov	r2, r1
 80014ba:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014c2:	4413      	add	r3, r2
 80014c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014c8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80014d0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(BME280_S64_t)dig_P5)<<17);
 80014d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001714 <BME280_compensate_P_int64+0x2d4>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	17da      	asrs	r2, r3, #31
 80014de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014e2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80014e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014ea:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80014ee:	462a      	mov	r2, r5
 80014f0:	fb02 f203 	mul.w	r2, r2, r3
 80014f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014f8:	4621      	mov	r1, r4
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	441a      	add	r2, r3
 8001500:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001504:	4621      	mov	r1, r4
 8001506:	fba3 1301 	umull	r1, r3, r3, r1
 800150a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800150e:	460b      	mov	r3, r1
 8001510:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001518:	18d3      	adds	r3, r2, r3
 800151a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800151e:	f04f 0000 	mov.w	r0, #0
 8001522:	f04f 0100 	mov.w	r1, #0
 8001526:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800152a:	462b      	mov	r3, r5
 800152c:	0459      	lsls	r1, r3, #17
 800152e:	4623      	mov	r3, r4
 8001530:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001534:	4623      	mov	r3, r4
 8001536:	0458      	lsls	r0, r3, #17
 8001538:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800153c:	1814      	adds	r4, r2, r0
 800153e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001540:	414b      	adcs	r3, r1
 8001542:	647b      	str	r3, [r7, #68]	@ 0x44
 8001544:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001548:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BME280_S64_t)dig_P4)<<35);
 800154c:	4b72      	ldr	r3, [pc, #456]	@ (8001718 <BME280_compensate_P_int64+0x2d8>)
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	b21b      	sxth	r3, r3
 8001554:	17da      	asrs	r2, r3, #31
 8001556:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800155a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800155e:	f04f 0000 	mov.w	r0, #0
 8001562:	f04f 0100 	mov.w	r1, #0
 8001566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800156a:	00d9      	lsls	r1, r3, #3
 800156c:	2000      	movs	r0, #0
 800156e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001572:	1814      	adds	r4, r2, r0
 8001574:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001576:	414b      	adcs	r3, r1
 8001578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800157a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800157e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BME280_S64_t)dig_P3)>>8) + ((var1 * (BME280_S64_t)dig_P2)<<12);
 8001582:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001586:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800158a:	fb03 f102 	mul.w	r1, r3, r2
 800158e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001592:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	18ca      	adds	r2, r1, r3
 800159c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015a0:	fba3 1303 	umull	r1, r3, r3, r3
 80015a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015a8:	460b      	mov	r3, r1
 80015aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015b2:	18d3      	adds	r3, r2, r3
 80015b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015b8:	4b58      	ldr	r3, [pc, #352]	@ (800171c <BME280_compensate_P_int64+0x2dc>)
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	17da      	asrs	r2, r3, #31
 80015c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015ca:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015ce:	462b      	mov	r3, r5
 80015d0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80015d4:	4642      	mov	r2, r8
 80015d6:	fb02 f203 	mul.w	r2, r2, r3
 80015da:	464b      	mov	r3, r9
 80015dc:	4621      	mov	r1, r4
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	4622      	mov	r2, r4
 80015e6:	4641      	mov	r1, r8
 80015e8:	fba2 1201 	umull	r1, r2, r2, r1
 80015ec:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80015f0:	460a      	mov	r2, r1
 80015f2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80015f6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80015fa:	4413      	add	r3, r2
 80015fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001600:	f04f 0000 	mov.w	r0, #0
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800160c:	4623      	mov	r3, r4
 800160e:	0a18      	lsrs	r0, r3, #8
 8001610:	462b      	mov	r3, r5
 8001612:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001616:	462b      	mov	r3, r5
 8001618:	1219      	asrs	r1, r3, #8
 800161a:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <BME280_compensate_P_int64+0x2e0>)
 800161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001620:	b21b      	sxth	r3, r3
 8001622:	17da      	asrs	r2, r3, #31
 8001624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001628:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800162c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001630:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001634:	464a      	mov	r2, r9
 8001636:	fb02 f203 	mul.w	r2, r2, r3
 800163a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800163e:	4644      	mov	r4, r8
 8001640:	fb04 f303 	mul.w	r3, r4, r3
 8001644:	441a      	add	r2, r3
 8001646:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800164a:	4644      	mov	r4, r8
 800164c:	fba3 4304 	umull	r4, r3, r3, r4
 8001650:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001654:	4623      	mov	r3, r4
 8001656:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800165a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800165e:	18d3      	adds	r3, r2, r3
 8001660:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001670:	464c      	mov	r4, r9
 8001672:	0323      	lsls	r3, r4, #12
 8001674:	4644      	mov	r4, r8
 8001676:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800167a:	4644      	mov	r4, r8
 800167c:	0322      	lsls	r2, r4, #12
 800167e:	1884      	adds	r4, r0, r2
 8001680:	633c      	str	r4, [r7, #48]	@ 0x30
 8001682:	eb41 0303 	adc.w	r3, r1, r3
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
 8001688:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800168c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BME280_S64_t)1)<<47)+var1))*((BME280_S64_t)dig_P1)>>33;
 8001690:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001694:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001698:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800169c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016a0:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <BME280_compensate_P_int64+0x2e4>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2200      	movs	r2, #0
 80016a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016b0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016b4:	462b      	mov	r3, r5
 80016b6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016ba:	4642      	mov	r2, r8
 80016bc:	fb02 f203 	mul.w	r2, r2, r3
 80016c0:	464b      	mov	r3, r9
 80016c2:	4621      	mov	r1, r4
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	4622      	mov	r2, r4
 80016cc:	4641      	mov	r1, r8
 80016ce:	fba2 1201 	umull	r1, r2, r2, r1
 80016d2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80016d6:	460a      	mov	r2, r1
 80016d8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80016dc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80016e0:	4413      	add	r3, r2
 80016e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80016f2:	4629      	mov	r1, r5
 80016f4:	104a      	asrs	r2, r1, #1
 80016f6:	4629      	mov	r1, r5
 80016f8:	17cb      	asrs	r3, r1, #31
 80016fa:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0) {
 80016fe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001702:	4313      	orrs	r3, r2
 8001704:	d110      	bne.n	8001728 <BME280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 8001706:	2300      	movs	r3, #0
 8001708:	e154      	b.n	80019b4 <BME280_compensate_P_int64+0x574>
 800170a:	bf00      	nop
 800170c:	20000310 	.word	0x20000310
 8001710:	200002fc 	.word	0x200002fc
 8001714:	200002fa 	.word	0x200002fa
 8001718:	200002f8 	.word	0x200002f8
 800171c:	200002f6 	.word	0x200002f6
 8001720:	200002f4 	.word	0x200002f4
 8001724:	200002f2 	.word	0x200002f2
	}

	p = 1048576- adc_P;
 8001728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800172c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001730:	17da      	asrs	r2, r3, #31
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001736:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800173a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)- var2)*3125)/var1;
 800173e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001742:	105b      	asrs	r3, r3, #1
 8001744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001748:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800174c:	07db      	lsls	r3, r3, #31
 800174e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001752:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001756:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800175a:	4621      	mov	r1, r4
 800175c:	1a89      	subs	r1, r1, r2
 800175e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001760:	4629      	mov	r1, r5
 8001762:	eb61 0303 	sbc.w	r3, r1, r3
 8001766:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001768:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800176c:	4622      	mov	r2, r4
 800176e:	462b      	mov	r3, r5
 8001770:	1891      	adds	r1, r2, r2
 8001772:	6239      	str	r1, [r7, #32]
 8001774:	415b      	adcs	r3, r3
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800177c:	4621      	mov	r1, r4
 800177e:	1851      	adds	r1, r2, r1
 8001780:	61b9      	str	r1, [r7, #24]
 8001782:	4629      	mov	r1, r5
 8001784:	414b      	adcs	r3, r1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001794:	4649      	mov	r1, r9
 8001796:	018b      	lsls	r3, r1, #6
 8001798:	4641      	mov	r1, r8
 800179a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179e:	4641      	mov	r1, r8
 80017a0:	018a      	lsls	r2, r1, #6
 80017a2:	4641      	mov	r1, r8
 80017a4:	1889      	adds	r1, r1, r2
 80017a6:	6139      	str	r1, [r7, #16]
 80017a8:	4649      	mov	r1, r9
 80017aa:	eb43 0101 	adc.w	r1, r3, r1
 80017ae:	6179      	str	r1, [r7, #20]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017bc:	4649      	mov	r1, r9
 80017be:	008b      	lsls	r3, r1, #2
 80017c0:	4641      	mov	r1, r8
 80017c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017c6:	4641      	mov	r1, r8
 80017c8:	008a      	lsls	r2, r1, #2
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	4622      	mov	r2, r4
 80017d2:	189b      	adds	r3, r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	460b      	mov	r3, r1
 80017d8:	462a      	mov	r2, r5
 80017da:	eb42 0303 	adc.w	r3, r2, r3
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017ec:	4649      	mov	r1, r9
 80017ee:	008b      	lsls	r3, r1, #2
 80017f0:	4641      	mov	r1, r8
 80017f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017f6:	4641      	mov	r1, r8
 80017f8:	008a      	lsls	r2, r1, #2
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	4622      	mov	r2, r4
 8001802:	189b      	adds	r3, r3, r2
 8001804:	673b      	str	r3, [r7, #112]	@ 0x70
 8001806:	462b      	mov	r3, r5
 8001808:	460a      	mov	r2, r1
 800180a:	eb42 0303 	adc.w	r3, r2, r3
 800180e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001810:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001814:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001818:	f7ff f99e 	bl	8000b58 <__aeabi_ldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BME280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001824:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <BME280_compensate_P_int64+0x580>)
 8001826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182a:	b21b      	sxth	r3, r3
 800182c:	17da      	asrs	r2, r3, #31
 800182e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001830:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001832:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0b50      	lsrs	r0, r2, #13
 8001840:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001844:	1359      	asrs	r1, r3, #13
 8001846:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800184a:	462b      	mov	r3, r5
 800184c:	fb00 f203 	mul.w	r2, r0, r3
 8001850:	4623      	mov	r3, r4
 8001852:	fb03 f301 	mul.w	r3, r3, r1
 8001856:	4413      	add	r3, r2
 8001858:	4622      	mov	r2, r4
 800185a:	fba2 1200 	umull	r1, r2, r2, r0
 800185e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001862:	460a      	mov	r2, r1
 8001864:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001868:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800186c:	4413      	add	r3, r2
 800186e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001872:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	0b50      	lsrs	r0, r2, #13
 8001880:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001884:	1359      	asrs	r1, r3, #13
 8001886:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800188a:	462b      	mov	r3, r5
 800188c:	fb00 f203 	mul.w	r2, r0, r3
 8001890:	4623      	mov	r3, r4
 8001892:	fb03 f301 	mul.w	r3, r3, r1
 8001896:	4413      	add	r3, r2
 8001898:	4622      	mov	r2, r4
 800189a:	fba2 1200 	umull	r1, r2, r2, r0
 800189e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018a2:	460a      	mov	r2, r1
 80018a4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018ac:	4413      	add	r3, r2
 80018ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018be:	4621      	mov	r1, r4
 80018c0:	0e4a      	lsrs	r2, r1, #25
 80018c2:	4629      	mov	r1, r5
 80018c4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018c8:	4629      	mov	r1, r5
 80018ca:	164b      	asrs	r3, r1, #25
 80018cc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BME280_S64_t)dig_P8) * p) >> 19;
 80018d0:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <BME280_compensate_P_int64+0x584>)
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	17da      	asrs	r2, r3, #31
 80018da:	663b      	str	r3, [r7, #96]	@ 0x60
 80018dc:	667a      	str	r2, [r7, #100]	@ 0x64
 80018de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018e6:	462a      	mov	r2, r5
 80018e8:	fb02 f203 	mul.w	r2, r2, r3
 80018ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018f0:	4621      	mov	r1, r4
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80018fc:	4621      	mov	r1, r4
 80018fe:	fba2 1201 	umull	r1, r2, r2, r1
 8001902:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001906:	460a      	mov	r2, r1
 8001908:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800190c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001910:	4413      	add	r3, r2
 8001912:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001922:	4621      	mov	r1, r4
 8001924:	0cca      	lsrs	r2, r1, #19
 8001926:	4629      	mov	r1, r5
 8001928:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800192c:	4629      	mov	r1, r5
 800192e:	14cb      	asrs	r3, r1, #19
 8001930:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((BME280_S64_t)dig_P7)<<4);
 8001934:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001938:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800193c:	1884      	adds	r4, r0, r2
 800193e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001940:	eb41 0303 	adc.w	r3, r1, r3
 8001944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001946:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800194a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800194e:	4621      	mov	r1, r4
 8001950:	1889      	adds	r1, r1, r2
 8001952:	6539      	str	r1, [r7, #80]	@ 0x50
 8001954:	4629      	mov	r1, r5
 8001956:	eb43 0101 	adc.w	r1, r3, r1
 800195a:	6579      	str	r1, [r7, #84]	@ 0x54
 800195c:	f04f 0000 	mov.w	r0, #0
 8001960:	f04f 0100 	mov.w	r1, #0
 8001964:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001968:	4623      	mov	r3, r4
 800196a:	0a18      	lsrs	r0, r3, #8
 800196c:	462b      	mov	r3, r5
 800196e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001972:	462b      	mov	r3, r5
 8001974:	1219      	asrs	r1, r3, #8
 8001976:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <BME280_compensate_P_int64+0x588>)
 8001978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197c:	b21b      	sxth	r3, r3
 800197e:	17da      	asrs	r2, r3, #31
 8001980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001982:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001990:	464c      	mov	r4, r9
 8001992:	0123      	lsls	r3, r4, #4
 8001994:	4644      	mov	r4, r8
 8001996:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800199a:	4644      	mov	r4, r8
 800199c:	0122      	lsls	r2, r4, #4
 800199e:	1884      	adds	r4, r0, r2
 80019a0:	603c      	str	r4, [r7, #0]
 80019a2:	eb41 0303 	adc.w	r3, r1, r3
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019ac:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return ( BME280_U32_t)p;
 80019b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80019ba:	46bd      	mov	sp, r7
 80019bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c0:	20000302 	.word	0x20000302
 80019c4:	20000300 	.word	0x20000300
 80019c8:	200002fe 	.word	0x200002fe

080019cc <BME280_compensate_T_int32>:
 *
 * @param un-copmensated temperature data as 32bit integer
 * @retval Output value of "5123" equals to 5123/100 = 51.23 DegC
 */
BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	BME280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BME280_S32_t)dig_T1 << 1))) * ((BME280_S32_t)dig_T2)) >> 11;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	10da      	asrs	r2, r3, #3
 80019d8:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <BME280_compensate_T_int32+0x50>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a20 <BME280_compensate_T_int32+0x54>)
 80019e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	12db      	asrs	r3, r3, #11
 80019ec:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BME280_S32_t)dig_T1)) - ((adc_T >> 4) - ((BME280_S32_t)dig_T1))) >> 12) * ((BME280_S32_t)dig_T3)) >> 14;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <BME280_compensate_T_int32+0x58>)
 80019fa:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <BME280_compensate_T_int32+0x58>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3380      	adds	r3, #128	@ 0x80
 8001a08:	121b      	asrs	r3, r3, #8
 8001a0a:	60fb      	str	r3, [r7, #12]
	return T;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200002ec 	.word	0x200002ec
 8001a20:	200002ee 	.word	0x200002ee
 8001a24:	20000310 	.word	0x20000310

08001a28 <BME280_compensate_H_int32>:
 *
 * @param  un-copmensated humidity data as 32bit integer
 * @retval Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
BME280_U32_t BME280_compensate_H_int32(BME280_S32_t adc_H)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	BME280_S32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((BME280_S32_t)76800));
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <BME280_compensate_H_int32+0xbc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001a38:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) *
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	039a      	lsls	r2, r3, #14
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <BME280_compensate_H_int32+0xc0>)
 8001a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a44:	051b      	lsls	r3, r3, #20
 8001a46:	1ad2      	subs	r2, r2, r3
 8001a48:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <BME280_compensate_H_int32+0xc4>)
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	1ad3      	subs	r3, r2, r3
	v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r *
 8001a58:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a5c:	13db      	asrs	r3, r3, #15
	((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) +
 8001a5e:	4a24      	ldr	r2, [pc, #144]	@ (8001af0 <BME280_compensate_H_int32+0xc8>)
 8001a60:	f992 2000 	ldrsb.w	r2, [r2]
 8001a64:	4611      	mov	r1, r2
	v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r *
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	fb01 f202 	mul.w	r2, r1, r2
	((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) +
 8001a6c:	1292      	asrs	r2, r2, #10
 8001a6e:	4921      	ldr	r1, [pc, #132]	@ (8001af4 <BME280_compensate_H_int32+0xcc>)
 8001a70:	7809      	ldrb	r1, [r1, #0]
 8001a72:	4608      	mov	r0, r1
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	fb00 f101 	mul.w	r1, r0, r1
 8001a7a:	12c9      	asrs	r1, r1, #11
 8001a7c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001a80:	fb01 f202 	mul.w	r2, r1, r2
	((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) * ((BME280_S32_t)dig_H2) +
 8001a84:	1292      	asrs	r2, r2, #10
 8001a86:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001a8a:	491b      	ldr	r1, [pc, #108]	@ (8001af8 <BME280_compensate_H_int32+0xd0>)
 8001a8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a90:	fb01 f202 	mul.w	r2, r1, r2
 8001a94:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
	8192) >> 14));
 8001a98:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) *
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	60fb      	str	r3, [r7, #12]
	 v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	13db      	asrs	r3, r3, #15
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	13d2      	asrs	r2, r2, #15
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	11db      	asrs	r3, r3, #7
	((BME280_S32_t)dig_H1)) >> 4));
 8001aae:	4a13      	ldr	r2, [pc, #76]	@ (8001afc <BME280_compensate_H_int32+0xd4>)
 8001ab0:	7812      	ldrb	r2, [r2, #0]
	 v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
	((BME280_S32_t)dig_H1)) >> 4));
 8001ab6:	111b      	asrs	r3, r3, #4
	 v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	60fb      	str	r3, [r7, #12]
	 v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ac4:	60fb      	str	r3, [r7, #12]
	 v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001acc:	bfa8      	it	ge
 8001ace:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001ad2:	60fb      	str	r3, [r7, #12]
	 return ( BME280_U32_t)(v_x1_u32r>>12);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	131b      	asrs	r3, r3, #12
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20000310 	.word	0x20000310
 8001ae8:	2000030a 	.word	0x2000030a
 8001aec:	2000030c 	.word	0x2000030c
 8001af0:	2000030e 	.word	0x2000030e
 8001af4:	20000308 	.word	0x20000308
 8001af8:	20000306 	.word	0x20000306
 8001afc:	20000304 	.word	0x20000304

08001b00 <BME280_read_register>:
  * @param  reg_addrs Internal memory address
  * @param  data Pointer to data buffer
  * @retval HAL status
  */
HAL_StatusTypeDef BME280_read_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addrs, uint8_t *data)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(hi2c, BME280_I2C_ADDR, reg_addrs, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	21ec      	movs	r1, #236	@ 0xec
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f001 f997 	bl	8002e58 <HAL_I2C_Mem_Read>
 8001b2a:	4603      	mov	r3, r0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <BME280_read_registers>:
  * @param  pData Pointer to data buffer
  * @param  length number of bytes to be read from the memory
  * @retval HAL status
  */
HAL_StatusTypeDef BME280_read_registers(I2C_HandleTypeDef *hi2c, uint8_t reg_addrs, uint8_t *data, uint8_t length)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af04      	add	r7, sp, #16
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	460b      	mov	r3, r1
 8001b42:	72fb      	strb	r3, [r7, #11]
 8001b44:	4613      	mov	r3, r2
 8001b46:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, BME280_I2C_ADDR, reg_addrs, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	7abb      	ldrb	r3, [r7, #10]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	9102      	str	r1, [sp, #8]
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	21ec      	movs	r1, #236	@ 0xec
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f001 f979 	bl	8002e58 <HAL_I2C_Mem_Read>
 8001b66:	4603      	mov	r3, r0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <BME280_write_register>:
  * @param  reg_addrs Internal memory address
  * @param  data Pointer to data buffer
  * @retval HAL status
  */
HAL_StatusTypeDef BME280_write_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addrs, uint8_t *data)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(hi2c, BME280_I2C_ADDR, reg_addrs, I2C_MEMADD_SIZE_8BIT, data, 1,HAL_MAX_DELAY);
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2301      	movs	r3, #1
 8001b92:	21ec      	movs	r1, #236	@ 0xec
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f001 f84b 	bl	8002c30 <HAL_I2C_Mem_Write>
 8001b9a:	4603      	mov	r3, r0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bde:	f000 fc6d 	bl	80024bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be2:	f000 f86b 	bl	8001cbc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001be6:	f000 f8d7 	bl	8001d98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bea:	f000 f999 	bl	8001f20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bee:	f000 f8f1 	bl	8001dd4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001bf2:	f000 f92f 	bl	8001e54 <MX_SPI1_Init>
  MX_TIM16_Init();
 8001bf6:	f000 f96b 	bl	8001ed0 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8001bfa:	f009 fe6b 	bl	800b8d4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  BME280_cmd_res cmd_res = BME280_init(&bme280, &hi2c1);
 8001bfe:	4929      	ldr	r1, [pc, #164]	@ (8001ca4 <main+0xcc>)
 8001c00:	4829      	ldr	r0, [pc, #164]	@ (8001ca8 <main+0xd0>)
 8001c02:	f7ff f959 	bl	8000eb8 <BME280_init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (cmd_res != BME280_CMD_OK) {
 8001c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <main+0x4a>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);	// indicate error with LED on PA10
 8001c14:	2201      	movs	r2, #1
 8001c16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1e:	f000 ff53 	bl	8002ac8 <HAL_GPIO_WritePin>
  }

  // start the timer
  HAL_TIM_Base_Start_IT(&htim16);
 8001c22:	4822      	ldr	r0, [pc, #136]	@ (8001cac <main+0xd4>)
 8001c24:	f005 f966 	bl	8006ef4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  uint8_t str[30];	// message buffer

  while (1)
  {
	  if (tim16_flag){
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <main+0xd8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0fa      	beq.n	8001c28 <main+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c32:	b672      	cpsid	i
}
 8001c34:	bf00      	nop
		  __disable_irq();

		  // read environmental (temperature, humidity, pressure) data from the sensor
		  BME280_cmd_res cmd_res = BME280_read_env_data(&bme280);
 8001c36:	481c      	ldr	r0, [pc, #112]	@ (8001ca8 <main+0xd0>)
 8001c38:	f7ff fb72 	bl	8001320 <BME280_read_env_data>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		  if (cmd_res != BME280_CMD_OK) {
 8001c42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <main+0x80>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);	// indicate error with LED on PA10
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c54:	f000 ff38 	bl	8002ac8 <HAL_GPIO_WritePin>
		  }

		  // convert data into the appropriate units
		  float temp_deg = (float)bme280.T / 100.0f;
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <main+0xd0>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c64:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001cb4 <main+0xdc>
 8001c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6c:	edc7 7a08 	vstr	s15, [r7, #32]
		  //BME280_U32_t hum_prh = (float)bme280.H/kH * 100.0;	// relative humidity in Percent
		  //BME280_U32_t pres_pa=  bme280.P/kP * 10;	//in Pascal

		  // create message string from the environmental data
		  sprintf((char *)str, "Temperatur: %.2f °C\n\r", temp_deg);
 8001c70:	6a38      	ldr	r0, [r7, #32]
 8001c72:	f7fe fc41 	bl	80004f8 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4638      	mov	r0, r7
 8001c7c:	490e      	ldr	r1, [pc, #56]	@ (8001cb8 <main+0xe0>)
 8001c7e:	f00b f8a3 	bl	800cdc8 <siprintf>

		  // send data over USB Virtual COM Port
		  CDC_Transmit_FS(str, strlen((char *)str));
 8001c82:	463b      	mov	r3, r7
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe facb 	bl	8000220 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f009 fedc 	bl	800ba50 <CDC_Transmit_FS>


		  tim16_flag = 0;	// reset the timer flag
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <main+0xd8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c9e:	b662      	cpsie	i
}
 8001ca0:	bf00      	nop
	  if (tim16_flag){
 8001ca2:	e7c1      	b.n	8001c28 <main+0x50>
 8001ca4:	20000314 	.word	0x20000314
 8001ca8:	2000041c 	.word	0x2000041c
 8001cac:	200003cc 	.word	0x200003cc
 8001cb0:	20000418 	.word	0x20000418
 8001cb4:	42c80000 	.word	0x42c80000
 8001cb8:	0800f038 	.word	0x0800f038

08001cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09a      	sub	sp, #104	@ 0x68
 8001cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	2248      	movs	r2, #72	@ 0x48
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00b f8df 	bl	800ce8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d94 <SystemClock_Config+0xd8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cea:	4a2a      	ldr	r2, [pc, #168]	@ (8001d94 <SystemClock_Config+0xd8>)
 8001cec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <SystemClock_Config+0xd8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001cfe:	2327      	movs	r3, #39	@ 0x27
 8001d00:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d12:	2301      	movs	r3, #1
 8001d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d16:	2340      	movs	r3, #64	@ 0x40
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d1e:	2360      	movs	r3, #96	@ 0x60
 8001d20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d22:	2302      	movs	r3, #2
 8001d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d26:	2301      	movs	r3, #1
 8001d28:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d38:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d3c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d42:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fdb7 	bl	80058bc <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d54:	f000 f932 	bl	8001fbc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d58:	236f      	movs	r3, #111	@ 0x6f
 8001d5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2103      	movs	r1, #3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 f913 	bl	8005fa4 <HAL_RCC_ClockConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001d84:	f000 f91a 	bl	8001fbc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001d88:	f004 fea2 	bl	8006ad0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d8c:	bf00      	nop
 8001d8e:	3768      	adds	r7, #104	@ 0x68
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	58000400 	.word	0x58000400

08001d98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b094      	sub	sp, #80	@ 0x50
 8001d9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d9e:	463b      	mov	r3, r7
 8001da0:	2250      	movs	r2, #80	@ 0x50
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00b f872 	bl	800ce8e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dae:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001db0:	2300      	movs	r3, #0
 8001db2:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001db4:	2310      	movs	r3, #16
 8001db6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db8:	463b      	mov	r3, r7
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fd12 	bl	80067e4 <HAL_RCCEx_PeriphCLKConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001dc6:	f000 f8f9 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001dca:	bf00      	nop
 8001dcc:	3750      	adds	r7, #80	@ 0x50
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <MX_I2C1_Init+0x78>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001de0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <MX_I2C1_Init+0x7c>)
 8001de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df0:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001df6:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e0e:	480e      	ldr	r0, [pc, #56]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001e10:	f000 fe72 	bl	8002af8 <HAL_I2C_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e1a:	f000 f8cf 	bl	8001fbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4809      	ldr	r0, [pc, #36]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001e22:	f001 fbf5 	bl	8003610 <HAL_I2CEx_ConfigAnalogFilter>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e2c:	f000 f8c6 	bl	8001fbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <MX_I2C1_Init+0x74>)
 8001e34:	f001 fc37 	bl	80036a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e3e:	f000 f8bd 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000314 	.word	0x20000314
 8001e4c:	40005400 	.word	0x40005400
 8001e50:	10b17db5 	.word	0x10b17db5

08001e54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ecc <MX_SPI1_Init+0x78>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e6e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001e72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e82:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001eae:	2208      	movs	r2, #8
 8001eb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <MX_SPI1_Init+0x74>)
 8001eb4:	f004 ff23 	bl	8006cfe <HAL_SPI_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ebe:	f000 f87d 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000368 	.word	0x20000368
 8001ecc:	40013000 	.word	0x40013000

08001ed0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ed4:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <MX_TIM16_Init+0x48>)
 8001ed6:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <MX_TIM16_Init+0x4c>)
 8001ed8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 512;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <MX_TIM16_Init+0x48>)
 8001edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <MX_TIM16_Init+0x48>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <MX_TIM16_Init+0x48>)
 8001eea:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8001eee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_TIM16_Init+0x48>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <MX_TIM16_Init+0x48>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_TIM16_Init+0x48>)
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_TIM16_Init+0x48>)
 8001f04:	f004 ff9e 	bl	8006e44 <HAL_TIM_Base_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001f0e:	f000 f855 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200003cc 	.word	0x200003cc
 8001f1c:	40014400 	.word	0x40014400

08001f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff fe35 	bl	8001ba4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7ff fe32 	bl	8001ba4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_INDICATOR_GPIO_Port, ERROR_INDICATOR_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4a:	f000 fdbd 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f64:	f000 fc40 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERROR_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ERROR_INDICATOR_Pin;
 8001f68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ERROR_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f82:	f000 fc31 	bl	80027e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback
	if (htim == &htim16 )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d102      	bne.n	8001fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		tim16_flag = 1;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
	}
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	200003cc 	.word	0x200003cc
 8001fb8:	20000418 	.word	0x20000418

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <Error_Handler+0x8>

08001fc8 <LL_AHB2_GRP1_EnableClock>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fec:	68fb      	ldr	r3, [r7, #12]
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002006:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4313      	orrs	r3, r2
 8002010:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002016:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002038:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800203a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4313      	orrs	r3, r2
 8002042:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002048:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002050:	68fb      	ldr	r3, [r7, #12]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b09c      	sub	sp, #112	@ 0x70
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2250      	movs	r2, #80	@ 0x50
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f00a fefe 	bl	800ce8e <memset>
  if(hi2c->Instance==I2C1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a16      	ldr	r2, [pc, #88]	@ (80020f0 <HAL_I2C_MspInit+0x84>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d125      	bne.n	80020e8 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800209c:	2304      	movs	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020a0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fb9a 	bl	80067e4 <HAL_RCCEx_PeriphCLKConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020b6:	f7ff ff81 	bl	8001fbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2002      	movs	r0, #2
 80020bc:	f7ff ff84 	bl	8001fc8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c0:	23c0      	movs	r3, #192	@ 0xc0
 80020c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d0:	2304      	movs	r3, #4
 80020d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020d8:	4619      	mov	r1, r3
 80020da:	4806      	ldr	r0, [pc, #24]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020dc:	f000 fb84 	bl	80027e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80020e4:	f7ff ff89 	bl	8001ffa <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020e8:	bf00      	nop
 80020ea:	3770      	adds	r7, #112	@ 0x70
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40005400 	.word	0x40005400
 80020f4:	48000400 	.word	0x48000400

080020f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0f      	ldr	r2, [pc, #60]	@ (8002154 <HAL_SPI_MspInit+0x5c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d117      	bne.n	800214a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800211a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800211e:	f7ff ff85 	bl	800202c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2001      	movs	r0, #1
 8002124:	f7ff ff50 	bl	8001fc8 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002128:	23f0      	movs	r3, #240	@ 0xf0
 800212a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002138:	2305      	movs	r3, #5
 800213a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002146:	f000 fb4f 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800214a:	bf00      	nop
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40013000 	.word	0x40013000

08002158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a09      	ldr	r2, [pc, #36]	@ (800218c <HAL_TIM_Base_MspInit+0x34>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d10b      	bne.n	8002182 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800216a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800216e:	f7ff ff5d 	bl	800202c <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2019      	movs	r0, #25
 8002178:	f000 fb01 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800217c:	2019      	movs	r0, #25
 800217e:	f000 fb18 	bl	80027b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40014400 	.word	0x40014400

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <NMI_Handler+0x4>

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <MemManage_Handler+0x4>

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e6:	f000 f9c3 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80021f4:	4802      	ldr	r0, [pc, #8]	@ (8002200 <USB_LP_IRQHandler+0x10>)
 80021f6:	f001 fb92 	bl	800391e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20001920 	.word	0x20001920

08002204 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800220a:	f004 fec1 	bl	8006f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200003cc 	.word	0x200003cc

08002218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_kill>:

int _kill(int pid, int sig)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002232:	f00a fe7f 	bl	800cf34 <__errno>
 8002236:	4603      	mov	r3, r0
 8002238:	2216      	movs	r2, #22
 800223a:	601a      	str	r2, [r3, #0]
  return -1;
 800223c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_exit>:

void _exit (int status)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffe7 	bl	8002228 <_kill>
  while (1) {}    /* Make sure we hang here */
 800225a:	bf00      	nop
 800225c:	e7fd      	b.n	800225a <_exit+0x12>

0800225e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e00a      	b.n	8002286 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002270:	f3af 8000 	nop.w
 8002274:	4601      	mov	r1, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	60ba      	str	r2, [r7, #8]
 800227c:	b2ca      	uxtb	r2, r1
 800227e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3301      	adds	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	dbf0      	blt.n	8002270 <_read+0x12>
  }

  return len;
 800228e:	687b      	ldr	r3, [r7, #4]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e009      	b.n	80022be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	60ba      	str	r2, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3301      	adds	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dbf1      	blt.n	80022aa <_write+0x12>
  }
  return len;
 80022c6:	687b      	ldr	r3, [r7, #4]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_close>:

int _close(int file)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022f8:	605a      	str	r2, [r3, #4]
  return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_isatty>:

int _isatty(int file)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002310:	2301      	movs	r3, #1
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	@ (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	@ (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f00a fde4 	bl	800cf34 <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	@ (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	@ (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20030000 	.word	0x20030000
 8002398:	00000400 	.word	0x00000400
 800239c:	20000438 	.word	0x20000438
 80023a0:	20001f68 	.word	0x20001f68

080023a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80023a8:	4b24      	ldr	r3, [pc, #144]	@ (800243c <SystemInit+0x98>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ae:	4a23      	ldr	r2, [pc, #140]	@ (800243c <SystemInit+0x98>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023cc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80023d0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <SystemInit+0x9c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023ee:	f023 0305 	bic.w	r3, r3, #5
 80023f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80023f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240e:	4a0d      	ldr	r2, [pc, #52]	@ (8002444 <SystemInit+0xa0>)
 8002410:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002416:	4a0b      	ldr	r2, [pc, #44]	@ (8002444 <SystemInit+0xa0>)
 8002418:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002428:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800242a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00
 8002440:	faf6fefb 	.word	0xfaf6fefb
 8002444:	22041000 	.word	0x22041000

08002448 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002448:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800244a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244c:	3304      	adds	r3, #4

0800244e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002450:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002452:	d3f9      	bcc.n	8002448 <CopyDataInit>
  bx lr
 8002454:	4770      	bx	lr

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002456:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002458:	3004      	adds	r0, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800245a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>
  bx lr
 800245e:	4770      	bx	lr

08002460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002460:	480c      	ldr	r0, [pc, #48]	@ (8002494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002462:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002464:	f7ff ff9e 	bl	80023a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002468:	480b      	ldr	r0, [pc, #44]	@ (8002498 <LoopForever+0x6>)
 800246a:	490c      	ldr	r1, [pc, #48]	@ (800249c <LoopForever+0xa>)
 800246c:	4a0c      	ldr	r2, [pc, #48]	@ (80024a0 <LoopForever+0xe>)
 800246e:	2300      	movs	r3, #0
 8002470:	f7ff ffed 	bl	800244e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002474:	480b      	ldr	r0, [pc, #44]	@ (80024a4 <LoopForever+0x12>)
 8002476:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <LoopForever+0x16>)
 8002478:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <LoopForever+0x1a>)
 800247a:	2300      	movs	r3, #0
 800247c:	f7ff ffe7 	bl	800244e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002480:	480b      	ldr	r0, [pc, #44]	@ (80024b0 <LoopForever+0x1e>)
 8002482:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <LoopForever+0x22>)
 8002484:	2300      	movs	r3, #0
 8002486:	f7ff ffe8 	bl	800245a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800248a:	f00a fd59 	bl	800cf40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800248e:	f7ff fba3 	bl	8001bd8 <main>

08002492 <LoopForever>:

LoopForever:
  b LoopForever
 8002492:	e7fe      	b.n	8002492 <LoopForever>
  ldr   r0, =_estack
 8002494:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002498:	20000008 	.word	0x20000008
 800249c:	200002d0 	.word	0x200002d0
 80024a0:	0800f4c8 	.word	0x0800f4c8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80024a4:	20030000 	.word	0x20030000
 80024a8:	20030000 	.word	0x20030000
 80024ac:	0800f790 	.word	0x0800f790
  INIT_BSS _sbss, _ebss
 80024b0:	200002d0 	.word	0x200002d0
 80024b4:	20001f68 	.word	0x20001f68

080024b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_IRQHandler>
	...

080024bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c6:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <HAL_Init+0x3c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <HAL_Init+0x3c>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d2:	2003      	movs	r0, #3
 80024d4:	f000 f948 	bl	8002768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d8:	200f      	movs	r0, #15
 80024da:	f000 f80f 	bl	80024fc <HAL_InitTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	71fb      	strb	r3, [r7, #7]
 80024e8:	e001      	b.n	80024ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ea:	f7ff fdb8 	bl	800205e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024ee:	79fb      	ldrb	r3, [r7, #7]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58004000 	.word	0x58004000

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <HAL_InitTick+0x6c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d024      	beq.n	800255a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002510:	f003 fef4 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_InitTick+0x6c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002520:	fbb3 f3f1 	udiv	r3, r3, r1
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f950 	bl	80027ce <HAL_SYSTICK_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10f      	bne.n	8002554 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	d809      	bhi.n	800254e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800253a:	2200      	movs	r2, #0
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	f04f 30ff 	mov.w	r0, #4294967295
 8002542:	f000 f91c 	bl	800277e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002546:	4a09      	ldr	r2, [pc, #36]	@ (800256c <HAL_InitTick+0x70>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e007      	b.n	800255e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e004      	b.n	800255e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e001      	b.n	800255e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000010 	.word	0x20000010
 800256c:	2000000c 	.word	0x2000000c

08002570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_IncTick+0x20>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_IncTick+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <HAL_IncTick+0x24>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000010 	.word	0x20000010
 8002594:	2000043c 	.word	0x2000043c

08002598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;
 800259c:	4b03      	ldr	r3, [pc, #12]	@ (80025ac <HAL_GetTick+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	2000043c 	.word	0x2000043c

080025b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80025b4:	4b03      	ldr	r3, [pc, #12]	@ (80025c4 <HAL_GetTickPrio+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fa:	4a04      	ldr	r2, [pc, #16]	@ (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <__NVIC_GetPriorityGrouping+0x18>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0307 	and.w	r3, r3, #7
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db0b      	blt.n	8002656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4907      	ldr	r1, [pc, #28]	@ (8002664 <__NVIC_EnableIRQ+0x38>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2001      	movs	r0, #1
 800264e:	fa00 f202 	lsl.w	r2, r0, r2
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	db0a      	blt.n	8002692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	490c      	ldr	r1, [pc, #48]	@ (80026b4 <__NVIC_SetPriority+0x4c>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	440b      	add	r3, r1
 800268c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002690:	e00a      	b.n	80026a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4908      	ldr	r1, [pc, #32]	@ (80026b8 <__NVIC_SetPriority+0x50>)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	3b04      	subs	r3, #4
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	440b      	add	r3, r1
 80026a6:	761a      	strb	r2, [r3, #24]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000e100 	.word	0xe000e100
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	@ 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf28      	it	cs
 80026da:	2304      	movcs	r3, #4
 80026dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d902      	bls.n	80026ec <NVIC_EncodePriority+0x30>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3b03      	subs	r3, #3
 80026ea:	e000      	b.n	80026ee <NVIC_EncodePriority+0x32>
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43d9      	mvns	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	4313      	orrs	r3, r2
         );
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	@ 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002734:	d301      	bcc.n	800273a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002736:	2301      	movs	r3, #1
 8002738:	e00f      	b.n	800275a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <SysTick_Config+0x40>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002742:	210f      	movs	r1, #15
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f7ff ff8e 	bl	8002668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <SysTick_Config+0x40>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <SysTick_Config+0x40>)
 8002754:	2207      	movs	r2, #7
 8002756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	e000e010 	.word	0xe000e010

08002768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff29 	bl	80025c8 <__NVIC_SetPriorityGrouping>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff40 	bl	8002610 <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff90 	bl	80026bc <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5f 	bl	8002668 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff33 	bl	800262c <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffa4 	bl	8002724 <SysTick_Config>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f6:	e14c      	b.n	8002a92 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 813e 	beq.w	8002a8c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d005      	beq.n	8002828 <HAL_GPIO_Init+0x40>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d130      	bne.n	800288a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285e:	2201      	movs	r2, #1
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0201 	and.w	r2, r3, #1
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b03      	cmp	r3, #3
 8002894:	d017      	beq.n	80028c6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d123      	bne.n	800291a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	08da      	lsrs	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3208      	adds	r2, #8
 80028da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	6939      	ldr	r1, [r7, #16]
 8002916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0203 	and.w	r2, r3, #3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8098 	beq.w	8002a8c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800295c:	4a54      	ldr	r2, [pc, #336]	@ (8002ab0 <HAL_GPIO_Init+0x2c8>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002986:	d019      	beq.n	80029bc <HAL_GPIO_Init+0x1d4>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ab4 <HAL_GPIO_Init+0x2cc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_GPIO_Init+0x1d0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a49      	ldr	r2, [pc, #292]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00d      	beq.n	80029b4 <HAL_GPIO_Init+0x1cc>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a48      	ldr	r2, [pc, #288]	@ (8002abc <HAL_GPIO_Init+0x2d4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <HAL_GPIO_Init+0x1c8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a47      	ldr	r2, [pc, #284]	@ (8002ac0 <HAL_GPIO_Init+0x2d8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_GPIO_Init+0x1c4>
 80029a8:	2304      	movs	r3, #4
 80029aa:	e008      	b.n	80029be <HAL_GPIO_Init+0x1d6>
 80029ac:	2307      	movs	r3, #7
 80029ae:	e006      	b.n	80029be <HAL_GPIO_Init+0x1d6>
 80029b0:	2303      	movs	r3, #3
 80029b2:	e004      	b.n	80029be <HAL_GPIO_Init+0x1d6>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x1d6>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_Init+0x1d6>
 80029bc:	2300      	movs	r3, #0
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ce:	4938      	ldr	r1, [pc, #224]	@ (8002ab0 <HAL_GPIO_Init+0x2c8>)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029dc:	4b39      	ldr	r3, [pc, #228]	@ (8002ac4 <HAL_GPIO_Init+0x2dc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a00:	4a30      	ldr	r2, [pc, #192]	@ (8002ac4 <HAL_GPIO_Init+0x2dc>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a06:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac4 <HAL_GPIO_Init+0x2dc>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a2a:	4a26      	ldr	r2, [pc, #152]	@ (8002ac4 <HAL_GPIO_Init+0x2dc>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a30:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <HAL_GPIO_Init+0x2dc>)
 8002a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a56:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac4 <HAL_GPIO_Init+0x2dc>)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_GPIO_Init+0x2dc>)
 8002a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a84:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac4 <HAL_GPIO_Init+0x2dc>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f aeab 	bne.w	80027f8 <HAL_GPIO_Init+0x10>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	48000400 	.word	0x48000400
 8002ab8:	48000800 	.word	0x48000800
 8002abc:	48000c00 	.word	0x48000c00
 8002ac0:	48001000 	.word	0x48001000
 8002ac4:	58000800 	.word	0x58000800

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08d      	b.n	8002c26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff faa4 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	@ 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e006      	b.n	8002b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d108      	bne.n	8002b9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	e007      	b.n	8002baa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69d9      	ldr	r1, [r3, #28]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	4608      	mov	r0, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	817b      	strh	r3, [r7, #10]
 8002c42:	460b      	mov	r3, r1
 8002c44:	813b      	strh	r3, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	f040 80f9 	bne.w	8002e4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_I2C_Mem_Write+0x34>
 8002c5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0ed      	b.n	8002e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_I2C_Mem_Write+0x4e>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0e6      	b.n	8002e4c <HAL_I2C_Mem_Write+0x21c>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c86:	f7ff fc87 	bl	8002598 <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2319      	movs	r3, #25
 8002c92:	2201      	movs	r2, #1
 8002c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fac3 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0d1      	b.n	8002e4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2221      	movs	r2, #33	@ 0x21
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2240      	movs	r2, #64	@ 0x40
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd0:	88f8      	ldrh	r0, [r7, #6]
 8002cd2:	893a      	ldrh	r2, [r7, #8]
 8002cd4:	8979      	ldrh	r1, [r7, #10]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4603      	mov	r3, r0
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f9d3 	bl	800308c <I2C_RequestMemoryWrite>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0a9      	b.n	8002e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2bff      	cmp	r3, #255	@ 0xff
 8002d00:	d90e      	bls.n	8002d20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	22ff      	movs	r2, #255	@ 0xff
 8002d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	2300      	movs	r3, #0
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fc47 	bl	80035ac <I2C_TransferConfig>
 8002d1e:	e00f      	b.n	8002d40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	8979      	ldrh	r1, [r7, #10]
 8002d32:	2300      	movs	r3, #0
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fc36 	bl	80035ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fac6 	bl	80032d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e07b      	b.n	8002e4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d034      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x1c8>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d130      	bne.n	8002df8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2180      	movs	r1, #128	@ 0x80
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fa3f 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e04d      	b.n	8002e4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2bff      	cmp	r3, #255	@ 0xff
 8002db8:	d90e      	bls.n	8002dd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	22ff      	movs	r2, #255	@ 0xff
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	8979      	ldrh	r1, [r7, #10]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fbeb 	bl	80035ac <I2C_TransferConfig>
 8002dd6:	e00f      	b.n	8002df8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	8979      	ldrh	r1, [r7, #10]
 8002dea:	2300      	movs	r3, #0
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fbda 	bl	80035ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d19e      	bne.n	8002d40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 faac 	bl	8003364 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e01a      	b.n	8002e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <HAL_I2C_Mem_Write+0x224>)
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e000      	b.n	8002e4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	fe00e800 	.word	0xfe00e800

08002e58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	817b      	strh	r3, [r7, #10]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	813b      	strh	r3, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	f040 80fd 	bne.w	800307a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_I2C_Mem_Read+0x34>
 8002e86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0f1      	b.n	800307c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_I2C_Mem_Read+0x4e>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e0ea      	b.n	800307c <HAL_I2C_Mem_Read+0x224>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eae:	f7ff fb73 	bl	8002598 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2319      	movs	r3, #25
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f9af 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0d5      	b.n	800307c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2222      	movs	r2, #34	@ 0x22
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2240      	movs	r2, #64	@ 0x40
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef8:	88f8      	ldrh	r0, [r7, #6]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	8979      	ldrh	r1, [r7, #10]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	4603      	mov	r3, r0
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f913 	bl	8003134 <I2C_RequestMemoryRead>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0ad      	b.n	800307c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2bff      	cmp	r3, #255	@ 0xff
 8002f28:	d90e      	bls.n	8002f48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	22ff      	movs	r2, #255	@ 0xff
 8002f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	8979      	ldrh	r1, [r7, #10]
 8002f38:	4b52      	ldr	r3, [pc, #328]	@ (8003084 <HAL_I2C_Mem_Read+0x22c>)
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fb33 	bl	80035ac <I2C_TransferConfig>
 8002f46:	e00f      	b.n	8002f68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	8979      	ldrh	r1, [r7, #10]
 8002f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003084 <HAL_I2C_Mem_Read+0x22c>)
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fb22 	bl	80035ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2104      	movs	r1, #4
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f956 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07c      	b.n	800307c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d034      	beq.n	8003028 <HAL_I2C_Mem_Read+0x1d0>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d130      	bne.n	8003028 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	@ 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f927 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e04d      	b.n	800307c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2bff      	cmp	r3, #255	@ 0xff
 8002fe8:	d90e      	bls.n	8003008 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	@ 0xff
 8002fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	8979      	ldrh	r1, [r7, #10]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fad3 	bl	80035ac <I2C_TransferConfig>
 8003006:	e00f      	b.n	8003028 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fac2 	bl	80035ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d19a      	bne.n	8002f68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f994 	bl	8003364 <I2C_WaitOnSTOPFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e01a      	b.n	800307c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2220      	movs	r2, #32
 800304c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <HAL_I2C_Mem_Read+0x230>)
 800305a:	400b      	ands	r3, r1
 800305c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	80002400 	.word	0x80002400
 8003088:	fe00e800 	.word	0xfe00e800

0800308c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	461a      	mov	r2, r3
 800309a:	4603      	mov	r3, r0
 800309c:	817b      	strh	r3, [r7, #10]
 800309e:	460b      	mov	r3, r1
 80030a0:	813b      	strh	r3, [r7, #8]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	8979      	ldrh	r1, [r7, #10]
 80030ac:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <I2C_RequestMemoryWrite+0xa4>)
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fa79 	bl	80035ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	69b9      	ldr	r1, [r7, #24]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f909 	bl	80032d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e02c      	b.n	8003128 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80030de:	e015      	b.n	800310c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030e0:	893b      	ldrh	r3, [r7, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	69b9      	ldr	r1, [r7, #24]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8ef 	bl	80032d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e012      	b.n	8003128 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003102:	893b      	ldrh	r3, [r7, #8]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2200      	movs	r2, #0
 8003114:	2180      	movs	r1, #128	@ 0x80
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f884 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	80002000 	.word	0x80002000

08003134 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	4608      	mov	r0, r1
 800313e:	4611      	mov	r1, r2
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	817b      	strh	r3, [r7, #10]
 8003146:	460b      	mov	r3, r1
 8003148:	813b      	strh	r3, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	8979      	ldrh	r1, [r7, #10]
 8003154:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <I2C_RequestMemoryRead+0xa4>)
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2300      	movs	r3, #0
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fa26 	bl	80035ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	69b9      	ldr	r1, [r7, #24]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f8b6 	bl	80032d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e02c      	b.n	80031ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d105      	bne.n	8003186 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800317a:	893b      	ldrh	r3, [r7, #8]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28
 8003184:	e015      	b.n	80031b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	b29b      	uxth	r3, r3
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f89c 	bl	80032d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e012      	b.n	80031ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031a8:	893b      	ldrh	r3, [r7, #8]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2140      	movs	r1, #64	@ 0x40
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f831 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	80002000 	.word	0x80002000

080031dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d103      	bne.n	80031fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2200      	movs	r2, #0
 80031f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d007      	beq.n	8003218 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	619a      	str	r2, [r3, #24]
  }
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003234:	e03b      	b.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f8d6 	bl	80033ec <I2C_IsErrorOccurred>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e041      	b.n	80032ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d02d      	beq.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003252:	f7ff f9a1 	bl	8002598 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d122      	bne.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4013      	ands	r3, r2
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	429a      	cmp	r2, r3
 8003284:	d113      	bne.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00f      	b.n	80032ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4013      	ands	r3, r2
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	bf0c      	ite	eq
 80032be:	2301      	moveq	r3, #1
 80032c0:	2300      	movne	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d0b4      	beq.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e2:	e033      	b.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f87f 	bl	80033ec <I2C_IsErrorOccurred>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e031      	b.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d025      	beq.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003300:	f7ff f94a 	bl	8002598 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	429a      	cmp	r2, r3
 800330e:	d302      	bcc.n	8003316 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11a      	bne.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b02      	cmp	r3, #2
 8003322:	d013      	beq.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e007      	b.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d1c4      	bne.n	80032e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003370:	e02f      	b.n	80033d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f838 	bl	80033ec <I2C_IsErrorOccurred>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e02d      	b.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7ff f907 	bl	8002598 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d11a      	bne.n	80033d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d013      	beq.n	80033d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e007      	b.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d1c8      	bne.n	8003372 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d068      	beq.n	80034ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2210      	movs	r2, #16
 800341e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003420:	e049      	b.n	80034b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d045      	beq.n	80034b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7ff f8b5 	bl	8002598 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_IsErrorOccurred+0x54>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d13a      	bne.n	80034b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003452:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003462:	d121      	bne.n	80034a8 <I2C_IsErrorOccurred+0xbc>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800346a:	d01d      	beq.n	80034a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	2b20      	cmp	r3, #32
 8003470:	d01a      	beq.n	80034a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003480:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003482:	f7ff f889 	bl	8002598 <HAL_GetTick>
 8003486:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003488:	e00e      	b.n	80034a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800348a:	f7ff f885 	bl	8002598 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b19      	cmp	r3, #25
 8003496:	d907      	bls.n	80034a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f043 0320 	orr.w	r3, r3, #32
 800349e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034a6:	e006      	b.n	80034b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d1e9      	bne.n	800348a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d003      	beq.n	80034cc <I2C_IsErrorOccurred+0xe0>
 80034c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0aa      	beq.n	8003422 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2220      	movs	r2, #32
 80034da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800350c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f043 0308 	orr.w	r3, r3, #8
 8003524:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800352e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	f043 0302 	orr.w	r3, r3, #2
 8003546:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01c      	beq.n	800359a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff fe3b 	bl	80031dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <I2C_IsErrorOccurred+0x1bc>)
 8003572:	400b      	ands	r3, r1
 8003574:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	431a      	orrs	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800359a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3728      	adds	r7, #40	@ 0x28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	fe00e800 	.word	0xfe00e800

080035ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	4613      	mov	r3, r2
 80035bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035c4:	7a7b      	ldrb	r3, [r7, #9]
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	0d5b      	lsrs	r3, r3, #21
 80035e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80035ea:	4b08      	ldr	r3, [pc, #32]	@ (800360c <I2C_TransferConfig+0x60>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	43db      	mvns	r3, r3
 80035f0:	ea02 0103 	and.w	r1, r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	03ff63ff 	.word	0x03ff63ff

08003610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	d138      	bne.n	8003698 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003630:	2302      	movs	r3, #2
 8003632:	e032      	b.n	800369a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	@ 0x24
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003662:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d139      	bne.n	8003730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e033      	b.n	8003732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2224      	movs	r2, #36	@ 0x24
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0c0      	b.n	80038d2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f008 faed 	bl	800bd44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f003 fddf 	bl	800733a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	e03e      	b.n	8003800 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	440b      	add	r3, r1
 8003790:	3311      	adds	r3, #17
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	3310      	adds	r3, #16
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	3313      	adds	r3, #19
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	440b      	add	r3, r1
 80037cc:	3320      	adds	r3, #32
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	3324      	adds	r3, #36	@ 0x24
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	440b      	add	r3, r1
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	3301      	adds	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	791b      	ldrb	r3, [r3, #4]
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	429a      	cmp	r2, r3
 8003808:	d3bb      	bcc.n	8003782 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
 800380e:	e044      	b.n	800389a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003838:	7bfa      	ldrb	r2, [r7, #15]
 800383a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	3301      	adds	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	791b      	ldrb	r3, [r3, #4]
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d3b5      	bcc.n	8003810 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80038b0:	f003 fd5e 	bl	8007370 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7a9b      	ldrb	r3, [r3, #10]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f001 fc40 	bl	8005150 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_PCD_Start+0x16>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e012      	b.n	8003916 <HAL_PCD_Start+0x3c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f003 fd05 	bl	800730c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f005 ffc5 	bl	8009896 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f005 ffca 	bl	80098c4 <USB_ReadInterrupts>
 8003930:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fb04 	bl	8003f4a <PCD_EP_ISR_Handler>

    return;
 8003942:	e110      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003960:	b292      	uxth	r2, r2
 8003962:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f008 fa9f 	bl	800beaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800396c:	2100      	movs	r1, #0
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8fc 	bl	8003b6c <HAL_PCD_SetAddress>

    return;
 8003974:	e0f7      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003992:	b292      	uxth	r2, r2
 8003994:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003998:	e0e5      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039b6:	b292      	uxth	r2, r2
 80039b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039bc:	e0d3      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d034      	beq.n	8003a32 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	b292      	uxth	r2, r2
 80039dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0208 	bic.w	r2, r2, #8
 80039f2:	b292      	uxth	r2, r2
 80039f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f008 fc41 	bl	800c294 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f008 fa82 	bl	800bf1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a2a:	b292      	uxth	r2, r2
 8003a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003a30:	e099      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d027      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0208 	orr.w	r2, r2, #8
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a66:	b292      	uxth	r2, r2
 8003a68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0204 	orr.w	r2, r2, #4
 8003a7e:	b292      	uxth	r2, r2
 8003a80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f008 fa2f 	bl	800bee8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a8a:	e06c      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d040      	beq.n	8003b18 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aa8:	b292      	uxth	r2, r2
 8003aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d12b      	bne.n	8003b10 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0204 	orr.w	r2, r2, #4
 8003aca:	b292      	uxth	r2, r2
 8003acc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0208 	orr.w	r2, r2, #8
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b06:	2101      	movs	r1, #1
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f008 fbc3 	bl	800c294 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003b0e:	e02a      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f008 f9e9 	bl	800bee8 <HAL_PCD_SuspendCallback>
    return;
 8003b16:	e026      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00f      	beq.n	8003b42 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b34:	b292      	uxth	r2, r2
 8003b36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f008 f9a7 	bl	800be8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b40:	e011      	b.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00c      	beq.n	8003b66 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003b64:	bf00      	nop
  }
}
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_PCD_SetAddress+0x1a>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e012      	b.n	8003bac <HAL_PCD_SetAddress+0x40>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f005 fe66 	bl	800986e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	70fb      	strb	r3, [r7, #3]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	803b      	strh	r3, [r7, #0]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da0e      	bge.n	8003bf8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 0207 	and.w	r2, r3, #7
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	3310      	adds	r3, #16
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	705a      	strb	r2, [r3, #1]
 8003bf6:	e00e      	b.n	8003c16 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 0207 	and.w	r2, r3, #7
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c22:	883a      	ldrh	r2, [r7, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	78ba      	ldrb	r2, [r7, #2]
 8003c2c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c2e:	78bb      	ldrb	r3, [r7, #2]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d102      	bne.n	8003c3a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_PCD_EP_Open+0x94>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e00e      	b.n	8003c66 <HAL_PCD_EP_Open+0xb2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68f9      	ldr	r1, [r7, #12]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f003 fba8 	bl	80073ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003c64:	7afb      	ldrb	r3, [r7, #11]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	da0e      	bge.n	8003ca0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 0207 	and.w	r2, r3, #7
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	3310      	adds	r3, #16
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	705a      	strb	r2, [r3, #1]
 8003c9e:	e00e      	b.n	8003cbe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 0207 	and.w	r2, r3, #7
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_PCD_EP_Close+0x6a>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e00e      	b.n	8003cf6 <HAL_PCD_EP_Close+0x88>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f003 ff24 	bl	8007b34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d0e:	7afb      	ldrb	r3, [r7, #11]
 8003d10:	f003 0207 	and.w	r2, r3, #7
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d3e:	7afb      	ldrb	r3, [r7, #11]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6979      	ldr	r1, [r7, #20]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f004 f8dc 	bl	8007f0e <USB_EPStartXfer>

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	f003 0207 	and.w	r2, r3, #7
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	440b      	add	r3, r1
 8003d7e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	3310      	adds	r3, #16
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ddc:	7afb      	ldrb	r3, [r7, #11]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6979      	ldr	r1, [r7, #20]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f004 f88d 	bl	8007f0e <USB_EPStartXfer>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	7912      	ldrb	r2, [r2, #4]
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e03e      	b.n	8003e9a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da0e      	bge.n	8003e42 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 0207 	and.w	r2, r3, #7
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	3310      	adds	r3, #16
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	705a      	strb	r2, [r3, #1]
 8003e40:	e00c      	b.n	8003e5c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_PCD_EP_SetStall+0x7e>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e00e      	b.n	8003e9a <HAL_PCD_EP_SetStall+0x9c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f005 fbf0 	bl	8009670 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	7912      	ldrb	r2, [r2, #4]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e040      	b.n	8003f42 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da0e      	bge.n	8003ee6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 0207 	and.w	r2, r3, #7
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	3310      	adds	r3, #16
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	705a      	strb	r2, [r3, #1]
 8003ee4:	e00e      	b.n	8003f04 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	f003 0207 	and.w	r2, r3, #7
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_PCD_EP_ClrStall+0x82>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e00e      	b.n	8003f42 <HAL_PCD_EP_ClrStall+0xa0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68f9      	ldr	r1, [r7, #12]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f005 fbed 	bl	8009712 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b096      	sub	sp, #88	@ 0x58
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f52:	e3ad      	b.n	80046b0 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f5c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003f6e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 816f 	bne.w	8004256 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d14c      	bne.n	800401e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f94:	81fb      	strh	r3, [r7, #14]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	89fb      	ldrh	r3, [r7, #14]
 8003f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3310      	adds	r3, #16
 8003fac:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	441a      	add	r2, r3
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f007 ff37 	bl	800be5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	7b1b      	ldrb	r3, [r3, #12]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 835c 	beq.w	80046b0 <PCD_EP_ISR_Handler+0x766>
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 8357 	bne.w	80046b0 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7b1b      	ldrb	r3, [r3, #12]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800400c:	b2da      	uxtb	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	731a      	strb	r2, [r3, #12]
 800401c:	e348      	b.n	80046b0 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004024:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004030:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004038:	2b00      	cmp	r3, #0
 800403a:	d032      	beq.n	80040a2 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004044:	b29b      	uxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	4413      	add	r3, r2
 8004056:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004062:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800406e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004070:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004074:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004076:	b29b      	uxth	r3, r3
 8004078:	f005 fc76 	bl	8009968 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29a      	uxth	r2, r3
 8004084:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004088:	4013      	ands	r3, r2
 800408a:	823b      	strh	r3, [r7, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	8a3a      	ldrh	r2, [r7, #16]
 8004092:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004096:	b292      	uxth	r2, r2
 8004098:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f007 feb0 	bl	800be00 <HAL_PCD_SetupStageCallback>
 80040a0:	e306      	b.n	80046b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f280 8302 	bge.w	80046b0 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80040b8:	4013      	ands	r3, r2
 80040ba:	83fb      	strh	r3, [r7, #30]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	8bfa      	ldrh	r2, [r7, #30]
 80040c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040c6:	b292      	uxth	r2, r2
 80040c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d019      	beq.n	800412e <PCD_EP_ISR_Handler+0x1e4>
 80040fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	6959      	ldr	r1, [r3, #20]
 800410a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800410e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004110:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004112:	b29b      	uxth	r3, r3
 8004114:	f005 fc28 	bl	8009968 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	441a      	add	r2, r3
 8004122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004124:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004126:	2100      	movs	r1, #0
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f007 fe7b 	bl	800be24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004138:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800413c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 82b5 	bne.w	80046b0 <PCD_EP_ISR_Handler+0x766>
 8004146:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800414a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800414e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004152:	f000 82ad 	beq.w	80046b0 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	4413      	add	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004180:	b29a      	uxth	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b3e      	cmp	r3, #62	@ 0x3e
 800418c:	d91d      	bls.n	80041ca <PCD_EP_ISR_Handler+0x280>
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <PCD_EP_ISR_Handler+0x25e>
 80041a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a4:	3b01      	subs	r3, #1
 80041a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	e026      	b.n	8004218 <PCD_EP_ISR_Handler+0x2ce>
 80041ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <PCD_EP_ISR_Handler+0x29e>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	e017      	b.n	8004218 <PCD_EP_ISR_Handler+0x2ce>
 80041e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <PCD_EP_ISR_Handler+0x2b8>
 80041fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041fe:	3301      	adds	r3, #1
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29a      	uxth	r2, r3
 8004208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800420a:	b29b      	uxth	r3, r3
 800420c:	029b      	lsls	r3, r3, #10
 800420e:	b29b      	uxth	r3, r3
 8004210:	4313      	orrs	r3, r2
 8004212:	b29a      	uxth	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004228:	827b      	strh	r3, [r7, #18]
 800422a:	8a7b      	ldrh	r3, [r7, #18]
 800422c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004230:	827b      	strh	r3, [r7, #18]
 8004232:	8a7b      	ldrh	r3, [r7, #18]
 8004234:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004238:	827b      	strh	r3, [r7, #18]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	8a7b      	ldrh	r3, [r7, #18]
 8004240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800424c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
 8004254:	e22c      	b.n	80046b0 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800426a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800426e:	2b00      	cmp	r3, #0
 8004270:	f280 80f6 	bge.w	8004460 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29a      	uxth	r2, r3
 8004286:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800428a:	4013      	ands	r3, r2
 800428c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80042a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042a6:	b292      	uxth	r2, r2
 80042a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80042aa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c2:	7b1b      	ldrb	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d123      	bne.n	8004310 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80042f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 808e 	beq.w	8004416 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004300:	6959      	ldr	r1, [r3, #20]
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	88da      	ldrh	r2, [r3, #6]
 8004306:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800430a:	f005 fb2d 	bl	8009968 <USB_ReadPMA>
 800430e:	e082      	b.n	8004416 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004312:	78db      	ldrb	r3, [r3, #3]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d10a      	bne.n	800432e <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004318:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800431c:	461a      	mov	r2, r3
 800431e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f9d3 	bl	80046cc <HAL_PCD_EP_DB_Receive>
 8004326:	4603      	mov	r3, r0
 8004328:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800432c:	e073      	b.n	8004416 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004348:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800435e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800436a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d022      	beq.n	80043d2 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004394:	b29b      	uxth	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80043b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02c      	beq.n	8004416 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c2:	6959      	ldr	r1, [r3, #20]
 80043c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c6:	891a      	ldrh	r2, [r3, #8]
 80043c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043cc:	f005 facc 	bl	8009968 <USB_ReadPMA>
 80043d0:	e021      	b.n	8004416 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	4413      	add	r3, r2
 80043ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80043fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004408:	6959      	ldr	r1, [r3, #20]
 800440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440c:	895a      	ldrh	r2, [r3, #10]
 800440e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004412:	f005 faa9 	bl	8009968 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800441e:	441a      	add	r2, r3
 8004420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004422:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800442c:	441a      	add	r2, r3
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <PCD_EP_ISR_Handler+0x4fc>
 800443a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	429a      	cmp	r2, r3
 8004444:	d206      	bcs.n	8004454 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f007 fce9 	bl	800be24 <HAL_PCD_DataOutStageCallback>
 8004452:	e005      	b.n	8004460 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800445a:	4618      	mov	r0, r3
 800445c:	f003 fd57 	bl	8007f0e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8121 	beq.w	80046b0 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800446e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	3310      	adds	r3, #16
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4413      	add	r3, r2
 8004480:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80044b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80044be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c0:	78db      	ldrb	r3, [r3, #3]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f040 80a2 	bne.w	800460c <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80044c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ca:	2200      	movs	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80044ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d0:	7b1b      	ldrb	r3, [r3, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8093 	beq.w	80045fe <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d046      	beq.n	8004572 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d126      	bne.n	800453a <PCD_EP_ISR_Handler+0x5f0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	4413      	add	r3, r2
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
 8004504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	00da      	lsls	r2, r3, #3
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	4413      	add	r3, r2
 800450e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800451e:	b29a      	uxth	r2, r3
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004532:	b29a      	uxth	r2, r3
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	e061      	b.n	80045fe <PCD_EP_ISR_Handler+0x6b4>
 800453a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d15d      	bne.n	80045fe <PCD_EP_ISR_Handler+0x6b4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004550:	b29b      	uxth	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004556:	4413      	add	r3, r2
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	00da      	lsls	r2, r3, #3
 8004560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004562:	4413      	add	r3, r2
 8004564:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800456a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456c:	2200      	movs	r2, #0
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	e045      	b.n	80045fe <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d126      	bne.n	80045ce <PCD_EP_ISR_Handler+0x684>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	637b      	str	r3, [r7, #52]	@ 0x34
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800458e:	b29b      	uxth	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004594:	4413      	add	r3, r2
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
 8004598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	00da      	lsls	r2, r3, #3
 800459e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a0:	4413      	add	r3, r2
 80045a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	e017      	b.n	80045fe <PCD_EP_ISR_Handler+0x6b4>
 80045ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d113      	bne.n	80045fe <PCD_EP_ISR_Handler+0x6b4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e4:	4413      	add	r3, r2
 80045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	00da      	lsls	r2, r3, #3
 80045ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f0:	4413      	add	r3, r2
 80045f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fa:	2200      	movs	r2, #0
 80045fc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f007 fc28 	bl	800be5a <HAL_PCD_DataInStageCallback>
 800460a:	e051      	b.n	80046b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800460c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d144      	bne.n	80046a2 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004620:	b29b      	uxth	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	4413      	add	r3, r2
 8004632:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004642:	699a      	ldr	r2, [r3, #24]
 8004644:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004648:	429a      	cmp	r2, r3
 800464a:	d907      	bls.n	800465c <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800464c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004654:	1ad2      	subs	r2, r2, r3
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	619a      	str	r2, [r3, #24]
 800465a:	e002      	b.n	8004662 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800465c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800466a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f007 fbf2 	bl	800be5a <HAL_PCD_DataInStageCallback>
 8004676:	e01b      	b.n	80046b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004680:	441a      	add	r2, r3
 8004682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004684:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800468e:	441a      	add	r2, r3
 8004690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004692:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800469a:	4618      	mov	r0, r3
 800469c:	f003 fc37 	bl	8007f0e <USB_EPStartXfer>
 80046a0:	e006      	b.n	80046b0 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046a6:	461a      	mov	r2, r3
 80046a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f917 	bl	80048de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b21b      	sxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f6ff ac49 	blt.w	8003f54 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3758      	adds	r7, #88	@ 0x58
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d07c      	beq.n	80047de <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	4413      	add	r3, r2
 80046fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004708:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	8b7b      	ldrh	r3, [r7, #26]
 8004710:	429a      	cmp	r2, r3
 8004712:	d306      	bcc.n	8004722 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	8b7b      	ldrh	r3, [r7, #26]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	619a      	str	r2, [r3, #24]
 8004720:	e002      	b.n	8004728 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d123      	bne.n	8004778 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474a:	833b      	strh	r3, [r7, #24]
 800474c:	8b3b      	ldrh	r3, [r7, #24]
 800474e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004752:	833b      	strh	r3, [r7, #24]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	8b3b      	ldrh	r3, [r7, #24]
 8004764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800476c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004774:	b29b      	uxth	r3, r3
 8004776:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01f      	beq.n	80047c2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479c:	82fb      	strh	r3, [r7, #22]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	8afb      	ldrh	r3, [r7, #22]
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047c2:	8b7b      	ldrh	r3, [r7, #26]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8085 	beq.w	80048d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6959      	ldr	r1, [r3, #20]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	891a      	ldrh	r2, [r3, #8]
 80047d6:	8b7b      	ldrh	r3, [r7, #26]
 80047d8:	f005 f8c6 	bl	8009968 <USB_ReadPMA>
 80047dc:	e07a      	b.n	80048d4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4413      	add	r3, r2
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004802:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	8b7b      	ldrh	r3, [r7, #26]
 800480a:	429a      	cmp	r2, r3
 800480c:	d306      	bcc.n	800481c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	8b7b      	ldrh	r3, [r7, #26]
 8004814:	1ad2      	subs	r2, r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	619a      	str	r2, [r3, #24]
 800481a:	e002      	b.n	8004822 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d123      	bne.n	8004872 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004844:	83fb      	strh	r3, [r7, #30]
 8004846:	8bfb      	ldrh	r3, [r7, #30]
 8004848:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800484c:	83fb      	strh	r3, [r7, #30]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	441a      	add	r2, r3
 800485c:	8bfb      	ldrh	r3, [r7, #30]
 800485e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800486a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486e:	b29b      	uxth	r3, r3
 8004870:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11f      	bne.n	80048bc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004896:	83bb      	strh	r3, [r7, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	8bbb      	ldrh	r3, [r7, #28]
 80048a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048bc:	8b7b      	ldrh	r3, [r7, #26]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	6959      	ldr	r1, [r3, #20]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	895a      	ldrh	r2, [r3, #10]
 80048ce:	8b7b      	ldrh	r3, [r7, #26]
 80048d0:	f005 f84a 	bl	8009968 <USB_ReadPMA>
    }
  }

  return count;
 80048d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b0a4      	sub	sp, #144	@ 0x90
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 81db 	beq.w	8004cae <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004900:	b29b      	uxth	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	4413      	add	r3, r2
 8004912:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	699a      	ldr	r2, [r3, #24]
 8004924:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004928:	429a      	cmp	r2, r3
 800492a:	d907      	bls.n	800493c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004934:	1ad2      	subs	r2, r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	619a      	str	r2, [r3, #24]
 800493a:	e002      	b.n	8004942 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2200      	movs	r2, #0
 8004940:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 80b9 	bne.w	8004abe <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d126      	bne.n	80049a2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004962:	b29b      	uxth	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004968:	4413      	add	r3, r2
 800496a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	00da      	lsls	r2, r3, #3
 8004972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004974:	4413      	add	r3, r2
 8004976:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800497a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004986:	b29a      	uxth	r2, r3
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	801a      	strh	r2, [r3, #0]
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499a:	b29a      	uxth	r2, r3
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	e01a      	b.n	80049d8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d116      	bne.n	80049d8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	4413      	add	r3, r2
 80049c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	00da      	lsls	r2, r3, #3
 80049c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ca:	4413      	add	r3, r2
 80049cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	2200      	movs	r2, #0
 80049d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	785b      	ldrb	r3, [r3, #1]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d126      	bne.n	8004a34 <HAL_PCD_EP_DB_Transmit+0x156>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	00da      	lsls	r2, r3, #3
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	e017      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x186>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d113      	bne.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x186>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	4413      	add	r3, r2
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	00da      	lsls	r2, r3, #3
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	4413      	add	r3, r2
 8004a58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	2200      	movs	r2, #0
 8004a62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f007 f9f5 	bl	800be5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 82fa 	beq.w	8005070 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a96:	82fb      	strh	r3, [r7, #22]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	8afb      	ldrh	r3, [r7, #22]
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]
 8004abc:	e2d8      	b.n	8005070 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d021      	beq.n	8004b0c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f040 82ac 	bne.w	8005070 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b20:	441a      	add	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b2e:	441a      	add	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d30b      	bcc.n	8004b58 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	621a      	str	r2, [r3, #32]
 8004b56:	e017      	b.n	8004b88 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d108      	bne.n	8004b72 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004b60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b70:	e00a      	b.n	8004b88 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d165      	bne.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x37e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba4:	4413      	add	r3, r2
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	00da      	lsls	r2, r3, #3
 8004bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bcc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bce:	d91d      	bls.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x32e>
 8004bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_PCD_EP_DB_Transmit+0x30c>
 8004be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004be6:	3b01      	subs	r3, #1
 8004be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e044      	b.n	8004c96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x34c>
 8004c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e035      	b.n	8004c96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_PCD_EP_DB_Transmit+0x366>
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c40:	3301      	adds	r3, #1
 8004c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	029b      	lsls	r3, r3, #10
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	e01c      	b.n	8004c96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d118      	bne.n	8004c96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c78:	4413      	add	r3, r2
 8004c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	00da      	lsls	r2, r3, #3
 8004c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c84:	4413      	add	r3, r2
 8004c86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c94:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6959      	ldr	r1, [r3, #20]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	891a      	ldrh	r2, [r3, #8]
 8004ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f004 fe1c 	bl	80098e4 <USB_WritePMA>
 8004cac:	e1e0      	b.n	8005070 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d307      	bcc.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	619a      	str	r2, [r3, #24]
 8004cf0:	e002      	b.n	8004cf8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 80c0 	bne.w	8004e82 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d126      	bne.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d1e:	4413      	add	r3, r2
 8004d20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	00da      	lsls	r2, r3, #3
 8004d28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d54:	801a      	strh	r2, [r3, #0]
 8004d56:	e01a      	b.n	8004d8e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d116      	bne.n	8004d8e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d74:	4413      	add	r3, r2
 8004d76:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	00da      	lsls	r2, r3, #3
 8004d7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d80:	4413      	add	r3, r2
 8004d82:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d86:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d12b      	bne.n	8004df4 <HAL_PCD_EP_DB_Transmit+0x516>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004db0:	4413      	add	r3, r2
 8004db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	00da      	lsls	r2, r3, #3
 8004dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	e017      	b.n	8004e24 <HAL_PCD_EP_DB_Transmit+0x546>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d113      	bne.n	8004e24 <HAL_PCD_EP_DB_Transmit+0x546>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e0a:	4413      	add	r3, r2
 8004e0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	00da      	lsls	r2, r3, #3
 8004e14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e16:	4413      	add	r3, r2
 8004e18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e20:	2200      	movs	r2, #0
 8004e22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f007 f815 	bl	800be5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 811a 	bne.w	8005070 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e56:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]
 8004e80:	e0f6      	b.n	8005070 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d121      	bne.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	f040 80ca 	bne.w	8005070 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ef2:	441a      	add	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d30b      	bcc.n	8004f1c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	621a      	str	r2, [r3, #32]
 8004f1a:	e017      	b.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d108      	bne.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004f34:	e00a      	b.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2200      	movs	r2, #0
 8004f42:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d165      	bne.n	8005026 <HAL_PCD_EP_DB_Transmit+0x748>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f6e:	4413      	add	r3, r2
 8004f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	00da      	lsls	r2, r3, #3
 8004f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f96:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f98:	d91d      	bls.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	029b      	lsls	r3, r3, #10
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e041      	b.n	800505a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_PCD_EP_DB_Transmit+0x716>
 8004fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	e032      	b.n	800505a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_PCD_EP_DB_Transmit+0x730>
 8005008:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800500a:	3301      	adds	r3, #1
 800500c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800500e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29a      	uxth	r2, r3
 8005014:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005016:	b29b      	uxth	r3, r3
 8005018:	029b      	lsls	r3, r3, #10
 800501a:	b29b      	uxth	r3, r3
 800501c:	4313      	orrs	r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e019      	b.n	800505a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d115      	bne.n	800505a <HAL_PCD_EP_DB_Transmit+0x77c>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503c:	4413      	add	r3, r2
 800503e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	00da      	lsls	r2, r3, #3
 8005046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005048:	4413      	add	r3, r2
 800504a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800504e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005054:	b29a      	uxth	r2, r3
 8005056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005058:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6959      	ldr	r1, [r3, #20]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	895a      	ldrh	r2, [r3, #10]
 8005066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800506a:	b29b      	uxth	r3, r3
 800506c:	f004 fc3a 	bl	80098e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800508a:	82bb      	strh	r3, [r7, #20]
 800508c:	8abb      	ldrh	r3, [r7, #20]
 800508e:	f083 0310 	eor.w	r3, r3, #16
 8005092:	82bb      	strh	r3, [r7, #20]
 8005094:	8abb      	ldrh	r3, [r7, #20]
 8005096:	f083 0320 	eor.w	r3, r3, #32
 800509a:	82bb      	strh	r3, [r7, #20]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	8abb      	ldrh	r3, [r7, #20]
 80050ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050bc:	b29b      	uxth	r3, r3
 80050be:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3790      	adds	r7, #144	@ 0x90
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b087      	sub	sp, #28
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	607b      	str	r3, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	817b      	strh	r3, [r7, #10]
 80050d8:	4613      	mov	r3, r2
 80050da:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80050dc:	897b      	ldrh	r3, [r7, #10]
 80050de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050e8:	897b      	ldrh	r3, [r7, #10]
 80050ea:	f003 0207 	and.w	r2, r3, #7
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	3310      	adds	r3, #16
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e009      	b.n	8005114 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005100:	897a      	ldrh	r2, [r7, #10]
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005114:	893b      	ldrh	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	b29a      	uxth	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	80da      	strh	r2, [r3, #6]
 8005128:	e00b      	b.n	8005142 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2201      	movs	r2, #1
 800512e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	b29a      	uxth	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	0c1b      	lsrs	r3, r3, #16
 800513c:	b29a      	uxth	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005174:	b29b      	uxth	r3, r3
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005188:	b29b      	uxth	r3, r3
 800518a:	f043 0302 	orr.w	r3, r3, #2
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a04      	ldr	r2, [pc, #16]	@ (80051c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051b2:	6013      	str	r3, [r2, #0]
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	58000400 	.word	0x58000400

080051c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80051c8:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <HAL_PWREx_GetVoltageRange+0x18>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	58000400 	.word	0x58000400

080051e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80051e4:	4b05      	ldr	r3, [pc, #20]	@ (80051fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a04      	ldr	r2, [pc, #16]	@ (80051fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80051ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051ee:	6053      	str	r3, [r2, #4]
}
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	58000400 	.word	0x58000400

08005200 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800520e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005212:	d101      	bne.n	8005218 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005236:	6013      	str	r3, [r2, #0]
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005254:	6013      	str	r3, [r2, #0]
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005272:	d101      	bne.n	8005278 <LL_RCC_HSE_IsReady+0x18>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <LL_RCC_HSE_IsReady+0x1a>
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005296:	6013      	str	r3, [r2, #0]
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80052a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052b4:	6013      	str	r3, [r2, #0]
}
 80052b6:	bf00      	nop
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80052c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d2:	d101      	bne.n	80052d8 <LL_RCC_HSI_IsReady+0x18>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <LL_RCC_HSI_IsReady+0x1a>
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	061b      	lsls	r3, r3, #24
 80052fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800530e:	b480      	push	{r7}
 8005310:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005316:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800531a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005338:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800533c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d101      	bne.n	800536a <LL_RCC_HSI48_IsReady+0x18>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <LL_RCC_HSI48_IsReady+0x1a>
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8005376:	b480      	push	{r7}
 8005378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800538e:	bf00      	nop
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800539c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80053b0:	bf00      	nop
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80053ba:	b480      	push	{r7}
 80053bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053ca:	f043 0304 	orr.w	r3, r3, #4
 80053ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80053d2:	bf00      	nop
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80053fe:	b480      	push	{r7}
 8005400:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b02      	cmp	r3, #2
 8005410:	d101      	bne.n	8005416 <LL_RCC_LSE_IsReady+0x18>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <LL_RCC_LSE_IsReady+0x1a>
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800542e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800543a:	bf00      	nop
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005450:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800545c:	bf00      	nop
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8005466:	b480      	push	{r7}
 8005468:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800546a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800546e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b02      	cmp	r3, #2
 8005478:	d101      	bne.n	800547e <LL_RCC_LSI1_IsReady+0x18>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <LL_RCC_LSI1_IsReady+0x1a>
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800548a:	b480      	push	{r7}
 800548c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800548e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005496:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800549a:	f043 0304 	orr.w	r3, r3, #4
 800549e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80054a2:	bf00      	nop
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054bc:	f023 0304 	bic.w	r3, r3, #4
 80054c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80054ce:	b480      	push	{r7}
 80054d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80054d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d101      	bne.n	80054e6 <LL_RCC_LSI2_IsReady+0x18>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <LL_RCC_LSI2_IsReady+0x1a>
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005502:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	6013      	str	r3, [r2, #0]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800553e:	b480      	push	{r7}
 8005540:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b02      	cmp	r3, #2
 800556c:	d101      	bne.n	8005572 <LL_RCC_MSI_IsReady+0x16>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <LL_RCC_MSI_IsReady+0x18>
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055b6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2bb0      	cmp	r3, #176	@ 0xb0
 80055bc:	d901      	bls.n	80055c2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80055be:	23b0      	movs	r3, #176	@ 0xb0
 80055c0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80055c2:	687b      	ldr	r3, [r7, #4]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80055d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055ea:	4313      	orrs	r3, r2
 80055ec:	604b      	str	r3, [r1, #4]
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 0203 	bic.w	r2, r3, #3
 800560c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 030c 	and.w	r3, r3, #12
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800564c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800566e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005672:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005676:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800569a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800569e:	f023 020f 	bic.w	r2, r3, #15
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	608b      	str	r3, [r1, #8]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	608b      	str	r3, [r1, #8]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800571a:	4618      	mov	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800572c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005736:	4618      	mov	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800574e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005752:	6013      	str	r3, [r2, #0]
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800575e:	b480      	push	{r7}
 8005760:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800576c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005770:	6013      	str	r3, [r2, #0]
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800578e:	d101      	bne.n	8005794 <LL_RCC_PLL_IsReady+0x18>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <LL_RCC_PLL_IsReady+0x1a>
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	0a1b      	lsrs	r3, r3, #8
 80057ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80057d2:	b480      	push	{r7}
 80057d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80057ea:	b480      	push	{r7}
 80057ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80057ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0303 	and.w	r3, r3, #3
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005802:	b480      	push	{r7}
 8005804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005814:	d101      	bne.n	800581a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800582a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800582e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800583a:	d101      	bne.n	8005840 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005854:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005860:	d101      	bne.n	8005866 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005872:	b480      	push	{r7}
 8005874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005884:	d101      	bne.n	800588a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005896:	b480      	push	{r7}
 8005898:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800589a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058a8:	d101      	bne.n	80058ae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b08d      	sub	sp, #52	@ 0x34
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e363      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 808d 	beq.w	80059f6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058dc:	f7ff fea1 	bl	8005622 <LL_RCC_GetSysClkSource>
 80058e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058e2:	f7ff ff82 	bl	80057ea <LL_RCC_PLL_GetMainSource>
 80058e6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_RCC_OscConfig+0x3e>
 80058ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d147      	bne.n	8005984 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d144      	bne.n	8005984 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e347      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800590a:	f7ff fe4c 	bl	80055a6 <LL_RCC_MSI_GetRange>
 800590e:	4603      	mov	r3, r0
 8005910:	429c      	cmp	r4, r3
 8005912:	d914      	bls.n	800593e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fd03 	bl	8006324 <RCC_SetFlashLatencyFromMSIRange>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e336      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fe26 	bl	800557e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fe4a 	bl	80055d0 <LL_RCC_MSI_SetCalibTrimming>
 800593c:	e013      	b.n	8005966 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff fe1b 	bl	800557e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fe3f 	bl	80055d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fce4 	bl	8006324 <RCC_SetFlashLatencyFromMSIRange>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e317      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005966:	f000 fcc9 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 800596a:	4603      	mov	r3, r0
 800596c:	4aa4      	ldr	r2, [pc, #656]	@ (8005c00 <HAL_RCC_OscConfig+0x344>)
 800596e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005970:	4ba4      	ldr	r3, [pc, #656]	@ (8005c04 <HAL_RCC_OscConfig+0x348>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f7fc fdc1 	bl	80024fc <HAL_InitTick>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d039      	beq.n	80059f4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e308      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01e      	beq.n	80059ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800598c:	f7ff fdc8 	bl	8005520 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005990:	f7fc fe02 	bl	8002598 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005998:	f7fc fdfe 	bl	8002598 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e2f5      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80059aa:	f7ff fdd7 	bl	800555c <LL_RCC_MSI_IsReady>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f1      	beq.n	8005998 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fde0 	bl	800557e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff fe04 	bl	80055d0 <LL_RCC_MSI_SetCalibTrimming>
 80059c8:	e015      	b.n	80059f6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059ca:	f7ff fdb8 	bl	800553e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059ce:	f7fc fde3 	bl	8002598 <HAL_GetTick>
 80059d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059d6:	f7fc fddf 	bl	8002598 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e2d6      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80059e8:	f7ff fdb8 	bl	800555c <LL_RCC_MSI_IsReady>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f1      	bne.n	80059d6 <HAL_RCC_OscConfig+0x11a>
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80059f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d047      	beq.n	8005a92 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a02:	f7ff fe0e 	bl	8005622 <LL_RCC_GetSysClkSource>
 8005a06:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a08:	f7ff feef 	bl	80057ea <LL_RCC_PLL_GetMainSource>
 8005a0c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_OscConfig+0x164>
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d108      	bne.n	8005a2c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d105      	bne.n	8005a2c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d134      	bne.n	8005a92 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e2b4      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a34:	d102      	bne.n	8005a3c <HAL_RCC_OscConfig+0x180>
 8005a36:	f7ff fbf5 	bl	8005224 <LL_RCC_HSE_Enable>
 8005a3a:	e001      	b.n	8005a40 <HAL_RCC_OscConfig+0x184>
 8005a3c:	f7ff fc01 	bl	8005242 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d012      	beq.n	8005a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a48:	f7fc fda6 	bl	8002598 <HAL_GetTick>
 8005a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a50:	f7fc fda2 	bl	8002598 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b64      	cmp	r3, #100	@ 0x64
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e299      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005a62:	f7ff fbfd 	bl	8005260 <LL_RCC_HSE_IsReady>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f1      	beq.n	8005a50 <HAL_RCC_OscConfig+0x194>
 8005a6c:	e011      	b.n	8005a92 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fc fd93 	bl	8002598 <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a76:	f7fc fd8f 	bl	8002598 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b64      	cmp	r3, #100	@ 0x64
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e286      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005a88:	f7ff fbea 	bl	8005260 <LL_RCC_HSE_IsReady>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f1      	bne.n	8005a76 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d04c      	beq.n	8005b38 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9e:	f7ff fdc0 	bl	8005622 <LL_RCC_GetSysClkSource>
 8005aa2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa4:	f7ff fea1 	bl	80057ea <LL_RCC_PLL_GetMainSource>
 8005aa8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d005      	beq.n	8005abc <HAL_RCC_OscConfig+0x200>
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d10e      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d10b      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e266      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fc09 	bl	80052e4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ad2:	e031      	b.n	8005b38 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d019      	beq.n	8005b10 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005adc:	f7ff fbd2 	bl	8005284 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fc fd5a 	bl	8002598 <HAL_GetTick>
 8005ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae8:	f7fc fd56 	bl	8002598 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e24d      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005afa:	f7ff fbe1 	bl	80052c0 <LL_RCC_HSI_IsReady>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f1      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff fbeb 	bl	80052e4 <LL_RCC_HSI_SetCalibTrimming>
 8005b0e:	e013      	b.n	8005b38 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b10:	f7ff fbc7 	bl	80052a2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fc fd40 	bl	8002598 <HAL_GetTick>
 8005b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1c:	f7fc fd3c 	bl	8002598 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e233      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b2e:	f7ff fbc7 	bl	80052c0 <LL_RCC_HSI_IsReady>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f1      	bne.n	8005b1c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80a3 	beq.w	8005c98 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d076      	beq.n	8005c48 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d046      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005b66:	f7ff fc7e 	bl	8005466 <LL_RCC_LSI1_IsReady>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d113      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005b70:	f7ff fc57 	bl	8005422 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b74:	f7fc fd10 	bl	8002598 <HAL_GetTick>
 8005b78:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b7c:	f7fc fd0c 	bl	8002598 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e203      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005b8e:	f7ff fc6a 	bl	8005466 <LL_RCC_LSI1_IsReady>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f1      	beq.n	8005b7c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005b98:	f7ff fc77 	bl	800548a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9c:	f7fc fcfc 	bl	8002598 <HAL_GetTick>
 8005ba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005ba4:	f7fc fcf8 	bl	8002598 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e1ef      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005bb6:	f7ff fc8a 	bl	80054ce <LL_RCC_LSI2_IsReady>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f1      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fc94 	bl	80054f2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005bca:	f7ff fc3b 	bl	8005444 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bce:	f7fc fce3 	bl	8002598 <HAL_GetTick>
 8005bd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005bd6:	f7fc fcdf 	bl	8002598 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1d6      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005be8:	f7ff fc3d 	bl	8005466 <LL_RCC_LSI1_IsReady>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f1      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x31a>
 8005bf2:	e051      	b.n	8005c98 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005bf4:	f7ff fc15 	bl	8005422 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fc fcce 	bl	8002598 <HAL_GetTick>
 8005bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005bfe:	e00c      	b.n	8005c1a <HAL_RCC_OscConfig+0x35e>
 8005c00:	20000008 	.word	0x20000008
 8005c04:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005c08:	f7fc fcc6 	bl	8002598 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e1bd      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005c1a:	f7ff fc24 	bl	8005466 <LL_RCC_LSI1_IsReady>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f1      	beq.n	8005c08 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005c24:	f7ff fc42 	bl	80054ac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005c2a:	f7fc fcb5 	bl	8002598 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e1ac      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005c3c:	f7ff fc47 	bl	80054ce <LL_RCC_LSI2_IsReady>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f1      	bne.n	8005c2a <HAL_RCC_OscConfig+0x36e>
 8005c46:	e027      	b.n	8005c98 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005c48:	f7ff fc30 	bl	80054ac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4c:	f7fc fca4 	bl	8002598 <HAL_GetTick>
 8005c50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005c54:	f7fc fca0 	bl	8002598 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e197      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005c66:	f7ff fc32 	bl	80054ce <LL_RCC_LSI2_IsReady>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f1      	bne.n	8005c54 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005c70:	f7ff fbe8 	bl	8005444 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c74:	f7fc fc90 	bl	8002598 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005c7c:	f7fc fc8c 	bl	8002598 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e183      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005c8e:	f7ff fbea 	bl	8005466 <LL_RCC_LSI1_IsReady>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f1      	bne.n	8005c7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d05b      	beq.n	8005d5c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ca4:	4ba7      	ldr	r3, [pc, #668]	@ (8005f44 <HAL_RCC_OscConfig+0x688>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d114      	bne.n	8005cda <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005cb0:	f7ff fa78 	bl	80051a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb4:	f7fc fc70 	bl	8002598 <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cbc:	f7fc fc6c 	bl	8002598 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e163      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cce:	4b9d      	ldr	r3, [pc, #628]	@ (8005f44 <HAL_RCC_OscConfig+0x688>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d102      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x42c>
 8005ce2:	f7ff fb48 	bl	8005376 <LL_RCC_LSE_Enable>
 8005ce6:	e00c      	b.n	8005d02 <HAL_RCC_OscConfig+0x446>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	d104      	bne.n	8005cfa <HAL_RCC_OscConfig+0x43e>
 8005cf0:	f7ff fb63 	bl	80053ba <LL_RCC_LSE_EnableBypass>
 8005cf4:	f7ff fb3f 	bl	8005376 <LL_RCC_LSE_Enable>
 8005cf8:	e003      	b.n	8005d02 <HAL_RCC_OscConfig+0x446>
 8005cfa:	f7ff fb4d 	bl	8005398 <LL_RCC_LSE_Disable>
 8005cfe:	f7ff fb6d 	bl	80053dc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d014      	beq.n	8005d34 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0a:	f7fc fc45 	bl	8002598 <HAL_GetTick>
 8005d0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d10:	e00a      	b.n	8005d28 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d12:	f7fc fc41 	bl	8002598 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e136      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d28:	f7ff fb69 	bl	80053fe <LL_RCC_LSE_IsReady>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0ef      	beq.n	8005d12 <HAL_RCC_OscConfig+0x456>
 8005d32:	e013      	b.n	8005d5c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fc fc30 	bl	8002598 <HAL_GetTick>
 8005d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3c:	f7fc fc2c 	bl	8002598 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e121      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005d52:	f7ff fb54 	bl	80053fe <LL_RCC_LSE_IsReady>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1ef      	bne.n	8005d3c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02c      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d014      	beq.n	8005d9a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d70:	f7ff facd 	bl	800530e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fc fc10 	bl	8002598 <HAL_GetTick>
 8005d78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d7c:	f7fc fc0c 	bl	8002598 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e103      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005d8e:	f7ff fae0 	bl	8005352 <LL_RCC_HSI48_IsReady>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f1      	beq.n	8005d7c <HAL_RCC_OscConfig+0x4c0>
 8005d98:	e013      	b.n	8005dc2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d9a:	f7ff fac9 	bl	8005330 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9e:	f7fc fbfb 	bl	8002598 <HAL_GetTick>
 8005da2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005da6:	f7fc fbf7 	bl	8002598 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e0ee      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005db8:	f7ff facb 	bl	8005352 <LL_RCC_HSI48_IsReady>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f1      	bne.n	8005da6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 80e4 	beq.w	8005f94 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dcc:	f7ff fc29 	bl	8005622 <LL_RCC_GetSysClkSource>
 8005dd0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	f040 80b4 	bne.w	8005f4c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 0203 	and.w	r2, r3, #3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d123      	bne.n	8005e3a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d11c      	bne.n	8005e3a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d114      	bne.n	8005e3a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d10d      	bne.n	8005e3a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d05d      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b0c      	cmp	r3, #12
 8005e3e:	d058      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e0a1      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e52:	f7ff fc84 	bl	800575e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e56:	f7fc fb9f 	bl	8002598 <HAL_GetTick>
 8005e5a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fc fb9b 	bl	8002598 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e092      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1ef      	bne.n	8005e5e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	4b30      	ldr	r3, [pc, #192]	@ (8005f48 <HAL_RCC_OscConfig+0x68c>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e90:	4311      	orrs	r1, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e96:	0212      	lsls	r2, r2, #8
 8005e98:	4311      	orrs	r1, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e9e:	4311      	orrs	r1, r2
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005ea4:	4311      	orrs	r1, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005eb4:	f7ff fc44 	bl	8005740 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ec8:	f7fc fb66 	bl	8002598 <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed0:	f7fc fb62 	bl	8002598 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e059      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0ef      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ef0:	e050      	b.n	8005f94 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e04f      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d147      	bne.n	8005f94 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f04:	f7ff fc1c 	bl	8005740 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f18:	f7fc fb3e 	bl	8002598 <HAL_GetTick>
 8005f1c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f20:	f7fc fb3a 	bl	8002598 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e031      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ef      	beq.n	8005f20 <HAL_RCC_OscConfig+0x664>
 8005f40:	e028      	b.n	8005f94 <HAL_RCC_OscConfig+0x6d8>
 8005f42:	bf00      	nop
 8005f44:	58000400 	.word	0x58000400
 8005f48:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b0c      	cmp	r3, #12
 8005f50:	d01e      	beq.n	8005f90 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f52:	f7ff fc04 	bl	800575e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fc fb1f 	bl	8002598 <HAL_GetTick>
 8005f5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5e:	f7fc fb1b 	bl	8002598 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e012      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ef      	bne.n	8005f5e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <HAL_RCC_OscConfig+0x6e4>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	60cb      	str	r3, [r1, #12]
 8005f8e:	e001      	b.n	8005f94 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3734      	adds	r7, #52	@ 0x34
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd90      	pop	{r4, r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	eefefffc 	.word	0xeefefffc

08005fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e12d      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b98      	ldr	r3, [pc, #608]	@ (800621c <HAL_RCC_ClockConfig+0x278>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d91b      	bls.n	8005ffe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b95      	ldr	r3, [pc, #596]	@ (800621c <HAL_RCC_ClockConfig+0x278>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 0207 	bic.w	r2, r3, #7
 8005fce:	4993      	ldr	r1, [pc, #588]	@ (800621c <HAL_RCC_ClockConfig+0x278>)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd6:	f7fc fadf 	bl	8002598 <HAL_GetTick>
 8005fda:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fde:	f7fc fadb 	bl	8002598 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e111      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff0:	4b8a      	ldr	r3, [pc, #552]	@ (800621c <HAL_RCC_ClockConfig+0x278>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d1ef      	bne.n	8005fde <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fb13 	bl	800563a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006014:	f7fc fac0 	bl	8002598 <HAL_GetTick>
 8006018:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800601c:	f7fc fabc 	bl	8002598 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e0f2      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800602e:	f7ff fbe8 	bl	8005802 <LL_RCC_IsActiveFlag_HPRE>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f1      	beq.n	800601c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d016      	beq.n	8006072 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff fb0a 	bl	8005662 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800604e:	f7fc faa3 	bl	8002598 <HAL_GetTick>
 8006052:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006054:	e008      	b.n	8006068 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006056:	f7fc fa9f 	bl	8002598 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e0d5      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006068:	f7ff fbdd 	bl	8005826 <LL_RCC_IsActiveFlag_C2HPRE>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f1      	beq.n	8006056 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d016      	beq.n	80060ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fb03 	bl	800568e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006088:	f7fc fa86 	bl	8002598 <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006090:	f7fc fa82 	bl	8002598 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e0b8      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80060a2:	f7ff fbd3 	bl	800584c <LL_RCC_IsActiveFlag_SHDHPRE>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f1      	beq.n	8006090 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d016      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fafd 	bl	80056bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060c2:	f7fc fa69 	bl	8002598 <HAL_GetTick>
 80060c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060ca:	f7fc fa65 	bl	8002598 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e09b      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80060dc:	f7ff fbc9 	bl	8005872 <LL_RCC_IsActiveFlag_PPRE1>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f1      	beq.n	80060ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d017      	beq.n	8006122 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff faf3 	bl	80056e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060fe:	f7fc fa4b 	bl	8002598 <HAL_GetTick>
 8006102:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006104:	e008      	b.n	8006118 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006106:	f7fc fa47 	bl	8002598 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e07d      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006118:	f7ff fbbd 	bl	8005896 <LL_RCC_IsActiveFlag_PPRE2>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f1      	beq.n	8006106 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d043      	beq.n	80061b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d106      	bne.n	8006144 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006136:	f7ff f893 	bl	8005260 <LL_RCC_HSE_IsReady>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d11e      	bne.n	800617e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e067      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b03      	cmp	r3, #3
 800614a:	d106      	bne.n	800615a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800614c:	f7ff fb16 	bl	800577c <LL_RCC_PLL_IsReady>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d113      	bne.n	800617e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e05c      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006162:	f7ff f9fb 	bl	800555c <LL_RCC_MSI_IsReady>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d108      	bne.n	800617e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e051      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006170:	f7ff f8a6 	bl	80052c0 <LL_RCC_HSI_IsReady>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e04a      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fa39 	bl	80055fa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006188:	f7fc fa06 	bl	8002598 <HAL_GetTick>
 800618c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618e:	e00a      	b.n	80061a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006190:	f7fc fa02 	bl	8002598 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e036      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a6:	f7ff fa3c 	bl	8005622 <LL_RCC_GetSysClkSource>
 80061aa:	4602      	mov	r2, r0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d1ec      	bne.n	8006190 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061b6:	4b19      	ldr	r3, [pc, #100]	@ (800621c <HAL_RCC_ClockConfig+0x278>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d21b      	bcs.n	80061fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c4:	4b15      	ldr	r3, [pc, #84]	@ (800621c <HAL_RCC_ClockConfig+0x278>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f023 0207 	bic.w	r2, r3, #7
 80061cc:	4913      	ldr	r1, [pc, #76]	@ (800621c <HAL_RCC_ClockConfig+0x278>)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d4:	f7fc f9e0 	bl	8002598 <HAL_GetTick>
 80061d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061da:	e008      	b.n	80061ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061dc:	f7fc f9dc 	bl	8002598 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e012      	b.n	8006214 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <HAL_RCC_ClockConfig+0x278>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d1ef      	bne.n	80061dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061fc:	f000 f87e 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 8006200:	4603      	mov	r3, r0
 8006202:	4a07      	ldr	r2, [pc, #28]	@ (8006220 <HAL_RCC_ClockConfig+0x27c>)
 8006204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006206:	f7fc f9d3 	bl	80025b0 <HAL_GetTickPrio>
 800620a:	4603      	mov	r3, r0
 800620c:	4618      	mov	r0, r3
 800620e:	f7fc f975 	bl	80024fc <HAL_InitTick>
 8006212:	4603      	mov	r3, r0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	58004000 	.word	0x58004000
 8006220:	20000008 	.word	0x20000008

08006224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800622a:	f7ff f9fa 	bl	8005622 <LL_RCC_GetSysClkSource>
 800622e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006236:	f7ff f9b6 	bl	80055a6 <LL_RCC_MSI_GetRange>
 800623a:	4603      	mov	r3, r0
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	4a2b      	ldr	r2, [pc, #172]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e04b      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d102      	bne.n	8006258 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006252:	4b28      	ldr	r3, [pc, #160]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e045      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b08      	cmp	r3, #8
 800625c:	d10a      	bne.n	8006274 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800625e:	f7fe ffcf 	bl	8005200 <LL_RCC_HSE_IsEnabledDiv2>
 8006262:	4603      	mov	r3, r0
 8006264:	2b01      	cmp	r3, #1
 8006266:	d102      	bne.n	800626e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006268:	4b22      	ldr	r3, [pc, #136]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	e03a      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800626e:	4b22      	ldr	r3, [pc, #136]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e037      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006274:	f7ff fab9 	bl	80057ea <LL_RCC_PLL_GetMainSource>
 8006278:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d003      	beq.n	8006288 <HAL_RCC_GetSysClockFreq+0x64>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b03      	cmp	r3, #3
 8006284:	d003      	beq.n	800628e <HAL_RCC_GetSysClockFreq+0x6a>
 8006286:	e00d      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006288:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800628a:	60bb      	str	r3, [r7, #8]
        break;
 800628c:	e015      	b.n	80062ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800628e:	f7fe ffb7 	bl	8005200 <LL_RCC_HSE_IsEnabledDiv2>
 8006292:	4603      	mov	r3, r0
 8006294:	2b01      	cmp	r3, #1
 8006296:	d102      	bne.n	800629e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006298:	4b16      	ldr	r3, [pc, #88]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800629a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800629c:	e00d      	b.n	80062ba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800629e:	4b16      	ldr	r3, [pc, #88]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80062a0:	60bb      	str	r3, [r7, #8]
        break;
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80062a4:	f7ff f97f 	bl	80055a6 <LL_RCC_MSI_GetRange>
 80062a8:	4603      	mov	r3, r0
 80062aa:	091b      	lsrs	r3, r3, #4
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	4a0f      	ldr	r2, [pc, #60]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80062b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b6:	60bb      	str	r3, [r7, #8]
        break;
 80062b8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80062ba:	f7ff fa71 	bl	80057a0 <LL_RCC_PLL_GetN>
 80062be:	4602      	mov	r2, r0
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	fb03 f402 	mul.w	r4, r3, r2
 80062c6:	f7ff fa84 	bl	80057d2 <LL_RCC_PLL_GetDivider>
 80062ca:	4603      	mov	r3, r0
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	3301      	adds	r3, #1
 80062d0:	fbb4 f4f3 	udiv	r4, r4, r3
 80062d4:	f7ff fa71 	bl	80057ba <LL_RCC_PLL_GetR>
 80062d8:	4603      	mov	r3, r0
 80062da:	0f5b      	lsrs	r3, r3, #29
 80062dc:	3301      	adds	r3, #1
 80062de:	fbb4 f3f3 	udiv	r3, r4, r3
 80062e2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80062e4:	68fb      	ldr	r3, [r7, #12]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd90      	pop	{r4, r7, pc}
 80062ee:	bf00      	nop
 80062f0:	0800f104 	.word	0x0800f104
 80062f4:	00f42400 	.word	0x00f42400
 80062f8:	01e84800 	.word	0x01e84800

080062fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062fc:	b598      	push	{r3, r4, r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006300:	f7ff ff90 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8006304:	4604      	mov	r4, r0
 8006306:	f7ff fa01 	bl	800570c <LL_RCC_GetAHBPrescaler>
 800630a:	4603      	mov	r3, r0
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	4a03      	ldr	r2, [pc, #12]	@ (8006320 <HAL_RCC_GetHCLKFreq+0x24>)
 8006314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006318:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800631c:	4618      	mov	r0, r3
 800631e:	bd98      	pop	{r3, r4, r7, pc}
 8006320:	0800f0c4 	.word	0x0800f0c4

08006324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2bb0      	cmp	r3, #176	@ 0xb0
 8006330:	d903      	bls.n	800633a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006332:	4b15      	ldr	r3, [pc, #84]	@ (8006388 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e007      	b.n	800634a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	091b      	lsrs	r3, r3, #4
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	4a11      	ldr	r2, [pc, #68]	@ (8006388 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006348:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800634a:	f7ff f9eb 	bl	8005724 <LL_RCC_GetAHB4Prescaler>
 800634e:	4603      	mov	r3, r0
 8006350:	091b      	lsrs	r3, r3, #4
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	4a0d      	ldr	r2, [pc, #52]	@ (800638c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006362:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4a0a      	ldr	r2, [pc, #40]	@ (8006390 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	0c9c      	lsrs	r4, r3, #18
 800636e:	f7fe ff29 	bl	80051c4 <HAL_PWREx_GetVoltageRange>
 8006372:	4603      	mov	r3, r0
 8006374:	4619      	mov	r1, r3
 8006376:	4620      	mov	r0, r4
 8006378:	f000 f80c 	bl	8006394 <RCC_SetFlashLatency>
 800637c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	bd90      	pop	{r4, r7, pc}
 8006386:	bf00      	nop
 8006388:	0800f104 	.word	0x0800f104
 800638c:	0800f0c4 	.word	0x0800f0c4
 8006390:	431bde83 	.word	0x431bde83

08006394 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b093      	sub	sp, #76	@ 0x4c
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800639e:	4b37      	ldr	r3, [pc, #220]	@ (800647c <RCC_SetFlashLatency+0xe8>)
 80063a0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80063a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80063aa:	4a35      	ldr	r2, [pc, #212]	@ (8006480 <RCC_SetFlashLatency+0xec>)
 80063ac:	f107 031c 	add.w	r3, r7, #28
 80063b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80063b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80063b6:	4b33      	ldr	r3, [pc, #204]	@ (8006484 <RCC_SetFlashLatency+0xf0>)
 80063b8:	f107 040c 	add.w	r4, r7, #12
 80063bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80063c2:	2300      	movs	r3, #0
 80063c4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063cc:	d11a      	bne.n	8006404 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80063ce:	2300      	movs	r3, #0
 80063d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80063d2:	e013      	b.n	80063fc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80063d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	3348      	adds	r3, #72	@ 0x48
 80063da:	443b      	add	r3, r7
 80063dc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d807      	bhi.n	80063f6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80063e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	3348      	adds	r3, #72	@ 0x48
 80063ec:	443b      	add	r3, r7
 80063ee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80063f2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80063f4:	e020      	b.n	8006438 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80063f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f8:	3301      	adds	r3, #1
 80063fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80063fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d9e8      	bls.n	80063d4 <RCC_SetFlashLatency+0x40>
 8006402:	e019      	b.n	8006438 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006404:	2300      	movs	r3, #0
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006408:	e013      	b.n	8006432 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800640a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	3348      	adds	r3, #72	@ 0x48
 8006410:	443b      	add	r3, r7
 8006412:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	d807      	bhi.n	800642c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800641c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	3348      	adds	r3, #72	@ 0x48
 8006422:	443b      	add	r3, r7
 8006424:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006428:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800642a:	e005      	b.n	8006438 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800642c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800642e:	3301      	adds	r3, #1
 8006430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006434:	2b02      	cmp	r3, #2
 8006436:	d9e8      	bls.n	800640a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006438:	4b13      	ldr	r3, [pc, #76]	@ (8006488 <RCC_SetFlashLatency+0xf4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f023 0207 	bic.w	r2, r3, #7
 8006440:	4911      	ldr	r1, [pc, #68]	@ (8006488 <RCC_SetFlashLatency+0xf4>)
 8006442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006444:	4313      	orrs	r3, r2
 8006446:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006448:	f7fc f8a6 	bl	8002598 <HAL_GetTick>
 800644c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800644e:	e008      	b.n	8006462 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006450:	f7fc f8a2 	bl	8002598 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e007      	b.n	8006472 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006462:	4b09      	ldr	r3, [pc, #36]	@ (8006488 <RCC_SetFlashLatency+0xf4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800646c:	429a      	cmp	r2, r3
 800646e:	d1ef      	bne.n	8006450 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	374c      	adds	r7, #76	@ 0x4c
 8006476:	46bd      	mov	sp, r7
 8006478:	bd90      	pop	{r4, r7, pc}
 800647a:	bf00      	nop
 800647c:	0800f050 	.word	0x0800f050
 8006480:	0800f060 	.word	0x0800f060
 8006484:	0800f06c 	.word	0x0800f06c
 8006488:	58004000 	.word	0x58004000

0800648c <LL_RCC_LSE_IsEnabled>:
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <LL_RCC_LSE_IsEnabled+0x18>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <LL_RCC_LSE_IsReady>:
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d101      	bne.n	80064c8 <LL_RCC_LSE_IsReady+0x18>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <LL_RCC_LSE_IsReady+0x1a>
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <LL_RCC_MSI_EnablePLLMode>:
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80064d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064e2:	f043 0304 	orr.w	r3, r3, #4
 80064e6:	6013      	str	r3, [r2, #0]
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <LL_RCC_SetRFWKPClockSource>:
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80064fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006502:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006506:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <LL_RCC_SetSMPSClockSource>:
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	f023 0203 	bic.w	r2, r3, #3
 8006530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4313      	orrs	r3, r2
 8006538:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <LL_RCC_SetSMPSPrescaler>:
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800654e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006554:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006558:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4313      	orrs	r3, r2
 8006560:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <LL_RCC_SetUSARTClockSource>:
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657e:	f023 0203 	bic.w	r2, r3, #3
 8006582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <LL_RCC_SetLPUARTClockSource>:
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80065a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <LL_RCC_SetI2CClockSource>:
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80065ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	091b      	lsrs	r3, r3, #4
 80065da:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80065de:	43db      	mvns	r3, r3
 80065e0:	401a      	ands	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80065ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <LL_RCC_SetLPTIMClockSource>:
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800660c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	43db      	mvns	r3, r3
 8006618:	401a      	ands	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <LL_RCC_SetSAIClockSource>:
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800663c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006644:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <LL_RCC_SetRNGClockSource>:
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006674:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <LL_RCC_SetCLK48ClockSource>:
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <LL_RCC_SetUSBClockSource>:
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff ffe3 	bl	800668c <LL_RCC_SetCLK48ClockSource>
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <LL_RCC_SetADCClockSource>:
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80066d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <LL_RCC_SetRTCClockSource>:
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800670e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <LL_RCC_GetRTCClockSource>:
{
 8006726:	b480      	push	{r7}
 8006728:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800672a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006736:	4618      	mov	r0, r3
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <LL_RCC_ForceBackupDomainReset>:
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800674c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006758:	bf00      	nop
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006762:	b480      	push	{r7}
 8006764:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800677a:	bf00      	nop
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <LL_RCC_PLLSAI1_Enable>:
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006792:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006796:	6013      	str	r3, [r2, #0]
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <LL_RCC_PLLSAI1_Disable>:
{
 80067a2:	b480      	push	{r7}
 80067a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80067a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_RCC_PLLSAI1_IsReady>:
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80067c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d2:	d101      	bne.n	80067d8 <LL_RCC_PLLSAI1_IsReady+0x18>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <LL_RCC_PLLSAI1_IsReady+0x1a>
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80067ec:	2300      	movs	r3, #0
 80067ee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80067f0:	2300      	movs	r3, #0
 80067f2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d034      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006804:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006808:	d021      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800680a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800680e:	d81b      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006810:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006814:	d01d      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800681a:	d815      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006824:	d110      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006834:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006836:	e00d      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	4618      	mov	r0, r3
 800683e:	f000 f94d 	bl	8006adc <RCCEx_PLLSAI1_ConfigNP>
 8006842:	4603      	mov	r3, r0
 8006844:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006846:	e005      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	77fb      	strb	r3, [r7, #31]
        break;
 800684c:	e002      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006854:	7ffb      	ldrb	r3, [r7, #31]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d105      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fee8 	bl	8006634 <LL_RCC_SetSAIClockSource>
 8006864:	e001      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006866:	7ffb      	ldrb	r3, [r7, #31]
 8006868:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006872:	2b00      	cmp	r3, #0
 8006874:	d046      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006876:	f7ff ff56 	bl	8006726 <LL_RCC_GetRTCClockSource>
 800687a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	429a      	cmp	r2, r3
 8006884:	d03c      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006886:	f7fe fc8d 	bl	80051a4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff ff30 	bl	80066fa <LL_RCC_SetRTCClockSource>
 800689a:	e02e      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800689c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80068a6:	f7ff ff4b 	bl	8006740 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80068aa:	f7ff ff5a 	bl	8006762 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80068bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80068c6:	f7ff fde1 	bl	800648c <LL_RCC_LSE_IsEnabled>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d114      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068d0:	f7fb fe62 	bl	8002598 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80068d6:	e00b      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d8:	f7fb fe5e 	bl	8002598 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d902      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	77fb      	strb	r3, [r7, #31]
              break;
 80068ee:	e004      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80068f0:	f7ff fdde 	bl	80064b0 <LL_RCC_LSE_IsReady>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d1ee      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80068fa:	7ffb      	ldrb	r3, [r7, #31]
 80068fc:	77bb      	strb	r3, [r7, #30]
 80068fe:	e001      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006900:	7ffb      	ldrb	r3, [r7, #31]
 8006902:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff fe2a 	bl	800656e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff fe35 	bl	800659a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fe5d 	bl	8006600 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fe52 	bl	8006600 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fe2a 	bl	80065c6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff fe1f 	bl	80065c6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d022      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fe8d 	bl	80066b8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069a6:	d107      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80069a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069b6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069c0:	d10b      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3304      	adds	r3, #4
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 f8e3 	bl	8006b92 <RCCEx_PLLSAI1_ConfigNQ>
 80069cc:	4603      	mov	r3, r0
 80069ce:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80069d0:	7ffb      	ldrb	r3, [r7, #31]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80069d6:	7ffb      	ldrb	r3, [r7, #31]
 80069d8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d02b      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ee:	d008      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069f8:	d003      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d105      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fe2a 	bl	8006660 <LL_RCC_SetRNGClockSource>
 8006a0c:	e00a      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f7ff fe21 	bl	8006660 <LL_RCC_SetRNGClockSource>
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff fe34 	bl	800668c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a28:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006a2c:	d107      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d022      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fe3d 	bl	80066ce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a6c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a76:	d10b      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 f8e3 	bl	8006c48 <RCCEx_PLLSAI1_ConfigNR>
 8006a82:	4603      	mov	r3, r0
 8006a84:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006a86:	7ffb      	ldrb	r3, [r7, #31]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006a8c:	7ffb      	ldrb	r3, [r7, #31]
 8006a8e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fd26 	bl	80064f2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fd45 	bl	8006546 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fd2c 	bl	800651e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006ac6:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006ad4:	f7ff fcfe 	bl	80064d4 <LL_RCC_MSI_EnablePLLMode>
}
 8006ad8:	bf00      	nop
 8006ada:	bd80      	pop	{r7, pc}

08006adc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006ae8:	f7ff fe5b 	bl	80067a2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006aec:	f7fb fd54 	bl	8002598 <HAL_GetTick>
 8006af0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006af2:	e009      	b.n	8006b08 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006af4:	f7fb fd50 	bl	8002598 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d902      	bls.n	8006b08 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	73fb      	strb	r3, [r7, #15]
      break;
 8006b06:	e004      	b.n	8006b12 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b08:	f7ff fe5a 	bl	80067c0 <LL_RCC_PLLSAI1_IsReady>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f0      	bne.n	8006af4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d137      	bne.n	8006b88 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b42:	4313      	orrs	r3, r2
 8006b44:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b46:	f7ff fe1d 	bl	8006784 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b4a:	f7fb fd25 	bl	8002598 <HAL_GetTick>
 8006b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b50:	e009      	b.n	8006b66 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b52:	f7fb fd21 	bl	8002598 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d902      	bls.n	8006b66 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	73fb      	strb	r3, [r7, #15]
        break;
 8006b64:	e004      	b.n	8006b70 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b66:	f7ff fe2b 	bl	80067c0 <LL_RCC_PLLSAI1_IsReady>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d1f0      	bne.n	8006b52 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d108      	bne.n	8006b88 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b7a:	691a      	ldr	r2, [r3, #16]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b84:	4313      	orrs	r3, r2
 8006b86:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006b9e:	f7ff fe00 	bl	80067a2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ba2:	f7fb fcf9 	bl	8002598 <HAL_GetTick>
 8006ba6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ba8:	e009      	b.n	8006bbe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006baa:	f7fb fcf5 	bl	8002598 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d902      	bls.n	8006bbe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbc:	e004      	b.n	8006bc8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006bbe:	f7ff fdff 	bl	80067c0 <LL_RCC_PLLSAI1_IsReady>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f0      	bne.n	8006baa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d137      	bne.n	8006c3e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006be2:	4313      	orrs	r3, r2
 8006be4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006bfc:	f7ff fdc2 	bl	8006784 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c00:	f7fb fcca 	bl	8002598 <HAL_GetTick>
 8006c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c06:	e009      	b.n	8006c1c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c08:	f7fb fcc6 	bl	8002598 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d902      	bls.n	8006c1c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	73fb      	strb	r3, [r7, #15]
        break;
 8006c1a:	e004      	b.n	8006c26 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c1c:	f7ff fdd0 	bl	80067c0 <LL_RCC_PLLSAI1_IsReady>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d1f0      	bne.n	8006c08 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d108      	bne.n	8006c3e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006c54:	f7ff fda5 	bl	80067a2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c58:	f7fb fc9e 	bl	8002598 <HAL_GetTick>
 8006c5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c5e:	e009      	b.n	8006c74 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c60:	f7fb fc9a 	bl	8002598 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d902      	bls.n	8006c74 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	73fb      	strb	r3, [r7, #15]
      break;
 8006c72:	e004      	b.n	8006c7e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c74:	f7ff fda4 	bl	80067c0 <LL_RCC_PLLSAI1_IsReady>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f0      	bne.n	8006c60 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d137      	bne.n	8006cf4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006cb2:	f7ff fd67 	bl	8006784 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb6:	f7fb fc6f 	bl	8002598 <HAL_GetTick>
 8006cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006cbc:	e009      	b.n	8006cd2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cbe:	f7fb fc6b 	bl	8002598 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d902      	bls.n	8006cd2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	73fb      	strb	r3, [r7, #15]
        break;
 8006cd0:	e004      	b.n	8006cdc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006cd2:	f7ff fd75 	bl	80067c0 <LL_RCC_PLLSAI1_IsReady>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d1f0      	bne.n	8006cbe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d108      	bne.n	8006cf4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e095      	b.n	8006e3c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d20:	d009      	beq.n	8006d36 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	61da      	str	r2, [r3, #28]
 8006d28:	e005      	b.n	8006d36 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7fb f9d1 	bl	80020f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d76:	d902      	bls.n	8006d7e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e002      	b.n	8006d84 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d8c:	d007      	beq.n	8006d9e <HAL_SPI_Init+0xa0>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d96:	d002      	beq.n	8006d9e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de0:	ea42 0103 	orr.w	r1, r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	0c1b      	lsrs	r3, r3, #16
 8006dfa:	f003 0204 	and.w	r2, r3, #4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e1a:	ea42 0103 	orr.w	r1, r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e049      	b.n	8006eea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fb f974 	bl	8002158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4619      	mov	r1, r3
 8006e82:	4610      	mov	r0, r2
 8006e84:	f000 f9b4 	bl	80071f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d001      	beq.n	8006f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e036      	b.n	8006f7a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0201 	orr.w	r2, r2, #1
 8006f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a17      	ldr	r2, [pc, #92]	@ (8006f88 <HAL_TIM_Base_Start_IT+0x94>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_TIM_Base_Start_IT+0x44>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f36:	d115      	bne.n	8006f64 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <HAL_TIM_Base_Start_IT+0x98>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b06      	cmp	r3, #6
 8006f48:	d015      	beq.n	8006f76 <HAL_TIM_Base_Start_IT+0x82>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f50:	d011      	beq.n	8006f76 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0201 	orr.w	r2, r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f62:	e008      	b.n	8006f76 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e000      	b.n	8006f78 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40012c00 	.word	0x40012c00
 8006f8c:	00010007 	.word	0x00010007

08006f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d020      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01b      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0202 	mvn.w	r2, #2
 8006fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f8e9 	bl	80071b2 <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8db 	bl	800719e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f8ec 	bl	80071c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d020      	beq.n	8007040 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01b      	beq.n	8007040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0204 	mvn.w	r2, #4
 8007010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8c3 	bl	80071b2 <HAL_TIM_IC_CaptureCallback>
 800702c:	e005      	b.n	800703a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f8b5 	bl	800719e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f8c6 	bl	80071c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d020      	beq.n	800708c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f003 0308 	and.w	r3, r3, #8
 8007050:	2b00      	cmp	r3, #0
 8007052:	d01b      	beq.n	800708c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0208 	mvn.w	r2, #8
 800705c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2204      	movs	r2, #4
 8007062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f89d 	bl	80071b2 <HAL_TIM_IC_CaptureCallback>
 8007078:	e005      	b.n	8007086 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f88f 	bl	800719e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8a0 	bl	80071c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	2b00      	cmp	r3, #0
 8007094:	d020      	beq.n	80070d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01b      	beq.n	80070d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f06f 0210 	mvn.w	r2, #16
 80070a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2208      	movs	r2, #8
 80070ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f877 	bl	80071b2 <HAL_TIM_IC_CaptureCallback>
 80070c4:	e005      	b.n	80070d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f869 	bl	800719e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f87a 	bl	80071c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00c      	beq.n	80070fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0201 	mvn.w	r2, #1
 80070f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7fa ff4a 	bl	8001f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00c      	beq.n	800712a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f8dd 	bl	80072e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00c      	beq.n	800714e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f8d5 	bl	80072f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00c      	beq.n	8007172 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800716a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f834 	bl	80071da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00c      	beq.n	8007196 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d007      	beq.n	8007196 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f06f 0220 	mvn.w	r2, #32
 800718e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f89d 	bl	80072d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
	...

080071f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a30      	ldr	r2, [pc, #192]	@ (80072c4 <TIM_Base_SetConfig+0xd4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_Base_SetConfig+0x20>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720e:	d108      	bne.n	8007222 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a27      	ldr	r2, [pc, #156]	@ (80072c4 <TIM_Base_SetConfig+0xd4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00b      	beq.n	8007242 <TIM_Base_SetConfig+0x52>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007230:	d007      	beq.n	8007242 <TIM_Base_SetConfig+0x52>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a24      	ldr	r2, [pc, #144]	@ (80072c8 <TIM_Base_SetConfig+0xd8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_Base_SetConfig+0x52>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a23      	ldr	r2, [pc, #140]	@ (80072cc <TIM_Base_SetConfig+0xdc>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d108      	bne.n	8007254 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a12      	ldr	r2, [pc, #72]	@ (80072c4 <TIM_Base_SetConfig+0xd4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_Base_SetConfig+0xa0>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a11      	ldr	r2, [pc, #68]	@ (80072c8 <TIM_Base_SetConfig+0xd8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0xa0>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a10      	ldr	r2, [pc, #64]	@ (80072cc <TIM_Base_SetConfig+0xdc>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d103      	bne.n	8007298 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d105      	bne.n	80072b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f023 0201 	bic.w	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	611a      	str	r2, [r3, #16]
  }
}
 80072b6:	bf00      	nop
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40014400 	.word	0x40014400
 80072cc:	40014800 	.word	0x40014800

080072d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800731c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007320:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	b29a      	uxth	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007342:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007346:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	b29b      	uxth	r3, r3
 8007354:	43db      	mvns	r3, r3
 8007356:	b29b      	uxth	r3, r3
 8007358:	4013      	ands	r3, r2
 800735a:	b29a      	uxth	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	1d3b      	adds	r3, r7, #4
 800737a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b09d      	sub	sp, #116	@ 0x74
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80073ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	78db      	ldrb	r3, [r3, #3]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d81f      	bhi.n	800741e <USB_ActivateEndpoint+0x72>
 80073de:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <USB_ActivateEndpoint+0x38>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	080073f5 	.word	0x080073f5
 80073e8:	08007411 	.word	0x08007411
 80073ec:	08007427 	.word	0x08007427
 80073f0:	08007403 	.word	0x08007403
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80073f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80073f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80073fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007400:	e012      	b.n	8007428 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007402:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007406:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800740a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800740e:	e00b      	b.n	8007428 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007410:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007418:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800741c:	e004      	b.n	8007428 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007424:	e000      	b.n	8007428 <USB_ActivateEndpoint+0x7c>
      break;
 8007426:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	441a      	add	r2, r3
 8007432:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800743a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800743e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007446:	b29b      	uxth	r3, r3
 8007448:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	b21b      	sxth	r3, r3
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800745e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007462:	b21a      	sxth	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b21b      	sxth	r3, r3
 800746a:	4313      	orrs	r3, r2
 800746c:	b21b      	sxth	r3, r3
 800746e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	441a      	add	r2, r3
 800747c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800748c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007490:	b29b      	uxth	r3, r3
 8007492:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	7b1b      	ldrb	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f040 8178 	bne.w	800778e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8084 	beq.w	80075b0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	4413      	add	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	00da      	lsls	r2, r3, #3
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	88db      	ldrh	r3, [r3, #6]
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	827b      	strh	r3, [r7, #18]
 80074ea:	8a7b      	ldrh	r3, [r7, #18]
 80074ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01b      	beq.n	800752c <USB_ActivateEndpoint+0x180>
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800750a:	823b      	strh	r3, [r7, #16]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	8a3b      	ldrh	r3, [r7, #16]
 8007518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800751c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007524:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	78db      	ldrb	r3, [r3, #3]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d020      	beq.n	8007576 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800754a:	81bb      	strh	r3, [r7, #12]
 800754c:	89bb      	ldrh	r3, [r7, #12]
 800754e:	f083 0320 	eor.w	r3, r3, #32
 8007552:	81bb      	strh	r3, [r7, #12]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	441a      	add	r2, r3
 800755e:	89bb      	ldrh	r3, [r7, #12]
 8007560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800756c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007570:	b29b      	uxth	r3, r3
 8007572:	8013      	strh	r3, [r2, #0]
 8007574:	e2d5      	b.n	8007b22 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800758c:	81fb      	strh	r3, [r7, #14]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	441a      	add	r2, r3
 8007598:	89fb      	ldrh	r3, [r7, #14]
 800759a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800759e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8013      	strh	r3, [r2, #0]
 80075ae:	e2b8      	b.n	8007b22 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	4413      	add	r3, r2
 80075c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	00da      	lsls	r2, r3, #3
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	4413      	add	r3, r2
 80075ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	88db      	ldrh	r3, [r3, #6]
 80075d8:	085b      	lsrs	r3, r3, #1
 80075da:	b29b      	uxth	r3, r3
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f4:	4413      	add	r3, r2
 80075f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	00da      	lsls	r2, r3, #3
 80075fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007600:	4413      	add	r3, r2
 8007602:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007606:	627b      	str	r3, [r7, #36]	@ 0x24
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007612:	b29a      	uxth	r2, r3
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b3e      	cmp	r3, #62	@ 0x3e
 800761e:	d91d      	bls.n	800765c <USB_ActivateEndpoint+0x2b0>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f003 031f 	and.w	r3, r3, #31
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <USB_ActivateEndpoint+0x28e>
 8007634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007636:	3b01      	subs	r3, #1
 8007638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29a      	uxth	r2, r3
 8007640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007642:	b29b      	uxth	r3, r3
 8007644:	029b      	lsls	r3, r3, #10
 8007646:	b29b      	uxth	r3, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	b29b      	uxth	r3, r3
 800764c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007654:	b29a      	uxth	r2, r3
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	e026      	b.n	80076aa <USB_ActivateEndpoint+0x2fe>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <USB_ActivateEndpoint+0x2ce>
 8007664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800766e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007672:	b29a      	uxth	r2, r3
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	e017      	b.n	80076aa <USB_ActivateEndpoint+0x2fe>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	085b      	lsrs	r3, r3, #1
 8007680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <USB_ActivateEndpoint+0x2e8>
 800768e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007690:	3301      	adds	r3, #1
 8007692:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29a      	uxth	r2, r3
 800769a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800769c:	b29b      	uxth	r3, r3
 800769e:	029b      	lsls	r3, r3, #10
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	4313      	orrs	r3, r2
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80076b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01b      	beq.n	80076fa <USB_ActivateEndpoint+0x34e>
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d8:	843b      	strh	r3, [r7, #32]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	441a      	add	r2, r3
 80076e4:	8c3b      	ldrh	r3, [r7, #32]
 80076e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d124      	bne.n	800774c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007718:	83bb      	strh	r3, [r7, #28]
 800771a:	8bbb      	ldrh	r3, [r7, #28]
 800771c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007720:	83bb      	strh	r3, [r7, #28]
 8007722:	8bbb      	ldrh	r3, [r7, #28]
 8007724:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007728:	83bb      	strh	r3, [r7, #28]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	441a      	add	r2, r3
 8007734:	8bbb      	ldrh	r3, [r7, #28]
 8007736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800773a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800773e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007746:	b29b      	uxth	r3, r3
 8007748:	8013      	strh	r3, [r2, #0]
 800774a:	e1ea      	b.n	8007b22 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800775e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007762:	83fb      	strh	r3, [r7, #30]
 8007764:	8bfb      	ldrh	r3, [r7, #30]
 8007766:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800776a:	83fb      	strh	r3, [r7, #30]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	441a      	add	r2, r3
 8007776:	8bfb      	ldrh	r3, [r7, #30]
 8007778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800777c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007788:	b29b      	uxth	r3, r3
 800778a:	8013      	strh	r3, [r2, #0]
 800778c:	e1c9      	b.n	8007b22 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	78db      	ldrb	r3, [r3, #3]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d11e      	bne.n	80077d4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ac:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	441a      	add	r2, r3
 80077ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80077ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]
 80077d2:	e01d      	b.n	8007810 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80077e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	441a      	add	r2, r3
 80077f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80077fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800780c:	b29b      	uxth	r3, r3
 800780e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800781a:	b29b      	uxth	r3, r3
 800781c:	461a      	mov	r2, r3
 800781e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007820:	4413      	add	r3, r2
 8007822:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	00da      	lsls	r2, r3, #3
 800782a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800782c:	4413      	add	r3, r2
 800782e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007832:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	891b      	ldrh	r3, [r3, #8]
 8007838:	085b      	lsrs	r3, r3, #1
 800783a:	b29b      	uxth	r3, r3
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	b29a      	uxth	r2, r3
 8007840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	657b      	str	r3, [r7, #84]	@ 0x54
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800784e:	b29b      	uxth	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007854:	4413      	add	r3, r2
 8007856:	657b      	str	r3, [r7, #84]	@ 0x54
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	00da      	lsls	r2, r3, #3
 800785e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007860:	4413      	add	r3, r2
 8007862:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007866:	653b      	str	r3, [r7, #80]	@ 0x50
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	895b      	ldrh	r3, [r3, #10]
 800786c:	085b      	lsrs	r3, r3, #1
 800786e:	b29b      	uxth	r3, r3
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007876:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 8093 	bne.w	80079a8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007892:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01b      	beq.n	80078d6 <USB_ActivateEndpoint+0x52a>
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	441a      	add	r2, r3
 80078c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80078c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80078e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80078e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01b      	beq.n	8007926 <USB_ActivateEndpoint+0x57a>
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007904:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	441a      	add	r2, r3
 8007910:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800791a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800791e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007922:	b29b      	uxth	r3, r3
 8007924:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800793c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800793e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007940:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007944:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007946:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007948:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800794c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	441a      	add	r2, r3
 8007958:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800795a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800795e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800796a:	b29b      	uxth	r3, r3
 800796c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007984:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	441a      	add	r2, r3
 8007990:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800799a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800799e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8013      	strh	r3, [r2, #0]
 80079a6:	e0bc      	b.n	8007b22 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80079b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80079bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01d      	beq.n	8007a00 <USB_ActivateEndpoint+0x654>
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079da:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80079ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007a10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01d      	beq.n	8007a58 <USB_ActivateEndpoint+0x6ac>
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a32:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	78db      	ldrb	r3, [r3, #3]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d024      	beq.n	8007aaa <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a76:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007a7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007a7e:	f083 0320 	eor.w	r3, r3, #32
 8007a82:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	8013      	strh	r3, [r2, #0]
 8007aa8:	e01d      	b.n	8007ae6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ac0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	441a      	add	r2, r3
 8007ace:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007afc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	441a      	add	r2, r3
 8007b0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007b22:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3774      	adds	r7, #116	@ 0x74
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop

08007b34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b08d      	sub	sp, #52	@ 0x34
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	7b1b      	ldrb	r3, [r3, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 808e 	bne.w	8007c64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d044      	beq.n	8007bda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	81bb      	strh	r3, [r7, #12]
 8007b5e:	89bb      	ldrh	r3, [r7, #12]
 8007b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01b      	beq.n	8007ba0 <USB_DeactivateEndpoint+0x6c>
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7e:	817b      	strh	r3, [r7, #10]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	897b      	ldrh	r3, [r7, #10]
 8007b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bb6:	813b      	strh	r3, [r7, #8]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	441a      	add	r2, r3
 8007bc2:	893b      	ldrh	r3, [r7, #8]
 8007bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	8013      	strh	r3, [r2, #0]
 8007bd8:	e192      	b.n	8007f00 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	827b      	strh	r3, [r7, #18]
 8007be8:	8a7b      	ldrh	r3, [r7, #18]
 8007bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01b      	beq.n	8007c2a <USB_DeactivateEndpoint+0xf6>
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c08:	823b      	strh	r3, [r7, #16]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	441a      	add	r2, r3
 8007c14:	8a3b      	ldrh	r3, [r7, #16]
 8007c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c40:	81fb      	strh	r3, [r7, #14]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	441a      	add	r2, r3
 8007c4c:	89fb      	ldrh	r3, [r7, #14]
 8007c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	8013      	strh	r3, [r2, #0]
 8007c62:	e14d      	b.n	8007f00 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f040 80a5 	bne.w	8007db8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	843b      	strh	r3, [r7, #32]
 8007c7c:	8c3b      	ldrh	r3, [r7, #32]
 8007c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01b      	beq.n	8007cbe <USB_DeactivateEndpoint+0x18a>
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9c:	83fb      	strh	r3, [r7, #30]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	441a      	add	r2, r3
 8007ca8:	8bfb      	ldrh	r3, [r7, #30]
 8007caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	83bb      	strh	r3, [r7, #28]
 8007ccc:	8bbb      	ldrh	r3, [r7, #28]
 8007cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d01b      	beq.n	8007d0e <USB_DeactivateEndpoint+0x1da>
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cec:	837b      	strh	r3, [r7, #26]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	441a      	add	r2, r3
 8007cf8:	8b7b      	ldrh	r3, [r7, #26]
 8007cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d24:	833b      	strh	r3, [r7, #24]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	441a      	add	r2, r3
 8007d30:	8b3b      	ldrh	r3, [r7, #24]
 8007d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5c:	82fb      	strh	r3, [r7, #22]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	441a      	add	r2, r3
 8007d68:	8afb      	ldrh	r3, [r7, #22]
 8007d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d94:	82bb      	strh	r3, [r7, #20]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	441a      	add	r2, r3
 8007da0:	8abb      	ldrh	r3, [r7, #20]
 8007da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	8013      	strh	r3, [r2, #0]
 8007db6:	e0a3      	b.n	8007f00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007dc6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01b      	beq.n	8007e08 <USB_DeactivateEndpoint+0x2d4>
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007de6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	441a      	add	r2, r3
 8007df2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007e16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01b      	beq.n	8007e58 <USB_DeactivateEndpoint+0x324>
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e36:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	441a      	add	r2, r3
 8007e42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	441a      	add	r2, r3
 8007e7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ea6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	441a      	add	r2, r3
 8007eb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ede:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	441a      	add	r2, r3
 8007eea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3734      	adds	r7, #52	@ 0x34
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b0c2      	sub	sp, #264	@ 0x108
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f1c:	6018      	str	r0, [r3, #0]
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f26:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	f040 86b7 	bne.w	8008ca8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d908      	bls.n	8007f68 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007f66:	e007      	b.n	8007f78 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	7b1b      	ldrb	r3, [r3, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d13a      	bne.n	8007ffe <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6959      	ldr	r1, [r3, #20]
 8007f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	88da      	ldrh	r2, [r3, #6]
 8007fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007faa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007fae:	6800      	ldr	r0, [r0, #0]
 8007fb0:	f001 fc98 	bl	80098e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	613b      	str	r3, [r7, #16]
 8007fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
 8007fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	00da      	lsls	r2, r3, #3
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	f000 be1f 	b.w	8008c3c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	78db      	ldrb	r3, [r3, #3]
 800800a:	2b02      	cmp	r3, #2
 800800c:	f040 8462 	bne.w	80088d4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6a1a      	ldr	r2, [r3, #32]
 800801c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	429a      	cmp	r2, r3
 800802a:	f240 83df 	bls.w	80087ec <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800802e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29b      	uxth	r3, r3
 800804c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008054:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	441a      	add	r2, r3
 8008072:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800807a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800807e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008086:	b29b      	uxth	r3, r3
 8008088:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800808a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800808e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6a1a      	ldr	r2, [r3, #32]
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809a:	1ad2      	subs	r2, r2, r3
 800809c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80080a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 81c7 	beq.w	800845e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	633b      	str	r3, [r7, #48]	@ 0x30
 80080dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d177      	bne.n	80081dc <USB_EPStartXfer+0x2ce>
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008106:	b29b      	uxth	r3, r3
 8008108:	461a      	mov	r2, r3
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	4413      	add	r3, r2
 800810e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	00da      	lsls	r2, r3, #3
 800811e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008120:	4413      	add	r3, r2
 8008122:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008132:	b29a      	uxth	r2, r3
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813c:	2b3e      	cmp	r3, #62	@ 0x3e
 800813e:	d921      	bls.n	8008184 <USB_EPStartXfer+0x276>
 8008140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008144:	095b      	lsrs	r3, r3, #5
 8008146:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	f003 031f 	and.w	r3, r3, #31
 8008152:	2b00      	cmp	r3, #0
 8008154:	d104      	bne.n	8008160 <USB_EPStartXfer+0x252>
 8008156:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800815a:	3b01      	subs	r3, #1
 800815c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800816a:	b29b      	uxth	r3, r3
 800816c:	029b      	lsls	r3, r3, #10
 800816e:	b29b      	uxth	r3, r3
 8008170:	4313      	orrs	r3, r2
 8008172:	b29b      	uxth	r3, r3
 8008174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817c:	b29a      	uxth	r2, r3
 800817e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008180:	801a      	strh	r2, [r3, #0]
 8008182:	e050      	b.n	8008226 <USB_EPStartXfer+0x318>
 8008184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10a      	bne.n	80081a2 <USB_EPStartXfer+0x294>
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800819a:	b29a      	uxth	r2, r3
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	801a      	strh	r2, [r3, #0]
 80081a0:	e041      	b.n	8008226 <USB_EPStartXfer+0x318>
 80081a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a6:	085b      	lsrs	r3, r3, #1
 80081a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80081ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d004      	beq.n	80081c2 <USB_EPStartXfer+0x2b4>
 80081b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80081bc:	3301      	adds	r3, #1
 80081be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	029b      	lsls	r3, r3, #10
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	4313      	orrs	r3, r2
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	e024      	b.n	8008226 <USB_EPStartXfer+0x318>
 80081dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d11c      	bne.n	8008226 <USB_EPStartXfer+0x318>
 80081ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	4413      	add	r3, r2
 8008202:	633b      	str	r3, [r7, #48]	@ 0x30
 8008204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	00da      	lsls	r2, r3, #3
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	4413      	add	r3, r2
 8008216:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800821a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800821c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008220:	b29a      	uxth	r2, r3
 8008222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008224:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	895b      	ldrh	r3, [r3, #10]
 8008232:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6959      	ldr	r1, [r3, #20]
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	b29b      	uxth	r3, r3
 8008248:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800824c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008250:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008254:	6800      	ldr	r0, [r0, #0]
 8008256:	f001 fb45 	bl	80098e4 <USB_WritePMA>
            ep->xfer_buff += len;
 800825a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695a      	ldr	r2, [r3, #20]
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826a:	441a      	add	r2, r3
 800826c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6a1a      	ldr	r2, [r3, #32]
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	429a      	cmp	r2, r3
 8008292:	d90f      	bls.n	80082b4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6a1a      	ldr	r2, [r3, #32]
 80082a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a4:	1ad2      	subs	r2, r2, r3
 80082a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	621a      	str	r2, [r3, #32]
 80082b2:	e00e      	b.n	80082d2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80082b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80082c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d177      	bne.n	80083d2 <USB_EPStartXfer+0x4c4>
 80082e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	4413      	add	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	00da      	lsls	r2, r3, #3
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	4413      	add	r3, r2
 8008318:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008328:	b29a      	uxth	r2, r3
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008332:	2b3e      	cmp	r3, #62	@ 0x3e
 8008334:	d921      	bls.n	800837a <USB_EPStartXfer+0x46c>
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <USB_EPStartXfer+0x448>
 800834c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008350:	3b01      	subs	r3, #1
 8008352:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29a      	uxth	r2, r3
 800835c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008360:	b29b      	uxth	r3, r3
 8008362:	029b      	lsls	r3, r3, #10
 8008364:	b29b      	uxth	r3, r3
 8008366:	4313      	orrs	r3, r2
 8008368:	b29b      	uxth	r3, r3
 800836a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008372:	b29a      	uxth	r2, r3
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	801a      	strh	r2, [r3, #0]
 8008378:	e056      	b.n	8008428 <USB_EPStartXfer+0x51a>
 800837a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <USB_EPStartXfer+0x48a>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800838c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008390:	b29a      	uxth	r2, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	801a      	strh	r2, [r3, #0]
 8008396:	e047      	b.n	8008428 <USB_EPStartXfer+0x51a>
 8008398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80083a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <USB_EPStartXfer+0x4aa>
 80083ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083b2:	3301      	adds	r3, #1
 80083b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	029b      	lsls	r3, r3, #10
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	801a      	strh	r2, [r3, #0]
 80083d0:	e02a      	b.n	8008428 <USB_EPStartXfer+0x51a>
 80083d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	785b      	ldrb	r3, [r3, #1]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d122      	bne.n	8008428 <USB_EPStartXfer+0x51a>
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	623b      	str	r3, [r7, #32]
 80083ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	461a      	mov	r2, r3
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	4413      	add	r3, r2
 8008404:	623b      	str	r3, [r7, #32]
 8008406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	00da      	lsls	r2, r3, #3
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	4413      	add	r3, r2
 8008418:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008422:	b29a      	uxth	r2, r3
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	891b      	ldrh	r3, [r3, #8]
 8008434:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6959      	ldr	r1, [r3, #20]
 8008444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008448:	b29b      	uxth	r3, r3
 800844a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800844e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008452:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008456:	6800      	ldr	r0, [r0, #0]
 8008458:	f001 fa44 	bl	80098e4 <USB_WritePMA>
 800845c:	e3ee      	b.n	8008c3c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800845e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d177      	bne.n	800855e <USB_EPStartXfer+0x650>
 800846e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800847a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008488:	b29b      	uxth	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800848e:	4413      	add	r3, r2
 8008490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	00da      	lsls	r2, r3, #3
 80084a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084a2:	4413      	add	r3, r2
 80084a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80084aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084b8:	801a      	strh	r2, [r3, #0]
 80084ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084be:	2b3e      	cmp	r3, #62	@ 0x3e
 80084c0:	d921      	bls.n	8008506 <USB_EPStartXfer+0x5f8>
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80084cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d104      	bne.n	80084e2 <USB_EPStartXfer+0x5d4>
 80084d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084dc:	3b01      	subs	r3, #1
 80084de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80084e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	029b      	lsls	r3, r3, #10
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	4313      	orrs	r3, r2
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084fe:	b29a      	uxth	r2, r3
 8008500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008502:	801a      	strh	r2, [r3, #0]
 8008504:	e056      	b.n	80085b4 <USB_EPStartXfer+0x6a6>
 8008506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <USB_EPStartXfer+0x616>
 800850e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851c:	b29a      	uxth	r2, r3
 800851e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	e047      	b.n	80085b4 <USB_EPStartXfer+0x6a6>
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008528:	085b      	lsrs	r3, r3, #1
 800852a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800852e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <USB_EPStartXfer+0x636>
 800853a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800853e:	3301      	adds	r3, #1
 8008540:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	b29a      	uxth	r2, r3
 800854a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800854e:	b29b      	uxth	r3, r3
 8008550:	029b      	lsls	r3, r3, #10
 8008552:	b29b      	uxth	r3, r3
 8008554:	4313      	orrs	r3, r2
 8008556:	b29a      	uxth	r2, r3
 8008558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e02a      	b.n	80085b4 <USB_EPStartXfer+0x6a6>
 800855e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	785b      	ldrb	r3, [r3, #1]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d122      	bne.n	80085b4 <USB_EPStartXfer+0x6a6>
 800856e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	653b      	str	r3, [r7, #80]	@ 0x50
 800857a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008588:	b29b      	uxth	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800858e:	4413      	add	r3, r2
 8008590:	653b      	str	r3, [r7, #80]	@ 0x50
 8008592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	00da      	lsls	r2, r3, #3
 80085a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085a2:	4413      	add	r3, r2
 80085a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	891b      	ldrh	r3, [r3, #8]
 80085c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6959      	ldr	r1, [r3, #20]
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80085da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80085de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80085e2:	6800      	ldr	r0, [r0, #0]
 80085e4:	f001 f97e 	bl	80098e4 <USB_WritePMA>
            ep->xfer_buff += len;
 80085e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	695a      	ldr	r2, [r3, #20]
 80085f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f8:	441a      	add	r2, r3
 80085fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6a1a      	ldr	r2, [r3, #32]
 8008612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	429a      	cmp	r2, r3
 8008620:	d90f      	bls.n	8008642 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6a1a      	ldr	r2, [r3, #32]
 800862e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008632:	1ad2      	subs	r2, r2, r3
 8008634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	621a      	str	r2, [r3, #32]
 8008640:	e00e      	b.n	8008660 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2200      	movs	r2, #0
 800865e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	643b      	str	r3, [r7, #64]	@ 0x40
 800866c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	785b      	ldrb	r3, [r3, #1]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d177      	bne.n	800876c <USB_EPStartXfer+0x85e>
 800867c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008696:	b29b      	uxth	r3, r3
 8008698:	461a      	mov	r2, r3
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	4413      	add	r3, r2
 800869e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	00da      	lsls	r2, r3, #3
 80086ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b0:	4413      	add	r3, r2
 80086b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80086ce:	d921      	bls.n	8008714 <USB_EPStartXfer+0x806>
 80086d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d4:	095b      	lsrs	r3, r3, #5
 80086d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80086da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086de:	f003 031f 	and.w	r3, r3, #31
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d104      	bne.n	80086f0 <USB_EPStartXfer+0x7e2>
 80086e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ea:	3b01      	subs	r3, #1
 80086ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80086f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	029b      	lsls	r3, r3, #10
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4313      	orrs	r3, r2
 8008702:	b29b      	uxth	r3, r3
 8008704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800870c:	b29a      	uxth	r2, r3
 800870e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008710:	801a      	strh	r2, [r3, #0]
 8008712:	e050      	b.n	80087b6 <USB_EPStartXfer+0x8a8>
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <USB_EPStartXfer+0x824>
 800871c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	b29b      	uxth	r3, r3
 8008722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800872a:	b29a      	uxth	r2, r3
 800872c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872e:	801a      	strh	r2, [r3, #0]
 8008730:	e041      	b.n	80087b6 <USB_EPStartXfer+0x8a8>
 8008732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800873c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <USB_EPStartXfer+0x844>
 8008748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800874c:	3301      	adds	r3, #1
 800874e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29a      	uxth	r2, r3
 8008758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800875c:	b29b      	uxth	r3, r3
 800875e:	029b      	lsls	r3, r3, #10
 8008760:	b29b      	uxth	r3, r3
 8008762:	4313      	orrs	r3, r2
 8008764:	b29a      	uxth	r2, r3
 8008766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	e024      	b.n	80087b6 <USB_EPStartXfer+0x8a8>
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d11c      	bne.n	80087b6 <USB_EPStartXfer+0x8a8>
 800877c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800878a:	b29b      	uxth	r3, r3
 800878c:	461a      	mov	r2, r3
 800878e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008790:	4413      	add	r3, r2
 8008792:	643b      	str	r3, [r7, #64]	@ 0x40
 8008794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	00da      	lsls	r2, r3, #3
 80087a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087a4:	4413      	add	r3, r2
 80087a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80087b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	895b      	ldrh	r3, [r3, #10]
 80087c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6959      	ldr	r1, [r3, #20]
 80087d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80087dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80087e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80087e4:	6800      	ldr	r0, [r0, #0]
 80087e6:	f001 f87d 	bl	80098e4 <USB_WritePMA>
 80087ea:	e227      	b.n	8008c3c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80087ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80087fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	b29b      	uxth	r3, r3
 800881a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800881e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008822:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	441a      	add	r2, r3
 8008840:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800884c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008854:	b29b      	uxth	r3, r3
 8008856:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800885c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008872:	b29b      	uxth	r3, r3
 8008874:	461a      	mov	r2, r3
 8008876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008878:	4413      	add	r3, r2
 800887a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800887c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	00da      	lsls	r2, r3, #3
 800888a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800888c:	4413      	add	r3, r2
 800888e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008892:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008898:	b29a      	uxth	r2, r3
 800889a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800889c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800889e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	891b      	ldrh	r3, [r3, #8]
 80088aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6959      	ldr	r1, [r3, #20]
 80088ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80088c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80088cc:	6800      	ldr	r0, [r0, #0]
 80088ce:	f001 f809 	bl	80098e4 <USB_WritePMA>
 80088d2:	e1b3      	b.n	8008c3c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80088d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6a1a      	ldr	r2, [r3, #32]
 80088e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e4:	1ad2      	subs	r2, r2, r3
 80088e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80c6 	beq.w	8008aa6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800891a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800891e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	673b      	str	r3, [r7, #112]	@ 0x70
 8008926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d177      	bne.n	8008a26 <USB_EPStartXfer+0xb18>
 8008936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008950:	b29b      	uxth	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008956:	4413      	add	r3, r2
 8008958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800895a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	00da      	lsls	r2, r3, #3
 8008968:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800896a:	4413      	add	r3, r2
 800896c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008970:	667b      	str	r3, [r7, #100]	@ 0x64
 8008972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800897c:	b29a      	uxth	r2, r3
 800897e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008986:	2b3e      	cmp	r3, #62	@ 0x3e
 8008988:	d921      	bls.n	80089ce <USB_EPStartXfer+0xac0>
 800898a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898e:	095b      	lsrs	r3, r3, #5
 8008990:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <USB_EPStartXfer+0xa9c>
 80089a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80089a4:	3b01      	subs	r3, #1
 80089a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80089aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	029b      	lsls	r3, r3, #10
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	4313      	orrs	r3, r2
 80089bc:	b29b      	uxth	r3, r3
 80089be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ca:	801a      	strh	r2, [r3, #0]
 80089cc:	e050      	b.n	8008a70 <USB_EPStartXfer+0xb62>
 80089ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10a      	bne.n	80089ec <USB_EPStartXfer+0xade>
 80089d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089e8:	801a      	strh	r2, [r3, #0]
 80089ea:	e041      	b.n	8008a70 <USB_EPStartXfer+0xb62>
 80089ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f0:	085b      	lsrs	r3, r3, #1
 80089f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80089f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d004      	beq.n	8008a0c <USB_EPStartXfer+0xafe>
 8008a02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008a06:	3301      	adds	r3, #1
 8008a08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	029b      	lsls	r3, r3, #10
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	e024      	b.n	8008a70 <USB_EPStartXfer+0xb62>
 8008a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	785b      	ldrb	r3, [r3, #1]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d11c      	bne.n	8008a70 <USB_EPStartXfer+0xb62>
 8008a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a4a:	4413      	add	r3, r2
 8008a4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	00da      	lsls	r2, r3, #3
 8008a5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a5e:	4413      	add	r3, r2
 8008a60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	895b      	ldrh	r3, [r3, #10]
 8008a7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6959      	ldr	r1, [r3, #20]
 8008a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a9e:	6800      	ldr	r0, [r0, #0]
 8008aa0:	f000 ff20 	bl	80098e4 <USB_WritePMA>
 8008aa4:	e0ca      	b.n	8008c3c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	785b      	ldrb	r3, [r3, #1]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d177      	bne.n	8008ba6 <USB_EPStartXfer+0xc98>
 8008ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ad6:	4413      	add	r3, r2
 8008ad8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	00da      	lsls	r2, r3, #3
 8008ae8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008aea:	4413      	add	r3, r2
 8008aec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008af0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b06:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b08:	d921      	bls.n	8008b4e <USB_EPStartXfer+0xc40>
 8008b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b0e:	095b      	lsrs	r3, r3, #5
 8008b10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b18:	f003 031f 	and.w	r3, r3, #31
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d104      	bne.n	8008b2a <USB_EPStartXfer+0xc1c>
 8008b20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008b24:	3b01      	subs	r3, #1
 8008b26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008b2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	029b      	lsls	r3, r3, #10
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b4a:	801a      	strh	r2, [r3, #0]
 8008b4c:	e05c      	b.n	8008c08 <USB_EPStartXfer+0xcfa>
 8008b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <USB_EPStartXfer+0xc5e>
 8008b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b68:	801a      	strh	r2, [r3, #0]
 8008b6a:	e04d      	b.n	8008c08 <USB_EPStartXfer+0xcfa>
 8008b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b70:	085b      	lsrs	r3, r3, #1
 8008b72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d004      	beq.n	8008b8c <USB_EPStartXfer+0xc7e>
 8008b82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008b86:	3301      	adds	r3, #1
 8008b88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	029b      	lsls	r3, r3, #10
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	e030      	b.n	8008c08 <USB_EPStartXfer+0xcfa>
 8008ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d128      	bne.n	8008c08 <USB_EPStartXfer+0xcfa>
 8008bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008bda:	4413      	add	r3, r2
 8008bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	00da      	lsls	r2, r3, #3
 8008bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	891b      	ldrh	r3, [r3, #8]
 8008c14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6959      	ldr	r1, [r3, #20]
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c36:	6800      	ldr	r0, [r0, #0]
 8008c38:	f000 fe54 	bl	80098e4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c62:	817b      	strh	r3, [r7, #10]
 8008c64:	897b      	ldrh	r3, [r7, #10]
 8008c66:	f083 0310 	eor.w	r3, r3, #16
 8008c6a:	817b      	strh	r3, [r7, #10]
 8008c6c:	897b      	ldrh	r3, [r7, #10]
 8008c6e:	f083 0320 	eor.w	r3, r3, #32
 8008c72:	817b      	strh	r3, [r7, #10]
 8008c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	441a      	add	r2, r3
 8008c8e:	897b      	ldrh	r3, [r7, #10]
 8008c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	8013      	strh	r3, [r2, #0]
 8008ca4:	f000 bcde 	b.w	8009664 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	7b1b      	ldrb	r3, [r3, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f040 80bb 	bne.w	8008e30 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699a      	ldr	r2, [r3, #24]
 8008cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d917      	bls.n	8008d06 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	619a      	str	r2, [r3, #24]
 8008d04:	e00e      	b.n	8008d24 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2200      	movs	r2, #0
 8008d22:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	461a      	mov	r2, r3
 8008d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d48:	4413      	add	r3, r2
 8008d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	00da      	lsls	r2, r3, #3
 8008d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d60:	4413      	add	r3, r2
 8008d62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d7c:	801a      	strh	r2, [r3, #0]
 8008d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d82:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d84:	d924      	bls.n	8008dd0 <USB_EPStartXfer+0xec2>
 8008d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d94:	f003 031f 	and.w	r3, r3, #31
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <USB_EPStartXfer+0xe98>
 8008d9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008da0:	3b01      	subs	r3, #1
 8008da2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	029b      	lsls	r3, r3, #10
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	4313      	orrs	r3, r2
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	f000 bc10 	b.w	80095f0 <USB_EPStartXfer+0x16e2>
 8008dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10c      	bne.n	8008df2 <USB_EPStartXfer+0xee4>
 8008dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dee:	801a      	strh	r2, [r3, #0]
 8008df0:	e3fe      	b.n	80095f0 <USB_EPStartXfer+0x16e2>
 8008df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df6:	085b      	lsrs	r3, r3, #1
 8008df8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d004      	beq.n	8008e12 <USB_EPStartXfer+0xf04>
 8008e08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	029b      	lsls	r3, r3, #10
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	4313      	orrs	r3, r2
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	e3df      	b.n	80095f0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	78db      	ldrb	r3, [r3, #3]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	f040 8218 	bne.w	8009272 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f040 809d 	bne.w	8008f8e <USB_EPStartXfer+0x1080>
 8008e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	461a      	mov	r2, r3
 8008e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e78:	4413      	add	r3, r2
 8008e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	00da      	lsls	r2, r3, #3
 8008e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e90:	4413      	add	r3, r2
 8008e92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008eac:	801a      	strh	r2, [r3, #0]
 8008eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ebc:	d92b      	bls.n	8008f16 <USB_EPStartXfer+0x1008>
 8008ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	095b      	lsrs	r3, r3, #5
 8008ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	f003 031f 	and.w	r3, r3, #31
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <USB_EPStartXfer+0xfe0>
 8008ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008eee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	029b      	lsls	r3, r3, #10
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	4313      	orrs	r3, r2
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f12:	801a      	strh	r2, [r3, #0]
 8008f14:	e070      	b.n	8008ff8 <USB_EPStartXfer+0x10ea>
 8008f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10c      	bne.n	8008f40 <USB_EPStartXfer+0x1032>
 8008f26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f3c:	801a      	strh	r2, [r3, #0]
 8008f3e:	e05b      	b.n	8008ff8 <USB_EPStartXfer+0x10ea>
 8008f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d004      	beq.n	8008f70 <USB_EPStartXfer+0x1062>
 8008f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	029b      	lsls	r3, r3, #10
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	4313      	orrs	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f8a:	801a      	strh	r2, [r3, #0]
 8008f8c:	e034      	b.n	8008ff8 <USB_EPStartXfer+0x10ea>
 8008f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	785b      	ldrb	r3, [r3, #1]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d12c      	bne.n	8008ff8 <USB_EPStartXfer+0x10ea>
 8008f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	00da      	lsls	r2, r3, #3
 8008fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fda:	4413      	add	r3, r2
 8008fdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008ff6:	801a      	strh	r2, [r3, #0]
 8008ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	2b00      	cmp	r3, #0
 8009014:	f040 809d 	bne.w	8009152 <USB_EPStartXfer+0x1244>
 8009018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800901c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009034:	b29b      	uxth	r3, r3
 8009036:	461a      	mov	r2, r3
 8009038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800903c:	4413      	add	r3, r2
 800903e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	00da      	lsls	r2, r3, #3
 8009050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009054:	4413      	add	r3, r2
 8009056:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800905a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800905e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	b29b      	uxth	r3, r3
 8009066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800906a:	b29a      	uxth	r2, r3
 800906c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009080:	d92b      	bls.n	80090da <USB_EPStartXfer+0x11cc>
 8009082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f003 031f 	and.w	r3, r3, #31
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <USB_EPStartXfer+0x11a4>
 80090a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ac:	3b01      	subs	r3, #1
 80090ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090be:	b29b      	uxth	r3, r3
 80090c0:	029b      	lsls	r3, r3, #10
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	4313      	orrs	r3, r2
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	e069      	b.n	80091ae <USB_EPStartXfer+0x12a0>
 80090da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10c      	bne.n	8009104 <USB_EPStartXfer+0x11f6>
 80090ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009100:	801a      	strh	r2, [r3, #0]
 8009102:	e054      	b.n	80091ae <USB_EPStartXfer+0x12a0>
 8009104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	085b      	lsrs	r3, r3, #1
 8009112:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800911a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b00      	cmp	r3, #0
 8009128:	d004      	beq.n	8009134 <USB_EPStartXfer+0x1226>
 800912a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800912e:	3301      	adds	r3, #1
 8009130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29a      	uxth	r2, r3
 800913c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009140:	b29b      	uxth	r3, r3
 8009142:	029b      	lsls	r3, r3, #10
 8009144:	b29b      	uxth	r3, r3
 8009146:	4313      	orrs	r3, r2
 8009148:	b29a      	uxth	r2, r3
 800914a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800914e:	801a      	strh	r2, [r3, #0]
 8009150:	e02d      	b.n	80091ae <USB_EPStartXfer+0x12a0>
 8009152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	785b      	ldrb	r3, [r3, #1]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d125      	bne.n	80091ae <USB_EPStartXfer+0x12a0>
 8009162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009170:	b29b      	uxth	r3, r3
 8009172:	461a      	mov	r2, r3
 8009174:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009178:	4413      	add	r3, r2
 800917a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800917e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	00da      	lsls	r2, r3, #3
 800918c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009190:	4413      	add	r3, r2
 8009192:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800919a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091ac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80091ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8218 	beq.w	80095f0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80091c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80091e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80091e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d005      	beq.n	80091f8 <USB_EPStartXfer+0x12ea>
 80091ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80091f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10d      	bne.n	8009214 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80091f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80091fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009200:	2b00      	cmp	r3, #0
 8009202:	f040 81f5 	bne.w	80095f0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009206:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800920a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 81ee 	bne.w	80095f0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29b      	uxth	r3, r3
 8009232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800923a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800923e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	441a      	add	r2, r3
 8009258:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800925c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009268:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800926c:	b29b      	uxth	r3, r3
 800926e:	8013      	strh	r3, [r2, #0]
 8009270:	e1be      	b.n	80095f0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	78db      	ldrb	r3, [r3, #3]
 800927e:	2b01      	cmp	r3, #1
 8009280:	f040 81b4 	bne.w	80095ec <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	429a      	cmp	r2, r3
 800929e:	d917      	bls.n	80092d0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80092a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80092b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	699a      	ldr	r2, [r3, #24]
 80092bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c0:	1ad2      	subs	r2, r2, r3
 80092c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	619a      	str	r2, [r3, #24]
 80092ce:	e00e      	b.n	80092ee <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80092d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80092e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80092ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	785b      	ldrb	r3, [r3, #1]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f040 8085 	bne.w	800940a <USB_EPStartXfer+0x14fc>
 8009300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800930e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800931c:	b29b      	uxth	r3, r3
 800931e:	461a      	mov	r2, r3
 8009320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009324:	4413      	add	r3, r2
 8009326:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800932a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	00da      	lsls	r2, r3, #3
 8009338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800933c:	4413      	add	r3, r2
 800933e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009342:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	b29b      	uxth	r3, r3
 800934e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009352:	b29a      	uxth	r2, r3
 8009354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009360:	d923      	bls.n	80093aa <USB_EPStartXfer+0x149c>
 8009362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009366:	095b      	lsrs	r3, r3, #5
 8009368:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800936c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009370:	f003 031f 	and.w	r3, r3, #31
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <USB_EPStartXfer+0x1474>
 8009378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800937c:	3b01      	subs	r3, #1
 800937e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29a      	uxth	r2, r3
 800938a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800938e:	b29b      	uxth	r3, r3
 8009390:	029b      	lsls	r3, r3, #10
 8009392:	b29b      	uxth	r3, r3
 8009394:	4313      	orrs	r3, r2
 8009396:	b29b      	uxth	r3, r3
 8009398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800939c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093a6:	801a      	strh	r2, [r3, #0]
 80093a8:	e060      	b.n	800946c <USB_EPStartXfer+0x155e>
 80093aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10c      	bne.n	80093cc <USB_EPStartXfer+0x14be>
 80093b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093c8:	801a      	strh	r2, [r3, #0]
 80093ca:	e04f      	b.n	800946c <USB_EPStartXfer+0x155e>
 80093cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d0:	085b      	lsrs	r3, r3, #1
 80093d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80093d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <USB_EPStartXfer+0x14de>
 80093e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093e6:	3301      	adds	r3, #1
 80093e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80093ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	029b      	lsls	r3, r3, #10
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	4313      	orrs	r3, r2
 8009400:	b29a      	uxth	r2, r3
 8009402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009406:	801a      	strh	r2, [r3, #0]
 8009408:	e030      	b.n	800946c <USB_EPStartXfer+0x155e>
 800940a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d128      	bne.n	800946c <USB_EPStartXfer+0x155e>
 800941a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009436:	b29b      	uxth	r3, r3
 8009438:	461a      	mov	r2, r3
 800943a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800943e:	4413      	add	r3, r2
 8009440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	00da      	lsls	r2, r3, #3
 8009452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009456:	4413      	add	r3, r2
 8009458:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800945c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009464:	b29a      	uxth	r2, r3
 8009466:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800946a:	801a      	strh	r2, [r3, #0]
 800946c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800947a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800947e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2b00      	cmp	r3, #0
 8009488:	f040 8085 	bne.w	8009596 <USB_EPStartXfer+0x1688>
 800948c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800949a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80094b0:	4413      	add	r3, r2
 80094b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80094b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	00da      	lsls	r2, r3, #3
 80094c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80094c8:	4413      	add	r3, r2
 80094ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094de:	b29a      	uxth	r2, r3
 80094e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094e4:	801a      	strh	r2, [r3, #0]
 80094e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80094ec:	d923      	bls.n	8009536 <USB_EPStartXfer+0x1628>
 80094ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	2b00      	cmp	r3, #0
 8009502:	d104      	bne.n	800950e <USB_EPStartXfer+0x1600>
 8009504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009508:	3b01      	subs	r3, #1
 800950a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800950e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	b29a      	uxth	r2, r3
 8009516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800951a:	b29b      	uxth	r3, r3
 800951c:	029b      	lsls	r3, r3, #10
 800951e:	b29b      	uxth	r3, r3
 8009520:	4313      	orrs	r3, r2
 8009522:	b29b      	uxth	r3, r3
 8009524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800952c:	b29a      	uxth	r2, r3
 800952e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009532:	801a      	strh	r2, [r3, #0]
 8009534:	e05c      	b.n	80095f0 <USB_EPStartXfer+0x16e2>
 8009536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <USB_EPStartXfer+0x164a>
 800953e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	b29b      	uxth	r3, r3
 8009546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800954a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800954e:	b29a      	uxth	r2, r3
 8009550:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009554:	801a      	strh	r2, [r3, #0]
 8009556:	e04b      	b.n	80095f0 <USB_EPStartXfer+0x16e2>
 8009558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800955c:	085b      	lsrs	r3, r3, #1
 800955e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	2b00      	cmp	r3, #0
 800956c:	d004      	beq.n	8009578 <USB_EPStartXfer+0x166a>
 800956e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009572:	3301      	adds	r3, #1
 8009574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29a      	uxth	r2, r3
 8009580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009584:	b29b      	uxth	r3, r3
 8009586:	029b      	lsls	r3, r3, #10
 8009588:	b29b      	uxth	r3, r3
 800958a:	4313      	orrs	r3, r2
 800958c:	b29a      	uxth	r2, r3
 800958e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	e02c      	b.n	80095f0 <USB_EPStartXfer+0x16e2>
 8009596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800959a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d124      	bne.n	80095f0 <USB_EPStartXfer+0x16e2>
 80095a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80095bc:	4413      	add	r3, r2
 80095be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	00da      	lsls	r2, r3, #3
 80095d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80095d4:	4413      	add	r3, r2
 80095d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80095e8:	801a      	strh	r2, [r3, #0]
 80095ea:	e001      	b.n	80095f0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e03a      	b.n	8009666 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80095f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29b      	uxth	r3, r3
 800960e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009616:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800961a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800961e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009622:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009626:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800962a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800962e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	441a      	add	r2, r3
 800964c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800965c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009660:	b29b      	uxth	r3, r3
 8009662:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d020      	beq.n	80096c4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	b29b      	uxth	r3, r3
 8009690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009698:	81bb      	strh	r3, [r7, #12]
 800969a:	89bb      	ldrh	r3, [r7, #12]
 800969c:	f083 0310 	eor.w	r3, r3, #16
 80096a0:	81bb      	strh	r3, [r7, #12]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	441a      	add	r2, r3
 80096ac:	89bb      	ldrh	r3, [r7, #12]
 80096ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096be:	b29b      	uxth	r3, r3
 80096c0:	8013      	strh	r3, [r2, #0]
 80096c2:	e01f      	b.n	8009704 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096da:	81fb      	strh	r3, [r7, #14]
 80096dc:	89fb      	ldrh	r3, [r7, #14]
 80096de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80096e2:	81fb      	strh	r3, [r7, #14]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	441a      	add	r2, r3
 80096ee:	89fb      	ldrh	r3, [r7, #14]
 80096f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009700:	b29b      	uxth	r3, r3
 8009702:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009712:	b480      	push	{r7}
 8009714:	b087      	sub	sp, #28
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	7b1b      	ldrb	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	f040 809d 	bne.w	8009860 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	785b      	ldrb	r3, [r3, #1]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d04c      	beq.n	80097c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	823b      	strh	r3, [r7, #16]
 800973c:	8a3b      	ldrh	r3, [r7, #16]
 800973e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01b      	beq.n	800977e <USB_EPClearStall+0x6c>
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	b29b      	uxth	r3, r3
 8009754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800975c:	81fb      	strh	r3, [r7, #14]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	441a      	add	r2, r3
 8009768:	89fb      	ldrh	r3, [r7, #14]
 800976a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800976e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009776:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800977a:	b29b      	uxth	r3, r3
 800977c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	78db      	ldrb	r3, [r3, #3]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d06c      	beq.n	8009860 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800979c:	81bb      	strh	r3, [r7, #12]
 800979e:	89bb      	ldrh	r3, [r7, #12]
 80097a0:	f083 0320 	eor.w	r3, r3, #32
 80097a4:	81bb      	strh	r3, [r7, #12]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	441a      	add	r2, r3
 80097b0:	89bb      	ldrh	r3, [r7, #12]
 80097b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	8013      	strh	r3, [r2, #0]
 80097c6:	e04b      	b.n	8009860 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	82fb      	strh	r3, [r7, #22]
 80097d6:	8afb      	ldrh	r3, [r7, #22]
 80097d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01b      	beq.n	8009818 <USB_EPClearStall+0x106>
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097f6:	82bb      	strh	r3, [r7, #20]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	441a      	add	r2, r3
 8009802:	8abb      	ldrh	r3, [r7, #20]
 8009804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800980c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009814:	b29b      	uxth	r3, r3
 8009816:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800982a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800982e:	827b      	strh	r3, [r7, #18]
 8009830:	8a7b      	ldrh	r3, [r7, #18]
 8009832:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009836:	827b      	strh	r3, [r7, #18]
 8009838:	8a7b      	ldrh	r3, [r7, #18]
 800983a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800983e:	827b      	strh	r3, [r7, #18]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	441a      	add	r2, r3
 800984a:	8a7b      	ldrh	r3, [r7, #18]
 800984c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985c:	b29b      	uxth	r3, r3
 800985e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d103      	bne.n	8009888 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2280      	movs	r2, #128	@ 0x80
 8009884:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80098d6:	68fb      	ldr	r3, [r7, #12]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b08b      	sub	sp, #44	@ 0x2c
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4611      	mov	r1, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	460b      	mov	r3, r1
 80098f4:	80fb      	strh	r3, [r7, #6]
 80098f6:	4613      	mov	r3, r2
 80098f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80098fa:	88bb      	ldrh	r3, [r7, #4]
 80098fc:	3301      	adds	r3, #1
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800990a:	88fa      	ldrh	r2, [r7, #6]
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009914:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	627b      	str	r3, [r7, #36]	@ 0x24
 800991a:	e01b      	b.n	8009954 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	3301      	adds	r3, #1
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	021b      	lsls	r3, r3, #8
 800992a:	b21a      	sxth	r2, r3
 800992c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009930:	4313      	orrs	r3, r2
 8009932:	b21b      	sxth	r3, r3
 8009934:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	8a7a      	ldrh	r2, [r7, #18]
 800993a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	3302      	adds	r3, #2
 8009940:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	3301      	adds	r3, #1
 8009946:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	3301      	adds	r3, #1
 800994c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	3b01      	subs	r3, #1
 8009952:	627b      	str	r3, [r7, #36]	@ 0x24
 8009954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e0      	bne.n	800991c <USB_WritePMA+0x38>
  }
}
 800995a:	bf00      	nop
 800995c:	bf00      	nop
 800995e:	372c      	adds	r7, #44	@ 0x2c
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009968:	b480      	push	{r7}
 800996a:	b08b      	sub	sp, #44	@ 0x2c
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4611      	mov	r1, r2
 8009974:	461a      	mov	r2, r3
 8009976:	460b      	mov	r3, r1
 8009978:	80fb      	strh	r3, [r7, #6]
 800997a:	4613      	mov	r3, r2
 800997c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800997e:	88bb      	ldrh	r3, [r7, #4]
 8009980:	085b      	lsrs	r3, r3, #1
 8009982:	b29b      	uxth	r3, r3
 8009984:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800998e:	88fa      	ldrh	r2, [r7, #6]
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009998:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	627b      	str	r3, [r7, #36]	@ 0x24
 800999e:	e018      	b.n	80099d2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	3302      	adds	r3, #2
 80099ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	3301      	adds	r3, #1
 80099ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	3301      	adds	r3, #1
 80099ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80099cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ce:	3b01      	subs	r3, #1
 80099d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e3      	bne.n	80099a0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80099d8:	88bb      	ldrh	r3, [r7, #4]
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	b29b      	uxth	r3, r3
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	701a      	strb	r2, [r3, #0]
  }
}
 80099f4:	bf00      	nop
 80099f6:	372c      	adds	r7, #44	@ 0x2c
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009a10:	f002 fc76 	bl	800c300 <USBD_static_malloc>
 8009a14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d109      	bne.n	8009a30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	32b0      	adds	r2, #176	@ 0xb0
 8009a26:	2100      	movs	r1, #0
 8009a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e0d4      	b.n	8009bda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009a34:	2100      	movs	r1, #0
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f003 fa29 	bl	800ce8e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	32b0      	adds	r2, #176	@ 0xb0
 8009a46:	68f9      	ldr	r1, [r7, #12]
 8009a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	32b0      	adds	r2, #176	@ 0xb0
 8009a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7c1b      	ldrb	r3, [r3, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d138      	bne.n	8009ada <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a68:	4b5e      	ldr	r3, [pc, #376]	@ (8009be4 <USBD_CDC_Init+0x1e4>)
 8009a6a:	7819      	ldrb	r1, [r3, #0]
 8009a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a70:	2202      	movs	r2, #2
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f002 faeb 	bl	800c04e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a78:	4b5a      	ldr	r3, [pc, #360]	@ (8009be4 <USBD_CDC_Init+0x1e4>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 020f 	and.w	r2, r3, #15
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	440b      	add	r3, r1
 8009a8c:	3324      	adds	r3, #36	@ 0x24
 8009a8e:	2201      	movs	r2, #1
 8009a90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a92:	4b55      	ldr	r3, [pc, #340]	@ (8009be8 <USBD_CDC_Init+0x1e8>)
 8009a94:	7819      	ldrb	r1, [r3, #0]
 8009a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f002 fad6 	bl	800c04e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009aa2:	4b51      	ldr	r3, [pc, #324]	@ (8009be8 <USBD_CDC_Init+0x1e8>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	f003 020f 	and.w	r2, r3, #15
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009aba:	2201      	movs	r2, #1
 8009abc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009abe:	4b4b      	ldr	r3, [pc, #300]	@ (8009bec <USBD_CDC_Init+0x1ec>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	f003 020f 	and.w	r2, r3, #15
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	3326      	adds	r3, #38	@ 0x26
 8009ad4:	2210      	movs	r2, #16
 8009ad6:	801a      	strh	r2, [r3, #0]
 8009ad8:	e035      	b.n	8009b46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ada:	4b42      	ldr	r3, [pc, #264]	@ (8009be4 <USBD_CDC_Init+0x1e4>)
 8009adc:	7819      	ldrb	r1, [r3, #0]
 8009ade:	2340      	movs	r3, #64	@ 0x40
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f002 fab3 	bl	800c04e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8009be4 <USBD_CDC_Init+0x1e4>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	f003 020f 	and.w	r2, r3, #15
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	440b      	add	r3, r1
 8009afc:	3324      	adds	r3, #36	@ 0x24
 8009afe:	2201      	movs	r2, #1
 8009b00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b02:	4b39      	ldr	r3, [pc, #228]	@ (8009be8 <USBD_CDC_Init+0x1e8>)
 8009b04:	7819      	ldrb	r1, [r3, #0]
 8009b06:	2340      	movs	r3, #64	@ 0x40
 8009b08:	2202      	movs	r2, #2
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f002 fa9f 	bl	800c04e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b10:	4b35      	ldr	r3, [pc, #212]	@ (8009be8 <USBD_CDC_Init+0x1e8>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 020f 	and.w	r2, r3, #15
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	440b      	add	r3, r1
 8009b24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b28:	2201      	movs	r2, #1
 8009b2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8009bec <USBD_CDC_Init+0x1ec>)
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 020f 	and.w	r2, r3, #15
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	3326      	adds	r3, #38	@ 0x26
 8009b42:	2210      	movs	r2, #16
 8009b44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b46:	4b29      	ldr	r3, [pc, #164]	@ (8009bec <USBD_CDC_Init+0x1ec>)
 8009b48:	7819      	ldrb	r1, [r3, #0]
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	2203      	movs	r2, #3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f002 fa7d 	bl	800c04e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009b54:	4b25      	ldr	r3, [pc, #148]	@ (8009bec <USBD_CDC_Init+0x1ec>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 020f 	and.w	r2, r3, #15
 8009b5c:	6879      	ldr	r1, [r7, #4]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	440b      	add	r3, r1
 8009b68:	3324      	adds	r3, #36	@ 0x24
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	33b0      	adds	r3, #176	@ 0xb0
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e018      	b.n	8009bda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7c1b      	ldrb	r3, [r3, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10a      	bne.n	8009bc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8009be8 <USBD_CDC_Init+0x1e8>)
 8009bb2:	7819      	ldrb	r1, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f002 fb34 	bl	800c22c <USBD_LL_PrepareReceive>
 8009bc4:	e008      	b.n	8009bd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bc6:	4b08      	ldr	r3, [pc, #32]	@ (8009be8 <USBD_CDC_Init+0x1e8>)
 8009bc8:	7819      	ldrb	r1, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bd0:	2340      	movs	r3, #64	@ 0x40
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f002 fb2a 	bl	800c22c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	2000009b 	.word	0x2000009b
 8009be8:	2000009c 	.word	0x2000009c
 8009bec:	2000009d 	.word	0x2000009d

08009bf0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8009ce8 <USBD_CDC_DeInit+0xf8>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fa49 	bl	800c09a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009c08:	4b37      	ldr	r3, [pc, #220]	@ (8009ce8 <USBD_CDC_DeInit+0xf8>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	f003 020f 	and.w	r2, r3, #15
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	4613      	mov	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	3324      	adds	r3, #36	@ 0x24
 8009c1e:	2200      	movs	r2, #0
 8009c20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009c22:	4b32      	ldr	r3, [pc, #200]	@ (8009cec <USBD_CDC_DeInit+0xfc>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f002 fa36 	bl	800c09a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8009cec <USBD_CDC_DeInit+0xfc>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	f003 020f 	and.w	r2, r3, #15
 8009c36:	6879      	ldr	r1, [r7, #4]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	440b      	add	r3, r1
 8009c42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c46:	2200      	movs	r2, #0
 8009c48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009c4a:	4b29      	ldr	r3, [pc, #164]	@ (8009cf0 <USBD_CDC_DeInit+0x100>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f002 fa22 	bl	800c09a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009c56:	4b26      	ldr	r3, [pc, #152]	@ (8009cf0 <USBD_CDC_DeInit+0x100>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f003 020f 	and.w	r2, r3, #15
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	3324      	adds	r3, #36	@ 0x24
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009c70:	4b1f      	ldr	r3, [pc, #124]	@ (8009cf0 <USBD_CDC_DeInit+0x100>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 020f 	and.w	r2, r3, #15
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	440b      	add	r3, r1
 8009c84:	3326      	adds	r3, #38	@ 0x26
 8009c86:	2200      	movs	r2, #0
 8009c88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	32b0      	adds	r2, #176	@ 0xb0
 8009c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d01f      	beq.n	8009cdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	33b0      	adds	r3, #176	@ 0xb0
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	32b0      	adds	r2, #176	@ 0xb0
 8009cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f002 fb2c 	bl	800c31c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	32b0      	adds	r2, #176	@ 0xb0
 8009cce:	2100      	movs	r1, #0
 8009cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	2000009b 	.word	0x2000009b
 8009cec:	2000009c 	.word	0x2000009c
 8009cf0:	2000009d 	.word	0x2000009d

08009cf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	32b0      	adds	r2, #176	@ 0xb0
 8009d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e0bf      	b.n	8009ea4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d050      	beq.n	8009dd2 <USBD_CDC_Setup+0xde>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	f040 80af 	bne.w	8009e94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	88db      	ldrh	r3, [r3, #6]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d03a      	beq.n	8009db4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	b25b      	sxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	da1b      	bge.n	8009d80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	33b0      	adds	r3, #176	@ 0xb0
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009d5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	88d2      	ldrh	r2, [r2, #6]
 8009d64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	88db      	ldrh	r3, [r3, #6]
 8009d6a:	2b07      	cmp	r3, #7
 8009d6c:	bf28      	it	cs
 8009d6e:	2307      	movcs	r3, #7
 8009d70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	89fa      	ldrh	r2, [r7, #14]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 fd2b 	bl	800b7d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009d7e:	e090      	b.n	8009ea2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	785a      	ldrb	r2, [r3, #1]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	88db      	ldrh	r3, [r3, #6]
 8009d8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d90:	d803      	bhi.n	8009d9a <USBD_CDC_Setup+0xa6>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	88db      	ldrh	r3, [r3, #6]
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	e000      	b.n	8009d9c <USBD_CDC_Setup+0xa8>
 8009d9a:	2240      	movs	r2, #64	@ 0x40
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009da2:	6939      	ldr	r1, [r7, #16]
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009daa:	461a      	mov	r2, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 fd3d 	bl	800b82c <USBD_CtlPrepareRx>
      break;
 8009db2:	e076      	b.n	8009ea2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	33b0      	adds	r3, #176	@ 0xb0
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	7850      	ldrb	r0, [r2, #1]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	4798      	blx	r3
      break;
 8009dd0:	e067      	b.n	8009ea2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	785b      	ldrb	r3, [r3, #1]
 8009dd6:	2b0b      	cmp	r3, #11
 8009dd8:	d851      	bhi.n	8009e7e <USBD_CDC_Setup+0x18a>
 8009dda:	a201      	add	r2, pc, #4	@ (adr r2, 8009de0 <USBD_CDC_Setup+0xec>)
 8009ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de0:	08009e11 	.word	0x08009e11
 8009de4:	08009e8d 	.word	0x08009e8d
 8009de8:	08009e7f 	.word	0x08009e7f
 8009dec:	08009e7f 	.word	0x08009e7f
 8009df0:	08009e7f 	.word	0x08009e7f
 8009df4:	08009e7f 	.word	0x08009e7f
 8009df8:	08009e7f 	.word	0x08009e7f
 8009dfc:	08009e7f 	.word	0x08009e7f
 8009e00:	08009e7f 	.word	0x08009e7f
 8009e04:	08009e7f 	.word	0x08009e7f
 8009e08:	08009e3b 	.word	0x08009e3b
 8009e0c:	08009e65 	.word	0x08009e65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d107      	bne.n	8009e2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e1c:	f107 030a 	add.w	r3, r7, #10
 8009e20:	2202      	movs	r2, #2
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 fcd5 	bl	800b7d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e2a:	e032      	b.n	8009e92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 fc53 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009e34:	2303      	movs	r3, #3
 8009e36:	75fb      	strb	r3, [r7, #23]
          break;
 8009e38:	e02b      	b.n	8009e92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d107      	bne.n	8009e56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e46:	f107 030d 	add.w	r3, r7, #13
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f001 fcc0 	bl	800b7d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e54:	e01d      	b.n	8009e92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fc3e 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	75fb      	strb	r3, [r7, #23]
          break;
 8009e62:	e016      	b.n	8009e92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d00f      	beq.n	8009e90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 fc31 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e7c:	e008      	b.n	8009e90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 fc2a 	bl	800b6da <USBD_CtlError>
          ret = USBD_FAIL;
 8009e86:	2303      	movs	r3, #3
 8009e88:	75fb      	strb	r3, [r7, #23]
          break;
 8009e8a:	e002      	b.n	8009e92 <USBD_CDC_Setup+0x19e>
          break;
 8009e8c:	bf00      	nop
 8009e8e:	e008      	b.n	8009ea2 <USBD_CDC_Setup+0x1ae>
          break;
 8009e90:	bf00      	nop
      }
      break;
 8009e92:	e006      	b.n	8009ea2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 fc1f 	bl	800b6da <USBD_CtlError>
      ret = USBD_FAIL;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	32b0      	adds	r2, #176	@ 0xb0
 8009eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e065      	b.n	8009fa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	32b0      	adds	r2, #176	@ 0xb0
 8009ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ee6:	78fb      	ldrb	r3, [r7, #3]
 8009ee8:	f003 020f 	and.w	r2, r3, #15
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	3318      	adds	r3, #24
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d02f      	beq.n	8009f60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	f003 020f 	and.w	r2, r3, #15
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	3318      	adds	r3, #24
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	78fb      	ldrb	r3, [r7, #3]
 8009f18:	f003 010f 	and.w	r1, r3, #15
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	440b      	add	r3, r1
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	4403      	add	r3, r0
 8009f28:	3320      	adds	r3, #32
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f30:	fb01 f303 	mul.w	r3, r1, r3
 8009f34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d112      	bne.n	8009f60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f3a:	78fb      	ldrb	r3, [r7, #3]
 8009f3c:	f003 020f 	and.w	r2, r3, #15
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	440b      	add	r3, r1
 8009f4c:	3318      	adds	r3, #24
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f52:	78f9      	ldrb	r1, [r7, #3]
 8009f54:	2300      	movs	r3, #0
 8009f56:	2200      	movs	r2, #0
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f002 f946 	bl	800c1ea <USBD_LL_Transmit>
 8009f5e:	e01f      	b.n	8009fa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	33b0      	adds	r3, #176	@ 0xb0
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d010      	beq.n	8009fa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	33b0      	adds	r3, #176	@ 0xb0
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009f9c:	78fa      	ldrb	r2, [r7, #3]
 8009f9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	32b0      	adds	r2, #176	@ 0xb0
 8009fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	32b0      	adds	r2, #176	@ 0xb0
 8009fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e01a      	b.n	800a012 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f002 f944 	bl	800c26e <USBD_LL_GetRxDataSize>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	33b0      	adds	r3, #176	@ 0xb0
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a00c:	4611      	mov	r1, r2
 800a00e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	32b0      	adds	r2, #176	@ 0xb0
 800a02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a030:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a038:	2303      	movs	r3, #3
 800a03a:	e024      	b.n	800a086 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	33b0      	adds	r3, #176	@ 0xb0
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d019      	beq.n	800a084 <USBD_CDC_EP0_RxReady+0x6a>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a056:	2bff      	cmp	r3, #255	@ 0xff
 800a058:	d014      	beq.n	800a084 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	33b0      	adds	r3, #176	@ 0xb0
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a072:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a07a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	22ff      	movs	r2, #255	@ 0xff
 800a080:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a098:	2182      	movs	r1, #130	@ 0x82
 800a09a:	4818      	ldr	r0, [pc, #96]	@ (800a0fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a09c:	f000 fcbd 	bl	800aa1a <USBD_GetEpDesc>
 800a0a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	4815      	ldr	r0, [pc, #84]	@ (800a0fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0a6:	f000 fcb8 	bl	800aa1a <USBD_GetEpDesc>
 800a0aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0ac:	2181      	movs	r1, #129	@ 0x81
 800a0ae:	4813      	ldr	r0, [pc, #76]	@ (800a0fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0b0:	f000 fcb3 	bl	800aa1a <USBD_GetEpDesc>
 800a0b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2210      	movs	r2, #16
 800a0c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d006      	beq.n	800a0d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0d0:	711a      	strb	r2, [r3, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d006      	beq.n	800a0ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0e4:	711a      	strb	r2, [r3, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2243      	movs	r2, #67	@ 0x43
 800a0ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0f0:	4b02      	ldr	r3, [pc, #8]	@ (800a0fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000058 	.word	0x20000058

0800a100 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a108:	2182      	movs	r1, #130	@ 0x82
 800a10a:	4818      	ldr	r0, [pc, #96]	@ (800a16c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a10c:	f000 fc85 	bl	800aa1a <USBD_GetEpDesc>
 800a110:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a112:	2101      	movs	r1, #1
 800a114:	4815      	ldr	r0, [pc, #84]	@ (800a16c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a116:	f000 fc80 	bl	800aa1a <USBD_GetEpDesc>
 800a11a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a11c:	2181      	movs	r1, #129	@ 0x81
 800a11e:	4813      	ldr	r0, [pc, #76]	@ (800a16c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a120:	f000 fc7b 	bl	800aa1a <USBD_GetEpDesc>
 800a124:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2210      	movs	r2, #16
 800a130:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d006      	beq.n	800a146 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2200      	movs	r2, #0
 800a13c:	711a      	strb	r2, [r3, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f042 0202 	orr.w	r2, r2, #2
 800a144:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d006      	beq.n	800a15a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	711a      	strb	r2, [r3, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f042 0202 	orr.w	r2, r2, #2
 800a158:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2243      	movs	r2, #67	@ 0x43
 800a15e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a160:	4b02      	ldr	r3, [pc, #8]	@ (800a16c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000058 	.word	0x20000058

0800a170 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a178:	2182      	movs	r1, #130	@ 0x82
 800a17a:	4818      	ldr	r0, [pc, #96]	@ (800a1dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a17c:	f000 fc4d 	bl	800aa1a <USBD_GetEpDesc>
 800a180:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a182:	2101      	movs	r1, #1
 800a184:	4815      	ldr	r0, [pc, #84]	@ (800a1dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a186:	f000 fc48 	bl	800aa1a <USBD_GetEpDesc>
 800a18a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a18c:	2181      	movs	r1, #129	@ 0x81
 800a18e:	4813      	ldr	r0, [pc, #76]	@ (800a1dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a190:	f000 fc43 	bl	800aa1a <USBD_GetEpDesc>
 800a194:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2210      	movs	r2, #16
 800a1a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d006      	beq.n	800a1b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1b0:	711a      	strb	r2, [r3, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d006      	beq.n	800a1ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1c4:	711a      	strb	r2, [r3, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2243      	movs	r2, #67	@ 0x43
 800a1ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1d0:	4b02      	ldr	r3, [pc, #8]	@ (800a1dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000058 	.word	0x20000058

0800a1e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	220a      	movs	r2, #10
 800a1ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a1ee:	4b03      	ldr	r3, [pc, #12]	@ (800a1fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	20000014 	.word	0x20000014

0800a200 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a210:	2303      	movs	r3, #3
 800a212:	e009      	b.n	800a228 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	33b0      	adds	r3, #176	@ 0xb0
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	32b0      	adds	r2, #176	@ 0xb0
 800a24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a256:	2303      	movs	r3, #3
 800a258:	e008      	b.n	800a26c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	371c      	adds	r7, #28
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	32b0      	adds	r2, #176	@ 0xb0
 800a28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a290:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a298:	2303      	movs	r3, #3
 800a29a:	e004      	b.n	800a2a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
	...

0800a2b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	32b0      	adds	r2, #176	@ 0xb0
 800a2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	e025      	b.n	800a326 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d11f      	bne.n	800a324 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a2ec:	4b10      	ldr	r3, [pc, #64]	@ (800a330 <USBD_CDC_TransmitPacket+0x7c>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	f003 020f 	and.w	r2, r3, #15
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4403      	add	r3, r0
 800a306:	3318      	adds	r3, #24
 800a308:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a30a:	4b09      	ldr	r3, [pc, #36]	@ (800a330 <USBD_CDC_TransmitPacket+0x7c>)
 800a30c:	7819      	ldrb	r1, [r3, #0]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 ff65 	bl	800c1ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a324:	7bfb      	ldrb	r3, [r7, #15]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	2000009b 	.word	0x2000009b

0800a334 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	32b0      	adds	r2, #176	@ 0xb0
 800a346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	32b0      	adds	r2, #176	@ 0xb0
 800a356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a35e:	2303      	movs	r3, #3
 800a360:	e018      	b.n	800a394 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	7c1b      	ldrb	r3, [r3, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10a      	bne.n	800a380 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a36a:	4b0c      	ldr	r3, [pc, #48]	@ (800a39c <USBD_CDC_ReceivePacket+0x68>)
 800a36c:	7819      	ldrb	r1, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 ff57 	bl	800c22c <USBD_LL_PrepareReceive>
 800a37e:	e008      	b.n	800a392 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a380:	4b06      	ldr	r3, [pc, #24]	@ (800a39c <USBD_CDC_ReceivePacket+0x68>)
 800a382:	7819      	ldrb	r1, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a38a:	2340      	movs	r3, #64	@ 0x40
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 ff4d 	bl	800c22c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	2000009c 	.word	0x2000009c

0800a3a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e01f      	b.n	800a3f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	79fa      	ldrb	r2, [r7, #7]
 800a3ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f001 fdb1 	bl	800bf54 <USBD_LL_Init>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a414:	2303      	movs	r3, #3
 800a416:	e025      	b.n	800a464 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	32ae      	adds	r2, #174	@ 0xae
 800a42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00f      	beq.n	800a454 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	32ae      	adds	r2, #174	@ 0xae
 800a43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a444:	f107 020e 	add.w	r2, r7, #14
 800a448:	4610      	mov	r0, r2
 800a44a:	4798      	blx	r3
 800a44c:	4602      	mov	r2, r0
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f001 fdcf 	bl	800c018 <USBD_LL_Start>
 800a47a:	4603      	mov	r3, r0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a48c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d009      	beq.n	800a4c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	78fa      	ldrb	r2, [r7, #3]
 800a4be:	4611      	mov	r1, r2
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	4798      	blx	r3
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f001 f8a4 	bl	800b666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a52c:	461a      	mov	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a53a:	f003 031f 	and.w	r3, r3, #31
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d01a      	beq.n	800a578 <USBD_LL_SetupStage+0x72>
 800a542:	2b02      	cmp	r3, #2
 800a544:	d822      	bhi.n	800a58c <USBD_LL_SetupStage+0x86>
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <USBD_LL_SetupStage+0x4a>
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d00a      	beq.n	800a564 <USBD_LL_SetupStage+0x5e>
 800a54e:	e01d      	b.n	800a58c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fad1 	bl	800ab00 <USBD_StdDevReq>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]
      break;
 800a562:	e020      	b.n	800a5a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fb39 	bl	800abe4 <USBD_StdItfReq>
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]
      break;
 800a576:	e016      	b.n	800a5a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fb9b 	bl	800acbc <USBD_StdEPReq>
 800a586:	4603      	mov	r3, r0
 800a588:	73fb      	strb	r3, [r7, #15]
      break;
 800a58a:	e00c      	b.n	800a5a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a592:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a596:	b2db      	uxtb	r3, r3
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 fd9c 	bl	800c0d8 <USBD_LL_StallEP>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a4:	bf00      	nop
  }

  return ret;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a5c2:	7afb      	ldrb	r3, [r7, #11]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d16e      	bne.n	800a6a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a5ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	f040 8098 	bne.w	800a70c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d913      	bls.n	800a610 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	1ad2      	subs	r2, r2, r3
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	68da      	ldr	r2, [r3, #12]
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	4293      	cmp	r3, r2
 800a600:	bf28      	it	cs
 800a602:	4613      	movcs	r3, r2
 800a604:	461a      	mov	r2, r3
 800a606:	6879      	ldr	r1, [r7, #4]
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f001 f92c 	bl	800b866 <USBD_CtlContinueRx>
 800a60e:	e07d      	b.n	800a70c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a616:	f003 031f 	and.w	r3, r3, #31
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d014      	beq.n	800a648 <USBD_LL_DataOutStage+0x98>
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d81d      	bhi.n	800a65e <USBD_LL_DataOutStage+0xae>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <USBD_LL_DataOutStage+0x7c>
 800a626:	2b01      	cmp	r3, #1
 800a628:	d003      	beq.n	800a632 <USBD_LL_DataOutStage+0x82>
 800a62a:	e018      	b.n	800a65e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	75bb      	strb	r3, [r7, #22]
            break;
 800a630:	e018      	b.n	800a664 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	4619      	mov	r1, r3
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 f9d2 	bl	800a9e6 <USBD_CoreFindIF>
 800a642:	4603      	mov	r3, r0
 800a644:	75bb      	strb	r3, [r7, #22]
            break;
 800a646:	e00d      	b.n	800a664 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	4619      	mov	r1, r3
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 f9d4 	bl	800aa00 <USBD_CoreFindEP>
 800a658:	4603      	mov	r3, r0
 800a65a:	75bb      	strb	r3, [r7, #22]
            break;
 800a65c:	e002      	b.n	800a664 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a65e:	2300      	movs	r3, #0
 800a660:	75bb      	strb	r3, [r7, #22]
            break;
 800a662:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a664:	7dbb      	ldrb	r3, [r7, #22]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d119      	bne.n	800a69e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b03      	cmp	r3, #3
 800a674:	d113      	bne.n	800a69e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a676:	7dba      	ldrb	r2, [r7, #22]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	32ae      	adds	r2, #174	@ 0xae
 800a67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00b      	beq.n	800a69e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a686:	7dba      	ldrb	r2, [r7, #22]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a68e:	7dba      	ldrb	r2, [r7, #22]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	32ae      	adds	r2, #174	@ 0xae
 800a694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f001 f8f2 	bl	800b888 <USBD_CtlSendStatus>
 800a6a4:	e032      	b.n	800a70c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a6a6:	7afb      	ldrb	r3, [r7, #11]
 800a6a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f9a5 	bl	800aa00 <USBD_CoreFindEP>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6ba:	7dbb      	ldrb	r3, [r7, #22]
 800a6bc:	2bff      	cmp	r3, #255	@ 0xff
 800a6be:	d025      	beq.n	800a70c <USBD_LL_DataOutStage+0x15c>
 800a6c0:	7dbb      	ldrb	r3, [r7, #22]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d122      	bne.n	800a70c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d117      	bne.n	800a702 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a6d2:	7dba      	ldrb	r2, [r7, #22]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	32ae      	adds	r2, #174	@ 0xae
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00f      	beq.n	800a702 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a6e2:	7dba      	ldrb	r2, [r7, #22]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a6ea:	7dba      	ldrb	r2, [r7, #22]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	32ae      	adds	r2, #174	@ 0xae
 800a6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	7afa      	ldrb	r2, [r7, #11]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	4798      	blx	r3
 800a6fe:	4603      	mov	r3, r0
 800a700:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a708:	7dfb      	ldrb	r3, [r7, #23]
 800a70a:	e000      	b.n	800a70e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b086      	sub	sp, #24
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	460b      	mov	r3, r1
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a724:	7afb      	ldrb	r3, [r7, #11]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d16f      	bne.n	800a80a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3314      	adds	r3, #20
 800a72e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a736:	2b02      	cmp	r3, #2
 800a738:	d15a      	bne.n	800a7f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	689a      	ldr	r2, [r3, #8]
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	429a      	cmp	r2, r3
 800a744:	d914      	bls.n	800a770 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	689a      	ldr	r2, [r3, #8]
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	1ad2      	subs	r2, r2, r3
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	461a      	mov	r2, r3
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f001 f854 	bl	800b80a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a762:	2300      	movs	r3, #0
 800a764:	2200      	movs	r2, #0
 800a766:	2100      	movs	r1, #0
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f001 fd5f 	bl	800c22c <USBD_LL_PrepareReceive>
 800a76e:	e03f      	b.n	800a7f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d11c      	bne.n	800a7b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a784:	429a      	cmp	r2, r3
 800a786:	d316      	bcc.n	800a7b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a792:	429a      	cmp	r2, r3
 800a794:	d20f      	bcs.n	800a7b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a796:	2200      	movs	r2, #0
 800a798:	2100      	movs	r1, #0
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f001 f835 	bl	800b80a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f001 fd3c 	bl	800c22c <USBD_LL_PrepareReceive>
 800a7b4:	e01c      	b.n	800a7f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d10f      	bne.n	800a7e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d009      	beq.n	800a7e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7e2:	2180      	movs	r1, #128	@ 0x80
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f001 fc77 	bl	800c0d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f001 f85f 	bl	800b8ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d03a      	beq.n	800a870 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f7ff fe42 	bl	800a484 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a808:	e032      	b.n	800a870 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a80a:	7afb      	ldrb	r3, [r7, #11]
 800a80c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a810:	b2db      	uxtb	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 f8f3 	bl	800aa00 <USBD_CoreFindEP>
 800a81a:	4603      	mov	r3, r0
 800a81c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	2bff      	cmp	r3, #255	@ 0xff
 800a822:	d025      	beq.n	800a870 <USBD_LL_DataInStage+0x15a>
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d122      	bne.n	800a870 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b03      	cmp	r3, #3
 800a834:	d11c      	bne.n	800a870 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a836:	7dfa      	ldrb	r2, [r7, #23]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	32ae      	adds	r2, #174	@ 0xae
 800a83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d014      	beq.n	800a870 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a846:	7dfa      	ldrb	r2, [r7, #23]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a84e:	7dfa      	ldrb	r2, [r7, #23]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	32ae      	adds	r2, #174	@ 0xae
 800a854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	7afa      	ldrb	r2, [r7, #11]
 800a85c:	4611      	mov	r1, r2
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	4798      	blx	r3
 800a862:	4603      	mov	r3, r0
 800a864:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a866:	7dbb      	ldrb	r3, [r7, #22]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a86c:	7dbb      	ldrb	r3, [r7, #22]
 800a86e:	e000      	b.n	800a872 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d014      	beq.n	800a8e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00e      	beq.n	800a8e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6852      	ldr	r2, [r2, #4]
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8e0:	2340      	movs	r3, #64	@ 0x40
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f001 fbb1 	bl	800c04e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2240      	movs	r2, #64	@ 0x40
 800a8f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8fc:	2340      	movs	r3, #64	@ 0x40
 800a8fe:	2200      	movs	r2, #0
 800a900:	2180      	movs	r1, #128	@ 0x80
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 fba3 	bl	800c04e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2240      	movs	r2, #64	@ 0x40
 800a912:	621a      	str	r2, [r3, #32]

  return ret;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	460b      	mov	r3, r1
 800a928:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	78fa      	ldrb	r2, [r7, #3]
 800a92e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b04      	cmp	r3, #4
 800a950:	d006      	beq.n	800a960 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2204      	movs	r2, #4
 800a964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b04      	cmp	r3, #4
 800a988:	d106      	bne.n	800a998 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a990:	b2da      	uxtb	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d110      	bne.n	800a9dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00b      	beq.n	800a9dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ca:	69db      	ldr	r3, [r3, #28]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b086      	sub	sp, #24
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	460b      	mov	r3, r1
 800aa24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	885b      	ldrh	r3, [r3, #2]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	7812      	ldrb	r2, [r2, #0]
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d91f      	bls.n	800aa80 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa46:	e013      	b.n	800aa70 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa48:	f107 030a 	add.w	r3, r7, #10
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6978      	ldr	r0, [r7, #20]
 800aa50:	f000 f81b 	bl	800aa8a <USBD_GetNextDesc>
 800aa54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	785b      	ldrb	r3, [r3, #1]
 800aa5a:	2b05      	cmp	r3, #5
 800aa5c:	d108      	bne.n	800aa70 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	789b      	ldrb	r3, [r3, #2]
 800aa66:	78fa      	ldrb	r2, [r7, #3]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d008      	beq.n	800aa7e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	885b      	ldrh	r3, [r3, #2]
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	897b      	ldrh	r3, [r7, #10]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d8e5      	bhi.n	800aa48 <USBD_GetEpDesc+0x2e>
 800aa7c:	e000      	b.n	800aa80 <USBD_GetEpDesc+0x66>
          break;
 800aa7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa80:	693b      	ldr	r3, [r7, #16]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	7812      	ldrb	r2, [r2, #0]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aab4:	68fb      	ldr	r3, [r7, #12]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b087      	sub	sp, #28
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3301      	adds	r3, #1
 800aad8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aae0:	8a3b      	ldrh	r3, [r7, #16]
 800aae2:	021b      	lsls	r3, r3, #8
 800aae4:	b21a      	sxth	r2, r3
 800aae6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	b21b      	sxth	r3, r3
 800aaee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aaf0:	89fb      	ldrh	r3, [r7, #14]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
	...

0800ab00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab16:	2b40      	cmp	r3, #64	@ 0x40
 800ab18:	d005      	beq.n	800ab26 <USBD_StdDevReq+0x26>
 800ab1a:	2b40      	cmp	r3, #64	@ 0x40
 800ab1c:	d857      	bhi.n	800abce <USBD_StdDevReq+0xce>
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00f      	beq.n	800ab42 <USBD_StdDevReq+0x42>
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d153      	bne.n	800abce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	32ae      	adds	r2, #174	@ 0xae
 800ab30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	4798      	blx	r3
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab40:	e04a      	b.n	800abd8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	2b09      	cmp	r3, #9
 800ab48:	d83b      	bhi.n	800abc2 <USBD_StdDevReq+0xc2>
 800ab4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab50 <USBD_StdDevReq+0x50>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800aba5 	.word	0x0800aba5
 800ab54:	0800abb9 	.word	0x0800abb9
 800ab58:	0800abc3 	.word	0x0800abc3
 800ab5c:	0800abaf 	.word	0x0800abaf
 800ab60:	0800abc3 	.word	0x0800abc3
 800ab64:	0800ab83 	.word	0x0800ab83
 800ab68:	0800ab79 	.word	0x0800ab79
 800ab6c:	0800abc3 	.word	0x0800abc3
 800ab70:	0800ab9b 	.word	0x0800ab9b
 800ab74:	0800ab8d 	.word	0x0800ab8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa3c 	bl	800aff8 <USBD_GetDescriptor>
          break;
 800ab80:	e024      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fbcb 	bl	800b320 <USBD_SetAddress>
          break;
 800ab8a:	e01f      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fc0a 	bl	800b3a8 <USBD_SetConfig>
 800ab94:	4603      	mov	r3, r0
 800ab96:	73fb      	strb	r3, [r7, #15]
          break;
 800ab98:	e018      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fcad 	bl	800b4fc <USBD_GetConfig>
          break;
 800aba2:	e013      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fcde 	bl	800b568 <USBD_GetStatus>
          break;
 800abac:	e00e      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fd0d 	bl	800b5d0 <USBD_SetFeature>
          break;
 800abb6:	e009      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fd31 	bl	800b622 <USBD_ClrFeature>
          break;
 800abc0:	e004      	b.n	800abcc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fd88 	bl	800b6da <USBD_CtlError>
          break;
 800abca:	bf00      	nop
      }
      break;
 800abcc:	e004      	b.n	800abd8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fd82 	bl	800b6da <USBD_CtlError>
      break;
 800abd6:	bf00      	nop
  }

  return ret;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop

0800abe4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abfa:	2b40      	cmp	r3, #64	@ 0x40
 800abfc:	d005      	beq.n	800ac0a <USBD_StdItfReq+0x26>
 800abfe:	2b40      	cmp	r3, #64	@ 0x40
 800ac00:	d852      	bhi.n	800aca8 <USBD_StdItfReq+0xc4>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <USBD_StdItfReq+0x26>
 800ac06:	2b20      	cmp	r3, #32
 800ac08:	d14e      	bne.n	800aca8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	3b01      	subs	r3, #1
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d840      	bhi.n	800ac9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	889b      	ldrh	r3, [r3, #4]
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d836      	bhi.n	800ac90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	889b      	ldrh	r3, [r3, #4]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff fedb 	bl	800a9e6 <USBD_CoreFindIF>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	2bff      	cmp	r3, #255	@ 0xff
 800ac38:	d01d      	beq.n	800ac76 <USBD_StdItfReq+0x92>
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d11a      	bne.n	800ac76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac40:	7bba      	ldrb	r2, [r7, #14]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	32ae      	adds	r2, #174	@ 0xae
 800ac46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00f      	beq.n	800ac70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac50:	7bba      	ldrb	r2, [r7, #14]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac58:	7bba      	ldrb	r2, [r7, #14]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	32ae      	adds	r2, #174	@ 0xae
 800ac5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac6e:	e004      	b.n	800ac7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac70:	2303      	movs	r3, #3
 800ac72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac74:	e001      	b.n	800ac7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac76:	2303      	movs	r3, #3
 800ac78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	88db      	ldrh	r3, [r3, #6]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d110      	bne.n	800aca4 <USBD_StdItfReq+0xc0>
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10d      	bne.n	800aca4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fdfd 	bl	800b888 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac8e:	e009      	b.n	800aca4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fd21 	bl	800b6da <USBD_CtlError>
          break;
 800ac98:	e004      	b.n	800aca4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fd1c 	bl	800b6da <USBD_CtlError>
          break;
 800aca2:	e000      	b.n	800aca6 <USBD_StdItfReq+0xc2>
          break;
 800aca4:	bf00      	nop
      }
      break;
 800aca6:	e004      	b.n	800acb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fd15 	bl	800b6da <USBD_CtlError>
      break;
 800acb0:	bf00      	nop
  }

  return ret;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	889b      	ldrh	r3, [r3, #4]
 800acce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acd8:	2b40      	cmp	r3, #64	@ 0x40
 800acda:	d007      	beq.n	800acec <USBD_StdEPReq+0x30>
 800acdc:	2b40      	cmp	r3, #64	@ 0x40
 800acde:	f200 817f 	bhi.w	800afe0 <USBD_StdEPReq+0x324>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d02a      	beq.n	800ad3c <USBD_StdEPReq+0x80>
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	f040 817a 	bne.w	800afe0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff fe85 	bl	800aa00 <USBD_CoreFindEP>
 800acf6:	4603      	mov	r3, r0
 800acf8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acfa:	7b7b      	ldrb	r3, [r7, #13]
 800acfc:	2bff      	cmp	r3, #255	@ 0xff
 800acfe:	f000 8174 	beq.w	800afea <USBD_StdEPReq+0x32e>
 800ad02:	7b7b      	ldrb	r3, [r7, #13]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f040 8170 	bne.w	800afea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad0a:	7b7a      	ldrb	r2, [r7, #13]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad12:	7b7a      	ldrb	r2, [r7, #13]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	32ae      	adds	r2, #174	@ 0xae
 800ad18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 8163 	beq.w	800afea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad24:	7b7a      	ldrb	r2, [r7, #13]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	32ae      	adds	r2, #174	@ 0xae
 800ad2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	4798      	blx	r3
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad3a:	e156      	b.n	800afea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	785b      	ldrb	r3, [r3, #1]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d008      	beq.n	800ad56 <USBD_StdEPReq+0x9a>
 800ad44:	2b03      	cmp	r3, #3
 800ad46:	f300 8145 	bgt.w	800afd4 <USBD_StdEPReq+0x318>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 809b 	beq.w	800ae86 <USBD_StdEPReq+0x1ca>
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d03c      	beq.n	800adce <USBD_StdEPReq+0x112>
 800ad54:	e13e      	b.n	800afd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d002      	beq.n	800ad68 <USBD_StdEPReq+0xac>
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	d016      	beq.n	800ad94 <USBD_StdEPReq+0xd8>
 800ad66:	e02c      	b.n	800adc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00d      	beq.n	800ad8a <USBD_StdEPReq+0xce>
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
 800ad70:	2b80      	cmp	r3, #128	@ 0x80
 800ad72:	d00a      	beq.n	800ad8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f001 f9ad 	bl	800c0d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad7e:	2180      	movs	r1, #128	@ 0x80
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 f9a9 	bl	800c0d8 <USBD_LL_StallEP>
 800ad86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad88:	e020      	b.n	800adcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fca4 	bl	800b6da <USBD_CtlError>
              break;
 800ad92:	e01b      	b.n	800adcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	885b      	ldrh	r3, [r3, #2]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10e      	bne.n	800adba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <USBD_StdEPReq+0xfe>
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	2b80      	cmp	r3, #128	@ 0x80
 800ada6:	d008      	beq.n	800adba <USBD_StdEPReq+0xfe>
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	88db      	ldrh	r3, [r3, #6]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d104      	bne.n	800adba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 f98f 	bl	800c0d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fd64 	bl	800b888 <USBD_CtlSendStatus>

              break;
 800adc0:	e004      	b.n	800adcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fc88 	bl	800b6da <USBD_CtlError>
              break;
 800adca:	bf00      	nop
          }
          break;
 800adcc:	e107      	b.n	800afde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b02      	cmp	r3, #2
 800add8:	d002      	beq.n	800ade0 <USBD_StdEPReq+0x124>
 800adda:	2b03      	cmp	r3, #3
 800addc:	d016      	beq.n	800ae0c <USBD_StdEPReq+0x150>
 800adde:	e04b      	b.n	800ae78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00d      	beq.n	800ae02 <USBD_StdEPReq+0x146>
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	2b80      	cmp	r3, #128	@ 0x80
 800adea:	d00a      	beq.n	800ae02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f001 f971 	bl	800c0d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adf6:	2180      	movs	r1, #128	@ 0x80
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 f96d 	bl	800c0d8 <USBD_LL_StallEP>
 800adfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae00:	e040      	b.n	800ae84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fc68 	bl	800b6da <USBD_CtlError>
              break;
 800ae0a:	e03b      	b.n	800ae84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	885b      	ldrh	r3, [r3, #2]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d136      	bne.n	800ae82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae14:	7bbb      	ldrb	r3, [r7, #14]
 800ae16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 f977 	bl	800c116 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fd2d 	bl	800b888 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fde4 	bl	800aa00 <USBD_CoreFindEP>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae3c:	7b7b      	ldrb	r3, [r7, #13]
 800ae3e:	2bff      	cmp	r3, #255	@ 0xff
 800ae40:	d01f      	beq.n	800ae82 <USBD_StdEPReq+0x1c6>
 800ae42:	7b7b      	ldrb	r3, [r7, #13]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d11c      	bne.n	800ae82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae48:	7b7a      	ldrb	r2, [r7, #13]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae50:	7b7a      	ldrb	r2, [r7, #13]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32ae      	adds	r2, #174	@ 0xae
 800ae56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d010      	beq.n	800ae82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae60:	7b7a      	ldrb	r2, [r7, #13]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	32ae      	adds	r2, #174	@ 0xae
 800ae66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	4798      	blx	r3
 800ae72:	4603      	mov	r3, r0
 800ae74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae76:	e004      	b.n	800ae82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fc2d 	bl	800b6da <USBD_CtlError>
              break;
 800ae80:	e000      	b.n	800ae84 <USBD_StdEPReq+0x1c8>
              break;
 800ae82:	bf00      	nop
          }
          break;
 800ae84:	e0ab      	b.n	800afde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d002      	beq.n	800ae98 <USBD_StdEPReq+0x1dc>
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d032      	beq.n	800aefc <USBD_StdEPReq+0x240>
 800ae96:	e097      	b.n	800afc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d007      	beq.n	800aeae <USBD_StdEPReq+0x1f2>
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
 800aea0:	2b80      	cmp	r3, #128	@ 0x80
 800aea2:	d004      	beq.n	800aeae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fc17 	bl	800b6da <USBD_CtlError>
                break;
 800aeac:	e091      	b.n	800afd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da0b      	bge.n	800aece <USBD_StdEPReq+0x212>
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aebc:	4613      	mov	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	3310      	adds	r3, #16
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	4413      	add	r3, r2
 800aeca:	3304      	adds	r3, #4
 800aecc:	e00b      	b.n	800aee6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	3304      	adds	r3, #4
 800aee6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2202      	movs	r2, #2
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fc6d 	bl	800b7d4 <USBD_CtlSendData>
              break;
 800aefa:	e06a      	b.n	800afd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aefc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af00:	2b00      	cmp	r3, #0
 800af02:	da11      	bge.n	800af28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af04:	7bbb      	ldrb	r3, [r7, #14]
 800af06:	f003 020f 	and.w	r2, r3, #15
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	440b      	add	r3, r1
 800af16:	3324      	adds	r3, #36	@ 0x24
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d117      	bne.n	800af4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fbda 	bl	800b6da <USBD_CtlError>
                  break;
 800af26:	e054      	b.n	800afd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	f003 020f 	and.w	r2, r3, #15
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d104      	bne.n	800af4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fbc7 	bl	800b6da <USBD_CtlError>
                  break;
 800af4c:	e041      	b.n	800afd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af52:	2b00      	cmp	r3, #0
 800af54:	da0b      	bge.n	800af6e <USBD_StdEPReq+0x2b2>
 800af56:	7bbb      	ldrb	r3, [r7, #14]
 800af58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af5c:	4613      	mov	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	3310      	adds	r3, #16
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	4413      	add	r3, r2
 800af6a:	3304      	adds	r3, #4
 800af6c:	e00b      	b.n	800af86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af74:	4613      	mov	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	4413      	add	r3, r2
 800af84:	3304      	adds	r3, #4
 800af86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <USBD_StdEPReq+0x2d8>
 800af8e:	7bbb      	ldrb	r3, [r7, #14]
 800af90:	2b80      	cmp	r3, #128	@ 0x80
 800af92:	d103      	bne.n	800af9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	e00e      	b.n	800afba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 f8d7 	bl	800c154 <USBD_LL_IsStallEP>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	e002      	b.n	800afba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2202      	movs	r2, #2
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fc07 	bl	800b7d4 <USBD_CtlSendData>
              break;
 800afc6:	e004      	b.n	800afd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fb85 	bl	800b6da <USBD_CtlError>
              break;
 800afd0:	bf00      	nop
          }
          break;
 800afd2:	e004      	b.n	800afde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fb7f 	bl	800b6da <USBD_CtlError>
          break;
 800afdc:	bf00      	nop
      }
      break;
 800afde:	e005      	b.n	800afec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fb79 	bl	800b6da <USBD_CtlError>
      break;
 800afe8:	e000      	b.n	800afec <USBD_StdEPReq+0x330>
      break;
 800afea:	bf00      	nop
  }

  return ret;
 800afec:	7bfb      	ldrb	r3, [r7, #15]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b002:	2300      	movs	r3, #0
 800b004:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b006:	2300      	movs	r3, #0
 800b008:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	885b      	ldrh	r3, [r3, #2]
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	b29b      	uxth	r3, r3
 800b016:	3b01      	subs	r3, #1
 800b018:	2b0e      	cmp	r3, #14
 800b01a:	f200 8152 	bhi.w	800b2c2 <USBD_GetDescriptor+0x2ca>
 800b01e:	a201      	add	r2, pc, #4	@ (adr r2, 800b024 <USBD_GetDescriptor+0x2c>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b095 	.word	0x0800b095
 800b028:	0800b0ad 	.word	0x0800b0ad
 800b02c:	0800b0ed 	.word	0x0800b0ed
 800b030:	0800b2c3 	.word	0x0800b2c3
 800b034:	0800b2c3 	.word	0x0800b2c3
 800b038:	0800b263 	.word	0x0800b263
 800b03c:	0800b28f 	.word	0x0800b28f
 800b040:	0800b2c3 	.word	0x0800b2c3
 800b044:	0800b2c3 	.word	0x0800b2c3
 800b048:	0800b2c3 	.word	0x0800b2c3
 800b04c:	0800b2c3 	.word	0x0800b2c3
 800b050:	0800b2c3 	.word	0x0800b2c3
 800b054:	0800b2c3 	.word	0x0800b2c3
 800b058:	0800b2c3 	.word	0x0800b2c3
 800b05c:	0800b061 	.word	0x0800b061
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	7c12      	ldrb	r2, [r2, #16]
 800b078:	f107 0108 	add.w	r1, r7, #8
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b082:	e126      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fb27 	bl	800b6da <USBD_CtlError>
        err++;
 800b08c:	7afb      	ldrb	r3, [r7, #11]
 800b08e:	3301      	adds	r3, #1
 800b090:	72fb      	strb	r3, [r7, #11]
      break;
 800b092:	e11e      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	7c12      	ldrb	r2, [r2, #16]
 800b0a0:	f107 0108 	add.w	r1, r7, #8
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	4798      	blx	r3
 800b0a8:	60f8      	str	r0, [r7, #12]
      break;
 800b0aa:	e112      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	7c1b      	ldrb	r3, [r3, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10d      	bne.n	800b0d0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0bc:	f107 0208 	add.w	r2, r7, #8
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4798      	blx	r3
 800b0c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0ce:	e100      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d8:	f107 0208 	add.w	r2, r7, #8
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	701a      	strb	r2, [r3, #0]
      break;
 800b0ea:	e0f2      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	885b      	ldrh	r3, [r3, #2]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	f200 80ac 	bhi.w	800b250 <USBD_GetDescriptor+0x258>
 800b0f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b100 <USBD_GetDescriptor+0x108>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b119 	.word	0x0800b119
 800b104:	0800b14d 	.word	0x0800b14d
 800b108:	0800b181 	.word	0x0800b181
 800b10c:	0800b1b5 	.word	0x0800b1b5
 800b110:	0800b1e9 	.word	0x0800b1e9
 800b114:	0800b21d 	.word	0x0800b21d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	7c12      	ldrb	r2, [r2, #16]
 800b130:	f107 0108 	add.w	r1, r7, #8
 800b134:	4610      	mov	r0, r2
 800b136:	4798      	blx	r3
 800b138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b13a:	e091      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 facb 	bl	800b6da <USBD_CtlError>
            err++;
 800b144:	7afb      	ldrb	r3, [r7, #11]
 800b146:	3301      	adds	r3, #1
 800b148:	72fb      	strb	r3, [r7, #11]
          break;
 800b14a:	e089      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00b      	beq.n	800b170 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	7c12      	ldrb	r2, [r2, #16]
 800b164:	f107 0108 	add.w	r1, r7, #8
 800b168:	4610      	mov	r0, r2
 800b16a:	4798      	blx	r3
 800b16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b16e:	e077      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fab1 	bl	800b6da <USBD_CtlError>
            err++;
 800b178:	7afb      	ldrb	r3, [r7, #11]
 800b17a:	3301      	adds	r3, #1
 800b17c:	72fb      	strb	r3, [r7, #11]
          break;
 800b17e:	e06f      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00b      	beq.n	800b1a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	7c12      	ldrb	r2, [r2, #16]
 800b198:	f107 0108 	add.w	r1, r7, #8
 800b19c:	4610      	mov	r0, r2
 800b19e:	4798      	blx	r3
 800b1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a2:	e05d      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa97 	bl	800b6da <USBD_CtlError>
            err++;
 800b1ac:	7afb      	ldrb	r3, [r7, #11]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b2:	e055      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	7c12      	ldrb	r2, [r2, #16]
 800b1cc:	f107 0108 	add.w	r1, r7, #8
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	4798      	blx	r3
 800b1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1d6:	e043      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fa7d 	bl	800b6da <USBD_CtlError>
            err++;
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1e6:	e03b      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00b      	beq.n	800b20c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	7c12      	ldrb	r2, [r2, #16]
 800b200:	f107 0108 	add.w	r1, r7, #8
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20a:	e029      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa63 	bl	800b6da <USBD_CtlError>
            err++;
 800b214:	7afb      	ldrb	r3, [r7, #11]
 800b216:	3301      	adds	r3, #1
 800b218:	72fb      	strb	r3, [r7, #11]
          break;
 800b21a:	e021      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00b      	beq.n	800b240 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	7c12      	ldrb	r2, [r2, #16]
 800b234:	f107 0108 	add.w	r1, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b23e:	e00f      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fa49 	bl	800b6da <USBD_CtlError>
            err++;
 800b248:	7afb      	ldrb	r3, [r7, #11]
 800b24a:	3301      	adds	r3, #1
 800b24c:	72fb      	strb	r3, [r7, #11]
          break;
 800b24e:	e007      	b.n	800b260 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fa41 	bl	800b6da <USBD_CtlError>
          err++;
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	3301      	adds	r3, #1
 800b25c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b25e:	bf00      	nop
      }
      break;
 800b260:	e037      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	7c1b      	ldrb	r3, [r3, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d109      	bne.n	800b27e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b272:	f107 0208 	add.w	r2, r7, #8
 800b276:	4610      	mov	r0, r2
 800b278:	4798      	blx	r3
 800b27a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b27c:	e029      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fa2a 	bl	800b6da <USBD_CtlError>
        err++;
 800b286:	7afb      	ldrb	r3, [r7, #11]
 800b288:	3301      	adds	r3, #1
 800b28a:	72fb      	strb	r3, [r7, #11]
      break;
 800b28c:	e021      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7c1b      	ldrb	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10d      	bne.n	800b2b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b29e:	f107 0208 	add.w	r2, r7, #8
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	4798      	blx	r3
 800b2a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	2207      	movs	r2, #7
 800b2ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2b0:	e00f      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fa10 	bl	800b6da <USBD_CtlError>
        err++;
 800b2ba:	7afb      	ldrb	r3, [r7, #11]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	72fb      	strb	r3, [r7, #11]
      break;
 800b2c0:	e007      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa08 	bl	800b6da <USBD_CtlError>
      err++;
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d0:	bf00      	nop
  }

  if (err != 0U)
 800b2d2:	7afb      	ldrb	r3, [r7, #11]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d11e      	bne.n	800b316 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	88db      	ldrh	r3, [r3, #6]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d016      	beq.n	800b30e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b2e0:	893b      	ldrh	r3, [r7, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00e      	beq.n	800b304 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	88da      	ldrh	r2, [r3, #6]
 800b2ea:	893b      	ldrh	r3, [r7, #8]
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	bf28      	it	cs
 800b2f0:	4613      	movcs	r3, r2
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2f6:	893b      	ldrh	r3, [r7, #8]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fa69 	bl	800b7d4 <USBD_CtlSendData>
 800b302:	e009      	b.n	800b318 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f9e7 	bl	800b6da <USBD_CtlError>
 800b30c:	e004      	b.n	800b318 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 faba 	bl	800b888 <USBD_CtlSendStatus>
 800b314:	e000      	b.n	800b318 <USBD_GetDescriptor+0x320>
    return;
 800b316:	bf00      	nop
  }
}
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop

0800b320 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	889b      	ldrh	r3, [r3, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d131      	bne.n	800b396 <USBD_SetAddress+0x76>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88db      	ldrh	r3, [r3, #6]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d12d      	bne.n	800b396 <USBD_SetAddress+0x76>
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	885b      	ldrh	r3, [r3, #2]
 800b33e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b340:	d829      	bhi.n	800b396 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	885b      	ldrh	r3, [r3, #2]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b34c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b03      	cmp	r3, #3
 800b358:	d104      	bne.n	800b364 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f9bc 	bl	800b6da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b362:	e01d      	b.n	800b3a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	7bfa      	ldrb	r2, [r7, #15]
 800b368:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 ff1b 	bl	800c1ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa86 	bl	800b888 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d004      	beq.n	800b38c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2202      	movs	r2, #2
 800b386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38a:	e009      	b.n	800b3a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b394:	e004      	b.n	800b3a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f99e 	bl	800b6da <USBD_CtlError>
  }
}
 800b39e:	bf00      	nop
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	885b      	ldrh	r3, [r3, #2]
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	4b4e      	ldr	r3, [pc, #312]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d905      	bls.n	800b3d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f985 	bl	800b6da <USBD_CtlError>
    return USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e08c      	b.n	800b4ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d002      	beq.n	800b3e6 <USBD_SetConfig+0x3e>
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d029      	beq.n	800b438 <USBD_SetConfig+0x90>
 800b3e4:	e075      	b.n	800b4d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3e6:	4b44      	ldr	r3, [pc, #272]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d020      	beq.n	800b430 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3ee:	4b42      	ldr	r3, [pc, #264]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3f8:	4b3f      	ldr	r3, [pc, #252]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff f84b 	bl	800a49a <USBD_SetClassConfig>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f962 	bl	800b6da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b41e:	e065      	b.n	800b4ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fa31 	bl	800b888 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2203      	movs	r2, #3
 800b42a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b42e:	e05d      	b.n	800b4ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa29 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b436:	e059      	b.n	800b4ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b438:	4b2f      	ldr	r3, [pc, #188]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d112      	bne.n	800b466 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b448:	4b2b      	ldr	r3, [pc, #172]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	461a      	mov	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b452:	4b29      	ldr	r3, [pc, #164]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff f83a 	bl	800a4d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fa12 	bl	800b888 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b464:	e042      	b.n	800b4ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b466:	4b24      	ldr	r3, [pc, #144]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	429a      	cmp	r2, r3
 800b472:	d02a      	beq.n	800b4ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff f828 	bl	800a4d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b482:	4b1d      	ldr	r3, [pc, #116]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b48c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff f801 	bl	800a49a <USBD_SetClassConfig>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00f      	beq.n	800b4c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f918 	bl	800b6da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7ff f80d 	bl	800a4d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4c0:	e014      	b.n	800b4ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9e0 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b4c8:	e010      	b.n	800b4ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f9dc 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b4d0:	e00c      	b.n	800b4ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f900 	bl	800b6da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4da:	4b07      	ldr	r3, [pc, #28]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7fe fff6 	bl	800a4d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ea:	bf00      	nop
  }

  return ret;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000440 	.word	0x20000440

0800b4fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	88db      	ldrh	r3, [r3, #6]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d004      	beq.n	800b518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f8e2 	bl	800b6da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b516:	e023      	b.n	800b560 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	dc02      	bgt.n	800b52a <USBD_GetConfig+0x2e>
 800b524:	2b00      	cmp	r3, #0
 800b526:	dc03      	bgt.n	800b530 <USBD_GetConfig+0x34>
 800b528:	e015      	b.n	800b556 <USBD_GetConfig+0x5a>
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d00b      	beq.n	800b546 <USBD_GetConfig+0x4a>
 800b52e:	e012      	b.n	800b556 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3308      	adds	r3, #8
 800b53a:	2201      	movs	r2, #1
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f948 	bl	800b7d4 <USBD_CtlSendData>
        break;
 800b544:	e00c      	b.n	800b560 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	3304      	adds	r3, #4
 800b54a:	2201      	movs	r2, #1
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f940 	bl	800b7d4 <USBD_CtlSendData>
        break;
 800b554:	e004      	b.n	800b560 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f8be 	bl	800b6da <USBD_CtlError>
        break;
 800b55e:	bf00      	nop
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	3b01      	subs	r3, #1
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d81e      	bhi.n	800b5be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	88db      	ldrh	r3, [r3, #6]
 800b584:	2b02      	cmp	r3, #2
 800b586:	d004      	beq.n	800b592 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f8a5 	bl	800b6da <USBD_CtlError>
        break;
 800b590:	e01a      	b.n	800b5c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d005      	beq.n	800b5ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	f043 0202 	orr.w	r2, r3, #2
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	330c      	adds	r3, #12
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f90c 	bl	800b7d4 <USBD_CtlSendData>
      break;
 800b5bc:	e004      	b.n	800b5c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f88a 	bl	800b6da <USBD_CtlError>
      break;
 800b5c6:	bf00      	nop
  }
}
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	885b      	ldrh	r3, [r3, #2]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d107      	bne.n	800b5f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f94c 	bl	800b888 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5f0:	e013      	b.n	800b61a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	885b      	ldrh	r3, [r3, #2]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d10b      	bne.n	800b612 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	889b      	ldrh	r3, [r3, #4]
 800b5fe:	0a1b      	lsrs	r3, r3, #8
 800b600:	b29b      	uxth	r3, r3
 800b602:	b2da      	uxtb	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f93c 	bl	800b888 <USBD_CtlSendStatus>
}
 800b610:	e003      	b.n	800b61a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f860 	bl	800b6da <USBD_CtlError>
}
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b632:	b2db      	uxtb	r3, r3
 800b634:	3b01      	subs	r3, #1
 800b636:	2b02      	cmp	r3, #2
 800b638:	d80b      	bhi.n	800b652 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	885b      	ldrh	r3, [r3, #2]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d10c      	bne.n	800b65c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f91c 	bl	800b888 <USBD_CtlSendStatus>
      }
      break;
 800b650:	e004      	b.n	800b65c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f840 	bl	800b6da <USBD_CtlError>
      break;
 800b65a:	e000      	b.n	800b65e <USBD_ClrFeature+0x3c>
      break;
 800b65c:	bf00      	nop
  }
}
 800b65e:	bf00      	nop
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	781a      	ldrb	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3301      	adds	r3, #1
 800b680:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3301      	adds	r3, #1
 800b68e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff fa16 	bl	800aac2 <SWAPBYTE>
 800b696:	4603      	mov	r3, r0
 800b698:	461a      	mov	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff fa09 	bl	800aac2 <SWAPBYTE>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f7ff f9fc 	bl	800aac2 <SWAPBYTE>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	80da      	strh	r2, [r3, #6]
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6e4:	2180      	movs	r1, #128	@ 0x80
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fcf6 	bl	800c0d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fcf2 	bl	800c0d8 <USBD_LL_StallEP>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d042      	beq.n	800b798 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b716:	6938      	ldr	r0, [r7, #16]
 800b718:	f000 f842 	bl	800b7a0 <USBD_GetLen>
 800b71c:	4603      	mov	r3, r0
 800b71e:	3301      	adds	r3, #1
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b726:	d808      	bhi.n	800b73a <USBD_GetString+0x3e>
 800b728:	6938      	ldr	r0, [r7, #16]
 800b72a:	f000 f839 	bl	800b7a0 <USBD_GetLen>
 800b72e:	4603      	mov	r3, r0
 800b730:	3301      	adds	r3, #1
 800b732:	b29b      	uxth	r3, r3
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	b29a      	uxth	r2, r3
 800b738:	e001      	b.n	800b73e <USBD_GetString+0x42>
 800b73a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	4413      	add	r3, r2
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	3301      	adds	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	4413      	add	r3, r2
 800b75a:	2203      	movs	r2, #3
 800b75c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	3301      	adds	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b764:	e013      	b.n	800b78e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	4413      	add	r3, r2
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	7812      	ldrb	r2, [r2, #0]
 800b770:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	3301      	adds	r3, #1
 800b776:	613b      	str	r3, [r7, #16]
    idx++;
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	3301      	adds	r3, #1
 800b77c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	4413      	add	r3, r2
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
    idx++;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	3301      	adds	r3, #1
 800b78c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e7      	bne.n	800b766 <USBD_GetString+0x6a>
 800b796:	e000      	b.n	800b79a <USBD_GetString+0x9e>
    return;
 800b798:	bf00      	nop
  }
}
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7b0:	e005      	b.n	800b7be <USBD_GetLen+0x1e>
  {
    len++;
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1f5      	bne.n	800b7b2 <USBD_GetLen+0x12>
  }

  return len;
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 fcf5 	bl	800c1ea <USBD_LL_Transmit>

  return USBD_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	2100      	movs	r1, #0
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 fce4 	bl	800c1ea <USBD_LL_Transmit>

  return USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2203      	movs	r2, #3
 800b83c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	2100      	movs	r1, #0
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f000 fce8 	bl	800c22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	2100      	movs	r1, #0
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 fcd7 	bl	800c22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2204      	movs	r2, #4
 800b894:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b898:	2300      	movs	r3, #0
 800b89a:	2200      	movs	r2, #0
 800b89c:	2100      	movs	r1, #0
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fca3 	bl	800c1ea <USBD_LL_Transmit>

  return USBD_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2205      	movs	r2, #5
 800b8ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8be:	2300      	movs	r3, #0
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fcb1 	bl	800c22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4912      	ldr	r1, [pc, #72]	@ (800b924 <MX_USB_Device_Init+0x50>)
 800b8dc:	4812      	ldr	r0, [pc, #72]	@ (800b928 <MX_USB_Device_Init+0x54>)
 800b8de:	f7fe fd5f 	bl	800a3a0 <USBD_Init>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b8e8:	f7f6 fb68 	bl	8001fbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b8ec:	490f      	ldr	r1, [pc, #60]	@ (800b92c <MX_USB_Device_Init+0x58>)
 800b8ee:	480e      	ldr	r0, [pc, #56]	@ (800b928 <MX_USB_Device_Init+0x54>)
 800b8f0:	f7fe fd86 	bl	800a400 <USBD_RegisterClass>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b8fa:	f7f6 fb5f 	bl	8001fbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b8fe:	490c      	ldr	r1, [pc, #48]	@ (800b930 <MX_USB_Device_Init+0x5c>)
 800b900:	4809      	ldr	r0, [pc, #36]	@ (800b928 <MX_USB_Device_Init+0x54>)
 800b902:	f7fe fc7d 	bl	800a200 <USBD_CDC_RegisterInterface>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b90c:	f7f6 fb56 	bl	8001fbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b910:	4805      	ldr	r0, [pc, #20]	@ (800b928 <MX_USB_Device_Init+0x54>)
 800b912:	f7fe fdab 	bl	800a46c <USBD_Start>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b91c:	f7f6 fb4e 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b920:	bf00      	nop
 800b922:	bd80      	pop	{r7, pc}
 800b924:	200000b4 	.word	0x200000b4
 800b928:	20000444 	.word	0x20000444
 800b92c:	20000020 	.word	0x20000020
 800b930:	200000a0 	.word	0x200000a0

0800b934 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b938:	2200      	movs	r2, #0
 800b93a:	4905      	ldr	r1, [pc, #20]	@ (800b950 <CDC_Init_FS+0x1c>)
 800b93c:	4805      	ldr	r0, [pc, #20]	@ (800b954 <CDC_Init_FS+0x20>)
 800b93e:	f7fe fc79 	bl	800a234 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b942:	4905      	ldr	r1, [pc, #20]	@ (800b958 <CDC_Init_FS+0x24>)
 800b944:	4803      	ldr	r0, [pc, #12]	@ (800b954 <CDC_Init_FS+0x20>)
 800b946:	f7fe fc97 	bl	800a278 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b94a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20000f20 	.word	0x20000f20
 800b954:	20000444 	.word	0x20000444
 800b958:	20000720 	.word	0x20000720

0800b95c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b95c:	b480      	push	{r7}
 800b95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b960:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b962:	4618      	mov	r0, r3
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	6039      	str	r1, [r7, #0]
 800b976:	71fb      	strb	r3, [r7, #7]
 800b978:	4613      	mov	r3, r2
 800b97a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b97c:	79fb      	ldrb	r3, [r7, #7]
 800b97e:	2b23      	cmp	r3, #35	@ 0x23
 800b980:	d84a      	bhi.n	800ba18 <CDC_Control_FS+0xac>
 800b982:	a201      	add	r2, pc, #4	@ (adr r2, 800b988 <CDC_Control_FS+0x1c>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800ba19 	.word	0x0800ba19
 800b98c:	0800ba19 	.word	0x0800ba19
 800b990:	0800ba19 	.word	0x0800ba19
 800b994:	0800ba19 	.word	0x0800ba19
 800b998:	0800ba19 	.word	0x0800ba19
 800b99c:	0800ba19 	.word	0x0800ba19
 800b9a0:	0800ba19 	.word	0x0800ba19
 800b9a4:	0800ba19 	.word	0x0800ba19
 800b9a8:	0800ba19 	.word	0x0800ba19
 800b9ac:	0800ba19 	.word	0x0800ba19
 800b9b0:	0800ba19 	.word	0x0800ba19
 800b9b4:	0800ba19 	.word	0x0800ba19
 800b9b8:	0800ba19 	.word	0x0800ba19
 800b9bc:	0800ba19 	.word	0x0800ba19
 800b9c0:	0800ba19 	.word	0x0800ba19
 800b9c4:	0800ba19 	.word	0x0800ba19
 800b9c8:	0800ba19 	.word	0x0800ba19
 800b9cc:	0800ba19 	.word	0x0800ba19
 800b9d0:	0800ba19 	.word	0x0800ba19
 800b9d4:	0800ba19 	.word	0x0800ba19
 800b9d8:	0800ba19 	.word	0x0800ba19
 800b9dc:	0800ba19 	.word	0x0800ba19
 800b9e0:	0800ba19 	.word	0x0800ba19
 800b9e4:	0800ba19 	.word	0x0800ba19
 800b9e8:	0800ba19 	.word	0x0800ba19
 800b9ec:	0800ba19 	.word	0x0800ba19
 800b9f0:	0800ba19 	.word	0x0800ba19
 800b9f4:	0800ba19 	.word	0x0800ba19
 800b9f8:	0800ba19 	.word	0x0800ba19
 800b9fc:	0800ba19 	.word	0x0800ba19
 800ba00:	0800ba19 	.word	0x0800ba19
 800ba04:	0800ba19 	.word	0x0800ba19
 800ba08:	0800ba19 	.word	0x0800ba19
 800ba0c:	0800ba19 	.word	0x0800ba19
 800ba10:	0800ba19 	.word	0x0800ba19
 800ba14:	0800ba19 	.word	0x0800ba19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba18:	bf00      	nop
  }

  return (USBD_OK);
 800ba1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	4805      	ldr	r0, [pc, #20]	@ (800ba4c <CDC_Receive_FS+0x24>)
 800ba36:	f7fe fc1f 	bl	800a278 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba3a:	4804      	ldr	r0, [pc, #16]	@ (800ba4c <CDC_Receive_FS+0x24>)
 800ba3c:	f7fe fc7a 	bl	800a334 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ba40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000444 	.word	0x20000444

0800ba50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ba60:	4b0d      	ldr	r3, [pc, #52]	@ (800ba98 <CDC_Transmit_FS+0x48>)
 800ba62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ba66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e00b      	b.n	800ba8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba76:	887b      	ldrh	r3, [r7, #2]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	6879      	ldr	r1, [r7, #4]
 800ba7c:	4806      	ldr	r0, [pc, #24]	@ (800ba98 <CDC_Transmit_FS+0x48>)
 800ba7e:	f7fe fbd9 	bl	800a234 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ba82:	4805      	ldr	r0, [pc, #20]	@ (800ba98 <CDC_Transmit_FS+0x48>)
 800ba84:	f7fe fc16 	bl	800a2b4 <USBD_CDC_TransmitPacket>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20000444 	.word	0x20000444

0800ba9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	4613      	mov	r3, r2
 800baa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800baae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	371c      	adds	r7, #28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
	...

0800bac0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	6039      	str	r1, [r7, #0]
 800baca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	2212      	movs	r2, #18
 800bad0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bad2:	4b03      	ldr	r3, [pc, #12]	@ (800bae0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	200000d4 	.word	0x200000d4

0800bae4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	6039      	str	r1, [r7, #0]
 800baee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	2204      	movs	r2, #4
 800baf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800baf6:	4b03      	ldr	r3, [pc, #12]	@ (800bb04 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	200000e8 	.word	0x200000e8

0800bb08 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	6039      	str	r1, [r7, #0]
 800bb12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d105      	bne.n	800bb26 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	4907      	ldr	r1, [pc, #28]	@ (800bb3c <USBD_CDC_ProductStrDescriptor+0x34>)
 800bb1e:	4808      	ldr	r0, [pc, #32]	@ (800bb40 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bb20:	f7ff fdec 	bl	800b6fc <USBD_GetString>
 800bb24:	e004      	b.n	800bb30 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	4904      	ldr	r1, [pc, #16]	@ (800bb3c <USBD_CDC_ProductStrDescriptor+0x34>)
 800bb2a:	4805      	ldr	r0, [pc, #20]	@ (800bb40 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bb2c:	f7ff fde6 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb30:	4b02      	ldr	r3, [pc, #8]	@ (800bb3c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20001720 	.word	0x20001720
 800bb40:	0800f07c 	.word	0x0800f07c

0800bb44 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	6039      	str	r1, [r7, #0]
 800bb4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	4904      	ldr	r1, [pc, #16]	@ (800bb64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bb54:	4804      	ldr	r0, [pc, #16]	@ (800bb68 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bb56:	f7ff fdd1 	bl	800b6fc <USBD_GetString>
  return USBD_StrDesc;
 800bb5a:	4b02      	ldr	r3, [pc, #8]	@ (800bb64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	20001720 	.word	0x20001720
 800bb68:	0800f094 	.word	0x0800f094

0800bb6c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	4603      	mov	r3, r0
 800bb74:	6039      	str	r1, [r7, #0]
 800bb76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	221a      	movs	r2, #26
 800bb7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb7e:	f000 f843 	bl	800bc08 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bb82:	4b02      	ldr	r3, [pc, #8]	@ (800bb8c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	200000ec 	.word	0x200000ec

0800bb90 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	6039      	str	r1, [r7, #0]
 800bb9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb9c:	79fb      	ldrb	r3, [r7, #7]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d105      	bne.n	800bbae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	4907      	ldr	r1, [pc, #28]	@ (800bbc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bba6:	4808      	ldr	r0, [pc, #32]	@ (800bbc8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bba8:	f7ff fda8 	bl	800b6fc <USBD_GetString>
 800bbac:	e004      	b.n	800bbb8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	4904      	ldr	r1, [pc, #16]	@ (800bbc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bbb2:	4805      	ldr	r0, [pc, #20]	@ (800bbc8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bbb4:	f7ff fda2 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbb8:	4b02      	ldr	r3, [pc, #8]	@ (800bbc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20001720 	.word	0x20001720
 800bbc8:	0800f0a8 	.word	0x0800f0a8

0800bbcc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	6039      	str	r1, [r7, #0]
 800bbd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbd8:	79fb      	ldrb	r3, [r7, #7]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d105      	bne.n	800bbea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	4907      	ldr	r1, [pc, #28]	@ (800bc00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bbe2:	4808      	ldr	r0, [pc, #32]	@ (800bc04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bbe4:	f7ff fd8a 	bl	800b6fc <USBD_GetString>
 800bbe8:	e004      	b.n	800bbf4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	4904      	ldr	r1, [pc, #16]	@ (800bc00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bbee:	4805      	ldr	r0, [pc, #20]	@ (800bc04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bbf0:	f7ff fd84 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbf4:	4b02      	ldr	r3, [pc, #8]	@ (800bc00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20001720 	.word	0x20001720
 800bc04:	0800f0b4 	.word	0x0800f0b4

0800bc08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc4c <Get_SerialNum+0x44>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc14:	4b0e      	ldr	r3, [pc, #56]	@ (800bc50 <Get_SerialNum+0x48>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc1a:	4b0e      	ldr	r3, [pc, #56]	@ (800bc54 <Get_SerialNum+0x4c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4413      	add	r3, r2
 800bc26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc2e:	2208      	movs	r2, #8
 800bc30:	4909      	ldr	r1, [pc, #36]	@ (800bc58 <Get_SerialNum+0x50>)
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f000 f814 	bl	800bc60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc38:	2204      	movs	r2, #4
 800bc3a:	4908      	ldr	r1, [pc, #32]	@ (800bc5c <Get_SerialNum+0x54>)
 800bc3c:	68b8      	ldr	r0, [r7, #8]
 800bc3e:	f000 f80f 	bl	800bc60 <IntToUnicode>
  }
}
 800bc42:	bf00      	nop
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	1fff7590 	.word	0x1fff7590
 800bc50:	1fff7594 	.word	0x1fff7594
 800bc54:	1fff7598 	.word	0x1fff7598
 800bc58:	200000ee 	.word	0x200000ee
 800bc5c:	200000fe 	.word	0x200000fe

0800bc60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b087      	sub	sp, #28
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc72:	2300      	movs	r3, #0
 800bc74:	75fb      	strb	r3, [r7, #23]
 800bc76:	e027      	b.n	800bcc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	0f1b      	lsrs	r3, r3, #28
 800bc7c:	2b09      	cmp	r3, #9
 800bc7e:	d80b      	bhi.n	800bc98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	0f1b      	lsrs	r3, r3, #28
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	7dfb      	ldrb	r3, [r7, #23]
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	440b      	add	r3, r1
 800bc90:	3230      	adds	r2, #48	@ 0x30
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	e00a      	b.n	800bcae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	0f1b      	lsrs	r3, r3, #28
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	7dfb      	ldrb	r3, [r7, #23]
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	4619      	mov	r1, r3
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	440b      	add	r3, r1
 800bca8:	3237      	adds	r2, #55	@ 0x37
 800bcaa:	b2d2      	uxtb	r2, r2
 800bcac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	011b      	lsls	r3, r3, #4
 800bcb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	3301      	adds	r3, #1
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	75fb      	strb	r3, [r7, #23]
 800bcc8:	7dfa      	ldrb	r2, [r7, #23]
 800bcca:	79fb      	ldrb	r3, [r7, #7]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d3d3      	bcc.n	800bc78 <IntToUnicode+0x18>
  }
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	371c      	adds	r7, #28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <LL_AHB2_GRP1_EnableClock>:
{
 800bcde:	b480      	push	{r7}
 800bce0:	b085      	sub	sp, #20
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800bce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800bcf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4013      	ands	r3, r2
 800bd00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bd02:	68fb      	ldr	r3, [r7, #12]
}
 800bd04:	bf00      	nop
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <LL_APB1_GRP1_EnableClock>:
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800bd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800bd28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4013      	ands	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bd34:	68fb      	ldr	r3, [r7, #12]
}
 800bd36:	bf00      	nop
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
	...

0800bd44 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b09c      	sub	sp, #112	@ 0x70
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bd50:	2200      	movs	r2, #0
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	605a      	str	r2, [r3, #4]
 800bd56:	609a      	str	r2, [r3, #8]
 800bd58:	60da      	str	r2, [r3, #12]
 800bd5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bd5c:	f107 030c 	add.w	r3, r7, #12
 800bd60:	2250      	movs	r2, #80	@ 0x50
 800bd62:	2100      	movs	r1, #0
 800bd64:	4618      	mov	r0, r3
 800bd66:	f001 f892 	bl	800ce8e <memset>
  if(pcdHandle->Instance==USB)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a23      	ldr	r2, [pc, #140]	@ (800bdfc <HAL_PCD_MspInit+0xb8>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d13e      	bne.n	800bdf2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bd74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800bd7a:	2318      	movs	r3, #24
 800bd7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800bd7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800bd82:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800bd84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bd88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800bd8a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800bd8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800bd90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bd94:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800bd96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800bd9a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bd9c:	f107 030c 	add.w	r3, r7, #12
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fa fd1f 	bl	80067e4 <HAL_RCCEx_PeriphCLKConfig>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800bdac:	f7f6 f906 	bl	8001fbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdb0:	2001      	movs	r0, #1
 800bdb2:	f7ff ff94 	bl	800bcde <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bdb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bdba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800bdc8:	230a      	movs	r3, #10
 800bdca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdcc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bdd6:	f7f6 fd07 	bl	80027e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bdda:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800bdde:	f7ff ff97 	bl	800bd10 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bde2:	2200      	movs	r2, #0
 800bde4:	2100      	movs	r1, #0
 800bde6:	2014      	movs	r0, #20
 800bde8:	f7f6 fcc9 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bdec:	2014      	movs	r0, #20
 800bdee:	f7f6 fce0 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bdf2:	bf00      	nop
 800bdf4:	3770      	adds	r7, #112	@ 0x70
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40006800 	.word	0x40006800

0800be00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800be14:	4619      	mov	r1, r3
 800be16:	4610      	mov	r0, r2
 800be18:	f7fe fb75 	bl	800a506 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800be1c:	bf00      	nop
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800be36:	78fa      	ldrb	r2, [r7, #3]
 800be38:	6879      	ldr	r1, [r7, #4]
 800be3a:	4613      	mov	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	00db      	lsls	r3, r3, #3
 800be42:	440b      	add	r3, r1
 800be44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	78fb      	ldrb	r3, [r7, #3]
 800be4c:	4619      	mov	r1, r3
 800be4e:	f7fe fbaf 	bl	800a5b0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800be52:	bf00      	nop
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800be6c:	78fa      	ldrb	r2, [r7, #3]
 800be6e:	6879      	ldr	r1, [r7, #4]
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	440b      	add	r3, r1
 800be7a:	3324      	adds	r3, #36	@ 0x24
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	78fb      	ldrb	r3, [r7, #3]
 800be80:	4619      	mov	r1, r3
 800be82:	f7fe fc48 	bl	800a716 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800be86:	bf00      	nop
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe fd82 	bl	800a9a6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bea2:	bf00      	nop
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b084      	sub	sp, #16
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800beb2:	2301      	movs	r3, #1
 800beb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	795b      	ldrb	r3, [r3, #5]
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d001      	beq.n	800bec2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bebe:	f7f6 f87d 	bl	8001fbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bec8:	7bfa      	ldrb	r2, [r7, #15]
 800beca:	4611      	mov	r1, r2
 800becc:	4618      	mov	r0, r3
 800bece:	f7fe fd26 	bl	800a91e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fe fcce 	bl	800a87a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bede:	bf00      	nop
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fd21 	bl	800a93e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7a5b      	ldrb	r3, [r3, #9]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d005      	beq.n	800bf10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf04:	4b04      	ldr	r3, [pc, #16]	@ (800bf18 <HAL_PCD_SuspendCallback+0x30>)
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	4a03      	ldr	r2, [pc, #12]	@ (800bf18 <HAL_PCD_SuspendCallback+0x30>)
 800bf0a:	f043 0306 	orr.w	r3, r3, #6
 800bf0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	e000ed00 	.word	0xe000ed00

0800bf1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	7a5b      	ldrb	r3, [r3, #9]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d007      	beq.n	800bf3c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf2c:	4b08      	ldr	r3, [pc, #32]	@ (800bf50 <HAL_PCD_ResumeCallback+0x34>)
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	4a07      	ldr	r2, [pc, #28]	@ (800bf50 <HAL_PCD_ResumeCallback+0x34>)
 800bf32:	f023 0306 	bic.w	r3, r3, #6
 800bf36:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bf38:	f000 f9fa 	bl	800c330 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe fd17 	bl	800a976 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	e000ed00 	.word	0xe000ed00

0800bf54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bf5c:	4a2c      	ldr	r2, [pc, #176]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a2a      	ldr	r2, [pc, #168]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf68:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bf6c:	f7f9 f938 	bl	80051e0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800bf70:	4b27      	ldr	r3, [pc, #156]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf72:	4a28      	ldr	r2, [pc, #160]	@ (800c014 <USBD_LL_Init+0xc0>)
 800bf74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf76:	4b26      	ldr	r3, [pc, #152]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf78:	2208      	movs	r2, #8
 800bf7a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf7c:	4b24      	ldr	r3, [pc, #144]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf7e:	2202      	movs	r2, #2
 800bf80:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf82:	4b23      	ldr	r3, [pc, #140]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf84:	2202      	movs	r2, #2
 800bf86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bf88:	4b21      	ldr	r3, [pc, #132]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf8e:	4b20      	ldr	r3, [pc, #128]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf94:	4b1e      	ldr	r3, [pc, #120]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf9a:	4b1d      	ldr	r3, [pc, #116]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bfa0:	481b      	ldr	r0, [pc, #108]	@ (800c010 <USBD_LL_Init+0xbc>)
 800bfa2:	f7f7 fbcc 	bl	800373e <HAL_PCD_Init>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bfac:	f7f6 f806 	bl	8001fbc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bfb6:	2318      	movs	r3, #24
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2100      	movs	r1, #0
 800bfbc:	f7f9 f885 	bl	80050ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bfc6:	2358      	movs	r3, #88	@ 0x58
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2180      	movs	r1, #128	@ 0x80
 800bfcc:	f7f9 f87d 	bl	80050ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bfd6:	23c0      	movs	r3, #192	@ 0xc0
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2181      	movs	r1, #129	@ 0x81
 800bfdc:	f7f9 f875 	bl	80050ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bfe6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bfea:	2200      	movs	r2, #0
 800bfec:	2101      	movs	r1, #1
 800bfee:	f7f9 f86c 	bl	80050ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bffc:	2200      	movs	r2, #0
 800bffe:	2182      	movs	r1, #130	@ 0x82
 800c000:	f7f9 f863 	bl	80050ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	20001920 	.word	0x20001920
 800c014:	40006800 	.word	0x40006800

0800c018 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c02e:	4618      	mov	r0, r3
 800c030:	f7f7 fc53 	bl	80038da <HAL_PCD_Start>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 f97e 	bl	800c33c <USBD_Get_USB_Status>
 800c040:	4603      	mov	r3, r0
 800c042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c044:	7bbb      	ldrb	r3, [r7, #14]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	4608      	mov	r0, r1
 800c058:	4611      	mov	r1, r2
 800c05a:	461a      	mov	r2, r3
 800c05c:	4603      	mov	r3, r0
 800c05e:	70fb      	strb	r3, [r7, #3]
 800c060:	460b      	mov	r3, r1
 800c062:	70bb      	strb	r3, [r7, #2]
 800c064:	4613      	mov	r3, r2
 800c066:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c068:	2300      	movs	r3, #0
 800c06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c076:	78bb      	ldrb	r3, [r7, #2]
 800c078:	883a      	ldrh	r2, [r7, #0]
 800c07a:	78f9      	ldrb	r1, [r7, #3]
 800c07c:	f7f7 fd9a 	bl	8003bb4 <HAL_PCD_EP_Open>
 800c080:	4603      	mov	r3, r0
 800c082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c084:	7bfb      	ldrb	r3, [r7, #15]
 800c086:	4618      	mov	r0, r3
 800c088:	f000 f958 	bl	800c33c <USBD_Get_USB_Status>
 800c08c:	4603      	mov	r3, r0
 800c08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c090:	7bbb      	ldrb	r3, [r7, #14]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b084      	sub	sp, #16
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0b4:	78fa      	ldrb	r2, [r7, #3]
 800c0b6:	4611      	mov	r1, r2
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7f7 fdd8 	bl	8003c6e <HAL_PCD_EP_Close>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 f939 	bl	800c33c <USBD_Get_USB_Status>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0f2:	78fa      	ldrb	r2, [r7, #3]
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7f7 fe81 	bl	8003dfe <HAL_PCD_EP_SetStall>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	4618      	mov	r0, r3
 800c104:	f000 f91a 	bl	800c33c <USBD_Get_USB_Status>
 800c108:	4603      	mov	r3, r0
 800c10a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c10c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b084      	sub	sp, #16
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	460b      	mov	r3, r1
 800c120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c130:	78fa      	ldrb	r2, [r7, #3]
 800c132:	4611      	mov	r1, r2
 800c134:	4618      	mov	r0, r3
 800c136:	f7f7 feb4 	bl	8003ea2 <HAL_PCD_EP_ClrStall>
 800c13a:	4603      	mov	r3, r0
 800c13c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
 800c140:	4618      	mov	r0, r3
 800c142:	f000 f8fb 	bl	800c33c <USBD_Get_USB_Status>
 800c146:	4603      	mov	r3, r0
 800c148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c166:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	da0b      	bge.n	800c188 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c170:	78fb      	ldrb	r3, [r7, #3]
 800c172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c176:	68f9      	ldr	r1, [r7, #12]
 800c178:	4613      	mov	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	440b      	add	r3, r1
 800c182:	3312      	adds	r3, #18
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	e00b      	b.n	800c1a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c18e:	68f9      	ldr	r1, [r7, #12]
 800c190:	4613      	mov	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4413      	add	r3, r2
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	440b      	add	r3, r1
 800c19a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c19e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1c6:	78fa      	ldrb	r2, [r7, #3]
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7f7 fcce 	bl	8003b6c <HAL_PCD_SetAddress>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 f8b0 	bl	800c33c <USBD_Get_USB_Status>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b086      	sub	sp, #24
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	603b      	str	r3, [r7, #0]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c208:	7af9      	ldrb	r1, [r7, #11]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	f7f7 fdbf 	bl	8003d90 <HAL_PCD_EP_Transmit>
 800c212:	4603      	mov	r3, r0
 800c214:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c216:	7dfb      	ldrb	r3, [r7, #23]
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 f88f 	bl	800c33c <USBD_Get_USB_Status>
 800c21e:	4603      	mov	r3, r0
 800c220:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c222:	7dbb      	ldrb	r3, [r7, #22]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	607a      	str	r2, [r7, #4]
 800c236:	603b      	str	r3, [r7, #0]
 800c238:	460b      	mov	r3, r1
 800c23a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c24a:	7af9      	ldrb	r1, [r7, #11]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	f7f7 fd55 	bl	8003cfe <HAL_PCD_EP_Receive>
 800c254:	4603      	mov	r3, r0
 800c256:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c258:	7dfb      	ldrb	r3, [r7, #23]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 f86e 	bl	800c33c <USBD_Get_USB_Status>
 800c260:	4603      	mov	r3, r0
 800c262:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c264:	7dbb      	ldrb	r3, [r7, #22]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b082      	sub	sp, #8
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c280:	78fa      	ldrb	r2, [r7, #3]
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f7f7 fd6b 	bl	8003d60 <HAL_PCD_EP_GetRxCount>
 800c28a:	4603      	mov	r3, r0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_PCDEx_LPM_Callback+0x18>
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d013      	beq.n	800c2d2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c2aa:	e023      	b.n	800c2f4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7a5b      	ldrb	r3, [r3, #9]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d007      	beq.n	800c2c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c2b4:	f000 f83c 	bl	800c330 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2b8:	4b10      	ldr	r3, [pc, #64]	@ (800c2fc <HAL_PCDEx_LPM_Callback+0x68>)
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	4a0f      	ldr	r2, [pc, #60]	@ (800c2fc <HAL_PCDEx_LPM_Callback+0x68>)
 800c2be:	f023 0306 	bic.w	r3, r3, #6
 800c2c2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fe fb53 	bl	800a976 <USBD_LL_Resume>
    break;
 800c2d0:	e010      	b.n	800c2f4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fe fb30 	bl	800a93e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	7a5b      	ldrb	r3, [r3, #9]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d005      	beq.n	800c2f2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2e6:	4b05      	ldr	r3, [pc, #20]	@ (800c2fc <HAL_PCDEx_LPM_Callback+0x68>)
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	4a04      	ldr	r2, [pc, #16]	@ (800c2fc <HAL_PCDEx_LPM_Callback+0x68>)
 800c2ec:	f043 0306 	orr.w	r3, r3, #6
 800c2f0:	6113      	str	r3, [r2, #16]
    break;
 800c2f2:	bf00      	nop
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	e000ed00 	.word	0xe000ed00

0800c300 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c308:	4b03      	ldr	r3, [pc, #12]	@ (800c318 <USBD_static_malloc+0x18>)
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	370c      	adds	r7, #12
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	20001bfc 	.word	0x20001bfc

0800c31c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c334:	f7f5 fcc2 	bl	8001cbc <SystemClock_Config>
}
 800c338:	bf00      	nop
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	2b03      	cmp	r3, #3
 800c34e:	d817      	bhi.n	800c380 <USBD_Get_USB_Status+0x44>
 800c350:	a201      	add	r2, pc, #4	@ (adr r2, 800c358 <USBD_Get_USB_Status+0x1c>)
 800c352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c356:	bf00      	nop
 800c358:	0800c369 	.word	0x0800c369
 800c35c:	0800c36f 	.word	0x0800c36f
 800c360:	0800c375 	.word	0x0800c375
 800c364:	0800c37b 	.word	0x0800c37b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]
    break;
 800c36c:	e00b      	b.n	800c386 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c36e:	2303      	movs	r3, #3
 800c370:	73fb      	strb	r3, [r7, #15]
    break;
 800c372:	e008      	b.n	800c386 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c374:	2301      	movs	r3, #1
 800c376:	73fb      	strb	r3, [r7, #15]
    break;
 800c378:	e005      	b.n	800c386 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c37a:	2303      	movs	r3, #3
 800c37c:	73fb      	strb	r3, [r7, #15]
    break;
 800c37e:	e002      	b.n	800c386 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c380:	2303      	movs	r3, #3
 800c382:	73fb      	strb	r3, [r7, #15]
    break;
 800c384:	bf00      	nop
  }
  return usb_status;
 800c386:	7bfb      	ldrb	r3, [r7, #15]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <__cvt>:
 800c394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c398:	ec57 6b10 	vmov	r6, r7, d0
 800c39c:	2f00      	cmp	r7, #0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	463b      	mov	r3, r7
 800c3a4:	bfbb      	ittet	lt
 800c3a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c3aa:	461f      	movlt	r7, r3
 800c3ac:	2300      	movge	r3, #0
 800c3ae:	232d      	movlt	r3, #45	@ 0x2d
 800c3b0:	700b      	strb	r3, [r1, #0]
 800c3b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c3b8:	4691      	mov	r9, r2
 800c3ba:	f023 0820 	bic.w	r8, r3, #32
 800c3be:	bfbc      	itt	lt
 800c3c0:	4632      	movlt	r2, r6
 800c3c2:	4616      	movlt	r6, r2
 800c3c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c3c8:	d005      	beq.n	800c3d6 <__cvt+0x42>
 800c3ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c3ce:	d100      	bne.n	800c3d2 <__cvt+0x3e>
 800c3d0:	3401      	adds	r4, #1
 800c3d2:	2102      	movs	r1, #2
 800c3d4:	e000      	b.n	800c3d8 <__cvt+0x44>
 800c3d6:	2103      	movs	r1, #3
 800c3d8:	ab03      	add	r3, sp, #12
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	ab02      	add	r3, sp, #8
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	ec47 6b10 	vmov	d0, r6, r7
 800c3e4:	4653      	mov	r3, sl
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	f000 fe5a 	bl	800d0a0 <_dtoa_r>
 800c3ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	d119      	bne.n	800c428 <__cvt+0x94>
 800c3f4:	f019 0f01 	tst.w	r9, #1
 800c3f8:	d00e      	beq.n	800c418 <__cvt+0x84>
 800c3fa:	eb00 0904 	add.w	r9, r0, r4
 800c3fe:	2200      	movs	r2, #0
 800c400:	2300      	movs	r3, #0
 800c402:	4630      	mov	r0, r6
 800c404:	4639      	mov	r1, r7
 800c406:	f7f4 fb37 	bl	8000a78 <__aeabi_dcmpeq>
 800c40a:	b108      	cbz	r0, 800c410 <__cvt+0x7c>
 800c40c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c410:	2230      	movs	r2, #48	@ 0x30
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	454b      	cmp	r3, r9
 800c416:	d31e      	bcc.n	800c456 <__cvt+0xc2>
 800c418:	9b03      	ldr	r3, [sp, #12]
 800c41a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c41c:	1b5b      	subs	r3, r3, r5
 800c41e:	4628      	mov	r0, r5
 800c420:	6013      	str	r3, [r2, #0]
 800c422:	b004      	add	sp, #16
 800c424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c42c:	eb00 0904 	add.w	r9, r0, r4
 800c430:	d1e5      	bne.n	800c3fe <__cvt+0x6a>
 800c432:	7803      	ldrb	r3, [r0, #0]
 800c434:	2b30      	cmp	r3, #48	@ 0x30
 800c436:	d10a      	bne.n	800c44e <__cvt+0xba>
 800c438:	2200      	movs	r2, #0
 800c43a:	2300      	movs	r3, #0
 800c43c:	4630      	mov	r0, r6
 800c43e:	4639      	mov	r1, r7
 800c440:	f7f4 fb1a 	bl	8000a78 <__aeabi_dcmpeq>
 800c444:	b918      	cbnz	r0, 800c44e <__cvt+0xba>
 800c446:	f1c4 0401 	rsb	r4, r4, #1
 800c44a:	f8ca 4000 	str.w	r4, [sl]
 800c44e:	f8da 3000 	ldr.w	r3, [sl]
 800c452:	4499      	add	r9, r3
 800c454:	e7d3      	b.n	800c3fe <__cvt+0x6a>
 800c456:	1c59      	adds	r1, r3, #1
 800c458:	9103      	str	r1, [sp, #12]
 800c45a:	701a      	strb	r2, [r3, #0]
 800c45c:	e7d9      	b.n	800c412 <__cvt+0x7e>

0800c45e <__exponent>:
 800c45e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c460:	2900      	cmp	r1, #0
 800c462:	bfba      	itte	lt
 800c464:	4249      	neglt	r1, r1
 800c466:	232d      	movlt	r3, #45	@ 0x2d
 800c468:	232b      	movge	r3, #43	@ 0x2b
 800c46a:	2909      	cmp	r1, #9
 800c46c:	7002      	strb	r2, [r0, #0]
 800c46e:	7043      	strb	r3, [r0, #1]
 800c470:	dd29      	ble.n	800c4c6 <__exponent+0x68>
 800c472:	f10d 0307 	add.w	r3, sp, #7
 800c476:	461d      	mov	r5, r3
 800c478:	270a      	movs	r7, #10
 800c47a:	461a      	mov	r2, r3
 800c47c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c480:	fb07 1416 	mls	r4, r7, r6, r1
 800c484:	3430      	adds	r4, #48	@ 0x30
 800c486:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c48a:	460c      	mov	r4, r1
 800c48c:	2c63      	cmp	r4, #99	@ 0x63
 800c48e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c492:	4631      	mov	r1, r6
 800c494:	dcf1      	bgt.n	800c47a <__exponent+0x1c>
 800c496:	3130      	adds	r1, #48	@ 0x30
 800c498:	1e94      	subs	r4, r2, #2
 800c49a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c49e:	1c41      	adds	r1, r0, #1
 800c4a0:	4623      	mov	r3, r4
 800c4a2:	42ab      	cmp	r3, r5
 800c4a4:	d30a      	bcc.n	800c4bc <__exponent+0x5e>
 800c4a6:	f10d 0309 	add.w	r3, sp, #9
 800c4aa:	1a9b      	subs	r3, r3, r2
 800c4ac:	42ac      	cmp	r4, r5
 800c4ae:	bf88      	it	hi
 800c4b0:	2300      	movhi	r3, #0
 800c4b2:	3302      	adds	r3, #2
 800c4b4:	4403      	add	r3, r0
 800c4b6:	1a18      	subs	r0, r3, r0
 800c4b8:	b003      	add	sp, #12
 800c4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c4c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c4c4:	e7ed      	b.n	800c4a2 <__exponent+0x44>
 800c4c6:	2330      	movs	r3, #48	@ 0x30
 800c4c8:	3130      	adds	r1, #48	@ 0x30
 800c4ca:	7083      	strb	r3, [r0, #2]
 800c4cc:	70c1      	strb	r1, [r0, #3]
 800c4ce:	1d03      	adds	r3, r0, #4
 800c4d0:	e7f1      	b.n	800c4b6 <__exponent+0x58>
	...

0800c4d4 <_printf_float>:
 800c4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d8:	b08d      	sub	sp, #52	@ 0x34
 800c4da:	460c      	mov	r4, r1
 800c4dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c4e0:	4616      	mov	r6, r2
 800c4e2:	461f      	mov	r7, r3
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	f000 fcdb 	bl	800cea0 <_localeconv_r>
 800c4ea:	6803      	ldr	r3, [r0, #0]
 800c4ec:	9304      	str	r3, [sp, #16]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7f3 fe96 	bl	8000220 <strlen>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fc:	9005      	str	r0, [sp, #20]
 800c4fe:	3307      	adds	r3, #7
 800c500:	f023 0307 	bic.w	r3, r3, #7
 800c504:	f103 0208 	add.w	r2, r3, #8
 800c508:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c50c:	f8d4 b000 	ldr.w	fp, [r4]
 800c510:	f8c8 2000 	str.w	r2, [r8]
 800c514:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c518:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c51c:	9307      	str	r3, [sp, #28]
 800c51e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c522:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c52a:	4b9c      	ldr	r3, [pc, #624]	@ (800c79c <_printf_float+0x2c8>)
 800c52c:	f04f 32ff 	mov.w	r2, #4294967295
 800c530:	f7f4 fad4 	bl	8000adc <__aeabi_dcmpun>
 800c534:	bb70      	cbnz	r0, 800c594 <_printf_float+0xc0>
 800c536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c53a:	4b98      	ldr	r3, [pc, #608]	@ (800c79c <_printf_float+0x2c8>)
 800c53c:	f04f 32ff 	mov.w	r2, #4294967295
 800c540:	f7f4 faae 	bl	8000aa0 <__aeabi_dcmple>
 800c544:	bb30      	cbnz	r0, 800c594 <_printf_float+0xc0>
 800c546:	2200      	movs	r2, #0
 800c548:	2300      	movs	r3, #0
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	f7f4 fa9d 	bl	8000a8c <__aeabi_dcmplt>
 800c552:	b110      	cbz	r0, 800c55a <_printf_float+0x86>
 800c554:	232d      	movs	r3, #45	@ 0x2d
 800c556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c55a:	4a91      	ldr	r2, [pc, #580]	@ (800c7a0 <_printf_float+0x2cc>)
 800c55c:	4b91      	ldr	r3, [pc, #580]	@ (800c7a4 <_printf_float+0x2d0>)
 800c55e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c562:	bf94      	ite	ls
 800c564:	4690      	movls	r8, r2
 800c566:	4698      	movhi	r8, r3
 800c568:	2303      	movs	r3, #3
 800c56a:	6123      	str	r3, [r4, #16]
 800c56c:	f02b 0304 	bic.w	r3, fp, #4
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	f04f 0900 	mov.w	r9, #0
 800c576:	9700      	str	r7, [sp, #0]
 800c578:	4633      	mov	r3, r6
 800c57a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c57c:	4621      	mov	r1, r4
 800c57e:	4628      	mov	r0, r5
 800c580:	f000 f9d2 	bl	800c928 <_printf_common>
 800c584:	3001      	adds	r0, #1
 800c586:	f040 808d 	bne.w	800c6a4 <_printf_float+0x1d0>
 800c58a:	f04f 30ff 	mov.w	r0, #4294967295
 800c58e:	b00d      	add	sp, #52	@ 0x34
 800c590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c594:	4642      	mov	r2, r8
 800c596:	464b      	mov	r3, r9
 800c598:	4640      	mov	r0, r8
 800c59a:	4649      	mov	r1, r9
 800c59c:	f7f4 fa9e 	bl	8000adc <__aeabi_dcmpun>
 800c5a0:	b140      	cbz	r0, 800c5b4 <_printf_float+0xe0>
 800c5a2:	464b      	mov	r3, r9
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	bfbc      	itt	lt
 800c5a8:	232d      	movlt	r3, #45	@ 0x2d
 800c5aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c5ae:	4a7e      	ldr	r2, [pc, #504]	@ (800c7a8 <_printf_float+0x2d4>)
 800c5b0:	4b7e      	ldr	r3, [pc, #504]	@ (800c7ac <_printf_float+0x2d8>)
 800c5b2:	e7d4      	b.n	800c55e <_printf_float+0x8a>
 800c5b4:	6863      	ldr	r3, [r4, #4]
 800c5b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c5ba:	9206      	str	r2, [sp, #24]
 800c5bc:	1c5a      	adds	r2, r3, #1
 800c5be:	d13b      	bne.n	800c638 <_printf_float+0x164>
 800c5c0:	2306      	movs	r3, #6
 800c5c2:	6063      	str	r3, [r4, #4]
 800c5c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	6022      	str	r2, [r4, #0]
 800c5cc:	9303      	str	r3, [sp, #12]
 800c5ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c5d4:	ab09      	add	r3, sp, #36	@ 0x24
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	6861      	ldr	r1, [r4, #4]
 800c5da:	ec49 8b10 	vmov	d0, r8, r9
 800c5de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f7ff fed6 	bl	800c394 <__cvt>
 800c5e8:	9b06      	ldr	r3, [sp, #24]
 800c5ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5ec:	2b47      	cmp	r3, #71	@ 0x47
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	d129      	bne.n	800c646 <_printf_float+0x172>
 800c5f2:	1cc8      	adds	r0, r1, #3
 800c5f4:	db02      	blt.n	800c5fc <_printf_float+0x128>
 800c5f6:	6863      	ldr	r3, [r4, #4]
 800c5f8:	4299      	cmp	r1, r3
 800c5fa:	dd41      	ble.n	800c680 <_printf_float+0x1ac>
 800c5fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c600:	fa5f fa8a 	uxtb.w	sl, sl
 800c604:	3901      	subs	r1, #1
 800c606:	4652      	mov	r2, sl
 800c608:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c60c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c60e:	f7ff ff26 	bl	800c45e <__exponent>
 800c612:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c614:	1813      	adds	r3, r2, r0
 800c616:	2a01      	cmp	r2, #1
 800c618:	4681      	mov	r9, r0
 800c61a:	6123      	str	r3, [r4, #16]
 800c61c:	dc02      	bgt.n	800c624 <_printf_float+0x150>
 800c61e:	6822      	ldr	r2, [r4, #0]
 800c620:	07d2      	lsls	r2, r2, #31
 800c622:	d501      	bpl.n	800c628 <_printf_float+0x154>
 800c624:	3301      	adds	r3, #1
 800c626:	6123      	str	r3, [r4, #16]
 800c628:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d0a2      	beq.n	800c576 <_printf_float+0xa2>
 800c630:	232d      	movs	r3, #45	@ 0x2d
 800c632:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c636:	e79e      	b.n	800c576 <_printf_float+0xa2>
 800c638:	9a06      	ldr	r2, [sp, #24]
 800c63a:	2a47      	cmp	r2, #71	@ 0x47
 800c63c:	d1c2      	bne.n	800c5c4 <_printf_float+0xf0>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1c0      	bne.n	800c5c4 <_printf_float+0xf0>
 800c642:	2301      	movs	r3, #1
 800c644:	e7bd      	b.n	800c5c2 <_printf_float+0xee>
 800c646:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c64a:	d9db      	bls.n	800c604 <_printf_float+0x130>
 800c64c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c650:	d118      	bne.n	800c684 <_printf_float+0x1b0>
 800c652:	2900      	cmp	r1, #0
 800c654:	6863      	ldr	r3, [r4, #4]
 800c656:	dd0b      	ble.n	800c670 <_printf_float+0x19c>
 800c658:	6121      	str	r1, [r4, #16]
 800c65a:	b913      	cbnz	r3, 800c662 <_printf_float+0x18e>
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	07d0      	lsls	r0, r2, #31
 800c660:	d502      	bpl.n	800c668 <_printf_float+0x194>
 800c662:	3301      	adds	r3, #1
 800c664:	440b      	add	r3, r1
 800c666:	6123      	str	r3, [r4, #16]
 800c668:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c66a:	f04f 0900 	mov.w	r9, #0
 800c66e:	e7db      	b.n	800c628 <_printf_float+0x154>
 800c670:	b913      	cbnz	r3, 800c678 <_printf_float+0x1a4>
 800c672:	6822      	ldr	r2, [r4, #0]
 800c674:	07d2      	lsls	r2, r2, #31
 800c676:	d501      	bpl.n	800c67c <_printf_float+0x1a8>
 800c678:	3302      	adds	r3, #2
 800c67a:	e7f4      	b.n	800c666 <_printf_float+0x192>
 800c67c:	2301      	movs	r3, #1
 800c67e:	e7f2      	b.n	800c666 <_printf_float+0x192>
 800c680:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c686:	4299      	cmp	r1, r3
 800c688:	db05      	blt.n	800c696 <_printf_float+0x1c2>
 800c68a:	6823      	ldr	r3, [r4, #0]
 800c68c:	6121      	str	r1, [r4, #16]
 800c68e:	07d8      	lsls	r0, r3, #31
 800c690:	d5ea      	bpl.n	800c668 <_printf_float+0x194>
 800c692:	1c4b      	adds	r3, r1, #1
 800c694:	e7e7      	b.n	800c666 <_printf_float+0x192>
 800c696:	2900      	cmp	r1, #0
 800c698:	bfd4      	ite	le
 800c69a:	f1c1 0202 	rsble	r2, r1, #2
 800c69e:	2201      	movgt	r2, #1
 800c6a0:	4413      	add	r3, r2
 800c6a2:	e7e0      	b.n	800c666 <_printf_float+0x192>
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	055a      	lsls	r2, r3, #21
 800c6a8:	d407      	bmi.n	800c6ba <_printf_float+0x1e6>
 800c6aa:	6923      	ldr	r3, [r4, #16]
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	47b8      	blx	r7
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	d12b      	bne.n	800c710 <_printf_float+0x23c>
 800c6b8:	e767      	b.n	800c58a <_printf_float+0xb6>
 800c6ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c6be:	f240 80dd 	bls.w	800c87c <_printf_float+0x3a8>
 800c6c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f7f4 f9d5 	bl	8000a78 <__aeabi_dcmpeq>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d033      	beq.n	800c73a <_printf_float+0x266>
 800c6d2:	4a37      	ldr	r2, [pc, #220]	@ (800c7b0 <_printf_float+0x2dc>)
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4628      	mov	r0, r5
 800c6da:	47b8      	blx	r7
 800c6dc:	3001      	adds	r0, #1
 800c6de:	f43f af54 	beq.w	800c58a <_printf_float+0xb6>
 800c6e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c6e6:	4543      	cmp	r3, r8
 800c6e8:	db02      	blt.n	800c6f0 <_printf_float+0x21c>
 800c6ea:	6823      	ldr	r3, [r4, #0]
 800c6ec:	07d8      	lsls	r0, r3, #31
 800c6ee:	d50f      	bpl.n	800c710 <_printf_float+0x23c>
 800c6f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6f4:	4631      	mov	r1, r6
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	47b8      	blx	r7
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	f43f af45 	beq.w	800c58a <_printf_float+0xb6>
 800c700:	f04f 0900 	mov.w	r9, #0
 800c704:	f108 38ff 	add.w	r8, r8, #4294967295
 800c708:	f104 0a1a 	add.w	sl, r4, #26
 800c70c:	45c8      	cmp	r8, r9
 800c70e:	dc09      	bgt.n	800c724 <_printf_float+0x250>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	079b      	lsls	r3, r3, #30
 800c714:	f100 8103 	bmi.w	800c91e <_printf_float+0x44a>
 800c718:	68e0      	ldr	r0, [r4, #12]
 800c71a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c71c:	4298      	cmp	r0, r3
 800c71e:	bfb8      	it	lt
 800c720:	4618      	movlt	r0, r3
 800c722:	e734      	b.n	800c58e <_printf_float+0xba>
 800c724:	2301      	movs	r3, #1
 800c726:	4652      	mov	r2, sl
 800c728:	4631      	mov	r1, r6
 800c72a:	4628      	mov	r0, r5
 800c72c:	47b8      	blx	r7
 800c72e:	3001      	adds	r0, #1
 800c730:	f43f af2b 	beq.w	800c58a <_printf_float+0xb6>
 800c734:	f109 0901 	add.w	r9, r9, #1
 800c738:	e7e8      	b.n	800c70c <_printf_float+0x238>
 800c73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dc39      	bgt.n	800c7b4 <_printf_float+0x2e0>
 800c740:	4a1b      	ldr	r2, [pc, #108]	@ (800c7b0 <_printf_float+0x2dc>)
 800c742:	2301      	movs	r3, #1
 800c744:	4631      	mov	r1, r6
 800c746:	4628      	mov	r0, r5
 800c748:	47b8      	blx	r7
 800c74a:	3001      	adds	r0, #1
 800c74c:	f43f af1d 	beq.w	800c58a <_printf_float+0xb6>
 800c750:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c754:	ea59 0303 	orrs.w	r3, r9, r3
 800c758:	d102      	bne.n	800c760 <_printf_float+0x28c>
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	07d9      	lsls	r1, r3, #31
 800c75e:	d5d7      	bpl.n	800c710 <_printf_float+0x23c>
 800c760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c764:	4631      	mov	r1, r6
 800c766:	4628      	mov	r0, r5
 800c768:	47b8      	blx	r7
 800c76a:	3001      	adds	r0, #1
 800c76c:	f43f af0d 	beq.w	800c58a <_printf_float+0xb6>
 800c770:	f04f 0a00 	mov.w	sl, #0
 800c774:	f104 0b1a 	add.w	fp, r4, #26
 800c778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c77a:	425b      	negs	r3, r3
 800c77c:	4553      	cmp	r3, sl
 800c77e:	dc01      	bgt.n	800c784 <_printf_float+0x2b0>
 800c780:	464b      	mov	r3, r9
 800c782:	e793      	b.n	800c6ac <_printf_float+0x1d8>
 800c784:	2301      	movs	r3, #1
 800c786:	465a      	mov	r2, fp
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	f43f aefb 	beq.w	800c58a <_printf_float+0xb6>
 800c794:	f10a 0a01 	add.w	sl, sl, #1
 800c798:	e7ee      	b.n	800c778 <_printf_float+0x2a4>
 800c79a:	bf00      	nop
 800c79c:	7fefffff 	.word	0x7fefffff
 800c7a0:	0800f144 	.word	0x0800f144
 800c7a4:	0800f148 	.word	0x0800f148
 800c7a8:	0800f14c 	.word	0x0800f14c
 800c7ac:	0800f150 	.word	0x0800f150
 800c7b0:	0800f154 	.word	0x0800f154
 800c7b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c7ba:	4553      	cmp	r3, sl
 800c7bc:	bfa8      	it	ge
 800c7be:	4653      	movge	r3, sl
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	4699      	mov	r9, r3
 800c7c4:	dc36      	bgt.n	800c834 <_printf_float+0x360>
 800c7c6:	f04f 0b00 	mov.w	fp, #0
 800c7ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ce:	f104 021a 	add.w	r2, r4, #26
 800c7d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7d4:	9306      	str	r3, [sp, #24]
 800c7d6:	eba3 0309 	sub.w	r3, r3, r9
 800c7da:	455b      	cmp	r3, fp
 800c7dc:	dc31      	bgt.n	800c842 <_printf_float+0x36e>
 800c7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e0:	459a      	cmp	sl, r3
 800c7e2:	dc3a      	bgt.n	800c85a <_printf_float+0x386>
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	07da      	lsls	r2, r3, #31
 800c7e8:	d437      	bmi.n	800c85a <_printf_float+0x386>
 800c7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ec:	ebaa 0903 	sub.w	r9, sl, r3
 800c7f0:	9b06      	ldr	r3, [sp, #24]
 800c7f2:	ebaa 0303 	sub.w	r3, sl, r3
 800c7f6:	4599      	cmp	r9, r3
 800c7f8:	bfa8      	it	ge
 800c7fa:	4699      	movge	r9, r3
 800c7fc:	f1b9 0f00 	cmp.w	r9, #0
 800c800:	dc33      	bgt.n	800c86a <_printf_float+0x396>
 800c802:	f04f 0800 	mov.w	r8, #0
 800c806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c80a:	f104 0b1a 	add.w	fp, r4, #26
 800c80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c810:	ebaa 0303 	sub.w	r3, sl, r3
 800c814:	eba3 0309 	sub.w	r3, r3, r9
 800c818:	4543      	cmp	r3, r8
 800c81a:	f77f af79 	ble.w	800c710 <_printf_float+0x23c>
 800c81e:	2301      	movs	r3, #1
 800c820:	465a      	mov	r2, fp
 800c822:	4631      	mov	r1, r6
 800c824:	4628      	mov	r0, r5
 800c826:	47b8      	blx	r7
 800c828:	3001      	adds	r0, #1
 800c82a:	f43f aeae 	beq.w	800c58a <_printf_float+0xb6>
 800c82e:	f108 0801 	add.w	r8, r8, #1
 800c832:	e7ec      	b.n	800c80e <_printf_float+0x33a>
 800c834:	4642      	mov	r2, r8
 800c836:	4631      	mov	r1, r6
 800c838:	4628      	mov	r0, r5
 800c83a:	47b8      	blx	r7
 800c83c:	3001      	adds	r0, #1
 800c83e:	d1c2      	bne.n	800c7c6 <_printf_float+0x2f2>
 800c840:	e6a3      	b.n	800c58a <_printf_float+0xb6>
 800c842:	2301      	movs	r3, #1
 800c844:	4631      	mov	r1, r6
 800c846:	4628      	mov	r0, r5
 800c848:	9206      	str	r2, [sp, #24]
 800c84a:	47b8      	blx	r7
 800c84c:	3001      	adds	r0, #1
 800c84e:	f43f ae9c 	beq.w	800c58a <_printf_float+0xb6>
 800c852:	9a06      	ldr	r2, [sp, #24]
 800c854:	f10b 0b01 	add.w	fp, fp, #1
 800c858:	e7bb      	b.n	800c7d2 <_printf_float+0x2fe>
 800c85a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c85e:	4631      	mov	r1, r6
 800c860:	4628      	mov	r0, r5
 800c862:	47b8      	blx	r7
 800c864:	3001      	adds	r0, #1
 800c866:	d1c0      	bne.n	800c7ea <_printf_float+0x316>
 800c868:	e68f      	b.n	800c58a <_printf_float+0xb6>
 800c86a:	9a06      	ldr	r2, [sp, #24]
 800c86c:	464b      	mov	r3, r9
 800c86e:	4442      	add	r2, r8
 800c870:	4631      	mov	r1, r6
 800c872:	4628      	mov	r0, r5
 800c874:	47b8      	blx	r7
 800c876:	3001      	adds	r0, #1
 800c878:	d1c3      	bne.n	800c802 <_printf_float+0x32e>
 800c87a:	e686      	b.n	800c58a <_printf_float+0xb6>
 800c87c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c880:	f1ba 0f01 	cmp.w	sl, #1
 800c884:	dc01      	bgt.n	800c88a <_printf_float+0x3b6>
 800c886:	07db      	lsls	r3, r3, #31
 800c888:	d536      	bpl.n	800c8f8 <_printf_float+0x424>
 800c88a:	2301      	movs	r3, #1
 800c88c:	4642      	mov	r2, r8
 800c88e:	4631      	mov	r1, r6
 800c890:	4628      	mov	r0, r5
 800c892:	47b8      	blx	r7
 800c894:	3001      	adds	r0, #1
 800c896:	f43f ae78 	beq.w	800c58a <_printf_float+0xb6>
 800c89a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c89e:	4631      	mov	r1, r6
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b8      	blx	r7
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f43f ae70 	beq.w	800c58a <_printf_float+0xb6>
 800c8aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8b6:	f7f4 f8df 	bl	8000a78 <__aeabi_dcmpeq>
 800c8ba:	b9c0      	cbnz	r0, 800c8ee <_printf_float+0x41a>
 800c8bc:	4653      	mov	r3, sl
 800c8be:	f108 0201 	add.w	r2, r8, #1
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	47b8      	blx	r7
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	d10c      	bne.n	800c8e6 <_printf_float+0x412>
 800c8cc:	e65d      	b.n	800c58a <_printf_float+0xb6>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	465a      	mov	r2, fp
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	47b8      	blx	r7
 800c8d8:	3001      	adds	r0, #1
 800c8da:	f43f ae56 	beq.w	800c58a <_printf_float+0xb6>
 800c8de:	f108 0801 	add.w	r8, r8, #1
 800c8e2:	45d0      	cmp	r8, sl
 800c8e4:	dbf3      	blt.n	800c8ce <_printf_float+0x3fa>
 800c8e6:	464b      	mov	r3, r9
 800c8e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c8ec:	e6df      	b.n	800c6ae <_printf_float+0x1da>
 800c8ee:	f04f 0800 	mov.w	r8, #0
 800c8f2:	f104 0b1a 	add.w	fp, r4, #26
 800c8f6:	e7f4      	b.n	800c8e2 <_printf_float+0x40e>
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	4642      	mov	r2, r8
 800c8fc:	e7e1      	b.n	800c8c2 <_printf_float+0x3ee>
 800c8fe:	2301      	movs	r3, #1
 800c900:	464a      	mov	r2, r9
 800c902:	4631      	mov	r1, r6
 800c904:	4628      	mov	r0, r5
 800c906:	47b8      	blx	r7
 800c908:	3001      	adds	r0, #1
 800c90a:	f43f ae3e 	beq.w	800c58a <_printf_float+0xb6>
 800c90e:	f108 0801 	add.w	r8, r8, #1
 800c912:	68e3      	ldr	r3, [r4, #12]
 800c914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c916:	1a5b      	subs	r3, r3, r1
 800c918:	4543      	cmp	r3, r8
 800c91a:	dcf0      	bgt.n	800c8fe <_printf_float+0x42a>
 800c91c:	e6fc      	b.n	800c718 <_printf_float+0x244>
 800c91e:	f04f 0800 	mov.w	r8, #0
 800c922:	f104 0919 	add.w	r9, r4, #25
 800c926:	e7f4      	b.n	800c912 <_printf_float+0x43e>

0800c928 <_printf_common>:
 800c928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c92c:	4616      	mov	r6, r2
 800c92e:	4698      	mov	r8, r3
 800c930:	688a      	ldr	r2, [r1, #8]
 800c932:	690b      	ldr	r3, [r1, #16]
 800c934:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c938:	4293      	cmp	r3, r2
 800c93a:	bfb8      	it	lt
 800c93c:	4613      	movlt	r3, r2
 800c93e:	6033      	str	r3, [r6, #0]
 800c940:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c944:	4607      	mov	r7, r0
 800c946:	460c      	mov	r4, r1
 800c948:	b10a      	cbz	r2, 800c94e <_printf_common+0x26>
 800c94a:	3301      	adds	r3, #1
 800c94c:	6033      	str	r3, [r6, #0]
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	0699      	lsls	r1, r3, #26
 800c952:	bf42      	ittt	mi
 800c954:	6833      	ldrmi	r3, [r6, #0]
 800c956:	3302      	addmi	r3, #2
 800c958:	6033      	strmi	r3, [r6, #0]
 800c95a:	6825      	ldr	r5, [r4, #0]
 800c95c:	f015 0506 	ands.w	r5, r5, #6
 800c960:	d106      	bne.n	800c970 <_printf_common+0x48>
 800c962:	f104 0a19 	add.w	sl, r4, #25
 800c966:	68e3      	ldr	r3, [r4, #12]
 800c968:	6832      	ldr	r2, [r6, #0]
 800c96a:	1a9b      	subs	r3, r3, r2
 800c96c:	42ab      	cmp	r3, r5
 800c96e:	dc26      	bgt.n	800c9be <_printf_common+0x96>
 800c970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c974:	6822      	ldr	r2, [r4, #0]
 800c976:	3b00      	subs	r3, #0
 800c978:	bf18      	it	ne
 800c97a:	2301      	movne	r3, #1
 800c97c:	0692      	lsls	r2, r2, #26
 800c97e:	d42b      	bmi.n	800c9d8 <_printf_common+0xb0>
 800c980:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c984:	4641      	mov	r1, r8
 800c986:	4638      	mov	r0, r7
 800c988:	47c8      	blx	r9
 800c98a:	3001      	adds	r0, #1
 800c98c:	d01e      	beq.n	800c9cc <_printf_common+0xa4>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	6922      	ldr	r2, [r4, #16]
 800c992:	f003 0306 	and.w	r3, r3, #6
 800c996:	2b04      	cmp	r3, #4
 800c998:	bf02      	ittt	eq
 800c99a:	68e5      	ldreq	r5, [r4, #12]
 800c99c:	6833      	ldreq	r3, [r6, #0]
 800c99e:	1aed      	subeq	r5, r5, r3
 800c9a0:	68a3      	ldr	r3, [r4, #8]
 800c9a2:	bf0c      	ite	eq
 800c9a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9a8:	2500      	movne	r5, #0
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	bfc4      	itt	gt
 800c9ae:	1a9b      	subgt	r3, r3, r2
 800c9b0:	18ed      	addgt	r5, r5, r3
 800c9b2:	2600      	movs	r6, #0
 800c9b4:	341a      	adds	r4, #26
 800c9b6:	42b5      	cmp	r5, r6
 800c9b8:	d11a      	bne.n	800c9f0 <_printf_common+0xc8>
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	e008      	b.n	800c9d0 <_printf_common+0xa8>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4652      	mov	r2, sl
 800c9c2:	4641      	mov	r1, r8
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	47c8      	blx	r9
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	d103      	bne.n	800c9d4 <_printf_common+0xac>
 800c9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d4:	3501      	adds	r5, #1
 800c9d6:	e7c6      	b.n	800c966 <_printf_common+0x3e>
 800c9d8:	18e1      	adds	r1, r4, r3
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	2030      	movs	r0, #48	@ 0x30
 800c9de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9e2:	4422      	add	r2, r4
 800c9e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9ec:	3302      	adds	r3, #2
 800c9ee:	e7c7      	b.n	800c980 <_printf_common+0x58>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	4622      	mov	r2, r4
 800c9f4:	4641      	mov	r1, r8
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	47c8      	blx	r9
 800c9fa:	3001      	adds	r0, #1
 800c9fc:	d0e6      	beq.n	800c9cc <_printf_common+0xa4>
 800c9fe:	3601      	adds	r6, #1
 800ca00:	e7d9      	b.n	800c9b6 <_printf_common+0x8e>
	...

0800ca04 <_printf_i>:
 800ca04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca08:	7e0f      	ldrb	r7, [r1, #24]
 800ca0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca0c:	2f78      	cmp	r7, #120	@ 0x78
 800ca0e:	4691      	mov	r9, r2
 800ca10:	4680      	mov	r8, r0
 800ca12:	460c      	mov	r4, r1
 800ca14:	469a      	mov	sl, r3
 800ca16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca1a:	d807      	bhi.n	800ca2c <_printf_i+0x28>
 800ca1c:	2f62      	cmp	r7, #98	@ 0x62
 800ca1e:	d80a      	bhi.n	800ca36 <_printf_i+0x32>
 800ca20:	2f00      	cmp	r7, #0
 800ca22:	f000 80d2 	beq.w	800cbca <_printf_i+0x1c6>
 800ca26:	2f58      	cmp	r7, #88	@ 0x58
 800ca28:	f000 80b9 	beq.w	800cb9e <_printf_i+0x19a>
 800ca2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca34:	e03a      	b.n	800caac <_printf_i+0xa8>
 800ca36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca3a:	2b15      	cmp	r3, #21
 800ca3c:	d8f6      	bhi.n	800ca2c <_printf_i+0x28>
 800ca3e:	a101      	add	r1, pc, #4	@ (adr r1, 800ca44 <_printf_i+0x40>)
 800ca40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca44:	0800ca9d 	.word	0x0800ca9d
 800ca48:	0800cab1 	.word	0x0800cab1
 800ca4c:	0800ca2d 	.word	0x0800ca2d
 800ca50:	0800ca2d 	.word	0x0800ca2d
 800ca54:	0800ca2d 	.word	0x0800ca2d
 800ca58:	0800ca2d 	.word	0x0800ca2d
 800ca5c:	0800cab1 	.word	0x0800cab1
 800ca60:	0800ca2d 	.word	0x0800ca2d
 800ca64:	0800ca2d 	.word	0x0800ca2d
 800ca68:	0800ca2d 	.word	0x0800ca2d
 800ca6c:	0800ca2d 	.word	0x0800ca2d
 800ca70:	0800cbb1 	.word	0x0800cbb1
 800ca74:	0800cadb 	.word	0x0800cadb
 800ca78:	0800cb6b 	.word	0x0800cb6b
 800ca7c:	0800ca2d 	.word	0x0800ca2d
 800ca80:	0800ca2d 	.word	0x0800ca2d
 800ca84:	0800cbd3 	.word	0x0800cbd3
 800ca88:	0800ca2d 	.word	0x0800ca2d
 800ca8c:	0800cadb 	.word	0x0800cadb
 800ca90:	0800ca2d 	.word	0x0800ca2d
 800ca94:	0800ca2d 	.word	0x0800ca2d
 800ca98:	0800cb73 	.word	0x0800cb73
 800ca9c:	6833      	ldr	r3, [r6, #0]
 800ca9e:	1d1a      	adds	r2, r3, #4
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6032      	str	r2, [r6, #0]
 800caa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800caa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800caac:	2301      	movs	r3, #1
 800caae:	e09d      	b.n	800cbec <_printf_i+0x1e8>
 800cab0:	6833      	ldr	r3, [r6, #0]
 800cab2:	6820      	ldr	r0, [r4, #0]
 800cab4:	1d19      	adds	r1, r3, #4
 800cab6:	6031      	str	r1, [r6, #0]
 800cab8:	0606      	lsls	r6, r0, #24
 800caba:	d501      	bpl.n	800cac0 <_printf_i+0xbc>
 800cabc:	681d      	ldr	r5, [r3, #0]
 800cabe:	e003      	b.n	800cac8 <_printf_i+0xc4>
 800cac0:	0645      	lsls	r5, r0, #25
 800cac2:	d5fb      	bpl.n	800cabc <_printf_i+0xb8>
 800cac4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cac8:	2d00      	cmp	r5, #0
 800caca:	da03      	bge.n	800cad4 <_printf_i+0xd0>
 800cacc:	232d      	movs	r3, #45	@ 0x2d
 800cace:	426d      	negs	r5, r5
 800cad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cad4:	4859      	ldr	r0, [pc, #356]	@ (800cc3c <_printf_i+0x238>)
 800cad6:	230a      	movs	r3, #10
 800cad8:	e011      	b.n	800cafe <_printf_i+0xfa>
 800cada:	6821      	ldr	r1, [r4, #0]
 800cadc:	6833      	ldr	r3, [r6, #0]
 800cade:	0608      	lsls	r0, r1, #24
 800cae0:	f853 5b04 	ldr.w	r5, [r3], #4
 800cae4:	d402      	bmi.n	800caec <_printf_i+0xe8>
 800cae6:	0649      	lsls	r1, r1, #25
 800cae8:	bf48      	it	mi
 800caea:	b2ad      	uxthmi	r5, r5
 800caec:	2f6f      	cmp	r7, #111	@ 0x6f
 800caee:	4853      	ldr	r0, [pc, #332]	@ (800cc3c <_printf_i+0x238>)
 800caf0:	6033      	str	r3, [r6, #0]
 800caf2:	bf14      	ite	ne
 800caf4:	230a      	movne	r3, #10
 800caf6:	2308      	moveq	r3, #8
 800caf8:	2100      	movs	r1, #0
 800cafa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cafe:	6866      	ldr	r6, [r4, #4]
 800cb00:	60a6      	str	r6, [r4, #8]
 800cb02:	2e00      	cmp	r6, #0
 800cb04:	bfa2      	ittt	ge
 800cb06:	6821      	ldrge	r1, [r4, #0]
 800cb08:	f021 0104 	bicge.w	r1, r1, #4
 800cb0c:	6021      	strge	r1, [r4, #0]
 800cb0e:	b90d      	cbnz	r5, 800cb14 <_printf_i+0x110>
 800cb10:	2e00      	cmp	r6, #0
 800cb12:	d04b      	beq.n	800cbac <_printf_i+0x1a8>
 800cb14:	4616      	mov	r6, r2
 800cb16:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb1a:	fb03 5711 	mls	r7, r3, r1, r5
 800cb1e:	5dc7      	ldrb	r7, [r0, r7]
 800cb20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb24:	462f      	mov	r7, r5
 800cb26:	42bb      	cmp	r3, r7
 800cb28:	460d      	mov	r5, r1
 800cb2a:	d9f4      	bls.n	800cb16 <_printf_i+0x112>
 800cb2c:	2b08      	cmp	r3, #8
 800cb2e:	d10b      	bne.n	800cb48 <_printf_i+0x144>
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	07df      	lsls	r7, r3, #31
 800cb34:	d508      	bpl.n	800cb48 <_printf_i+0x144>
 800cb36:	6923      	ldr	r3, [r4, #16]
 800cb38:	6861      	ldr	r1, [r4, #4]
 800cb3a:	4299      	cmp	r1, r3
 800cb3c:	bfde      	ittt	le
 800cb3e:	2330      	movle	r3, #48	@ 0x30
 800cb40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb48:	1b92      	subs	r2, r2, r6
 800cb4a:	6122      	str	r2, [r4, #16]
 800cb4c:	f8cd a000 	str.w	sl, [sp]
 800cb50:	464b      	mov	r3, r9
 800cb52:	aa03      	add	r2, sp, #12
 800cb54:	4621      	mov	r1, r4
 800cb56:	4640      	mov	r0, r8
 800cb58:	f7ff fee6 	bl	800c928 <_printf_common>
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	d14a      	bne.n	800cbf6 <_printf_i+0x1f2>
 800cb60:	f04f 30ff 	mov.w	r0, #4294967295
 800cb64:	b004      	add	sp, #16
 800cb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	f043 0320 	orr.w	r3, r3, #32
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	4833      	ldr	r0, [pc, #204]	@ (800cc40 <_printf_i+0x23c>)
 800cb74:	2778      	movs	r7, #120	@ 0x78
 800cb76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	6831      	ldr	r1, [r6, #0]
 800cb7e:	061f      	lsls	r7, r3, #24
 800cb80:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb84:	d402      	bmi.n	800cb8c <_printf_i+0x188>
 800cb86:	065f      	lsls	r7, r3, #25
 800cb88:	bf48      	it	mi
 800cb8a:	b2ad      	uxthmi	r5, r5
 800cb8c:	6031      	str	r1, [r6, #0]
 800cb8e:	07d9      	lsls	r1, r3, #31
 800cb90:	bf44      	itt	mi
 800cb92:	f043 0320 	orrmi.w	r3, r3, #32
 800cb96:	6023      	strmi	r3, [r4, #0]
 800cb98:	b11d      	cbz	r5, 800cba2 <_printf_i+0x19e>
 800cb9a:	2310      	movs	r3, #16
 800cb9c:	e7ac      	b.n	800caf8 <_printf_i+0xf4>
 800cb9e:	4827      	ldr	r0, [pc, #156]	@ (800cc3c <_printf_i+0x238>)
 800cba0:	e7e9      	b.n	800cb76 <_printf_i+0x172>
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	f023 0320 	bic.w	r3, r3, #32
 800cba8:	6023      	str	r3, [r4, #0]
 800cbaa:	e7f6      	b.n	800cb9a <_printf_i+0x196>
 800cbac:	4616      	mov	r6, r2
 800cbae:	e7bd      	b.n	800cb2c <_printf_i+0x128>
 800cbb0:	6833      	ldr	r3, [r6, #0]
 800cbb2:	6825      	ldr	r5, [r4, #0]
 800cbb4:	6961      	ldr	r1, [r4, #20]
 800cbb6:	1d18      	adds	r0, r3, #4
 800cbb8:	6030      	str	r0, [r6, #0]
 800cbba:	062e      	lsls	r6, r5, #24
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	d501      	bpl.n	800cbc4 <_printf_i+0x1c0>
 800cbc0:	6019      	str	r1, [r3, #0]
 800cbc2:	e002      	b.n	800cbca <_printf_i+0x1c6>
 800cbc4:	0668      	lsls	r0, r5, #25
 800cbc6:	d5fb      	bpl.n	800cbc0 <_printf_i+0x1bc>
 800cbc8:	8019      	strh	r1, [r3, #0]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	6123      	str	r3, [r4, #16]
 800cbce:	4616      	mov	r6, r2
 800cbd0:	e7bc      	b.n	800cb4c <_printf_i+0x148>
 800cbd2:	6833      	ldr	r3, [r6, #0]
 800cbd4:	1d1a      	adds	r2, r3, #4
 800cbd6:	6032      	str	r2, [r6, #0]
 800cbd8:	681e      	ldr	r6, [r3, #0]
 800cbda:	6862      	ldr	r2, [r4, #4]
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f7f3 face 	bl	8000180 <memchr>
 800cbe4:	b108      	cbz	r0, 800cbea <_printf_i+0x1e6>
 800cbe6:	1b80      	subs	r0, r0, r6
 800cbe8:	6060      	str	r0, [r4, #4]
 800cbea:	6863      	ldr	r3, [r4, #4]
 800cbec:	6123      	str	r3, [r4, #16]
 800cbee:	2300      	movs	r3, #0
 800cbf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbf4:	e7aa      	b.n	800cb4c <_printf_i+0x148>
 800cbf6:	6923      	ldr	r3, [r4, #16]
 800cbf8:	4632      	mov	r2, r6
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	4640      	mov	r0, r8
 800cbfe:	47d0      	blx	sl
 800cc00:	3001      	adds	r0, #1
 800cc02:	d0ad      	beq.n	800cb60 <_printf_i+0x15c>
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	079b      	lsls	r3, r3, #30
 800cc08:	d413      	bmi.n	800cc32 <_printf_i+0x22e>
 800cc0a:	68e0      	ldr	r0, [r4, #12]
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	4298      	cmp	r0, r3
 800cc10:	bfb8      	it	lt
 800cc12:	4618      	movlt	r0, r3
 800cc14:	e7a6      	b.n	800cb64 <_printf_i+0x160>
 800cc16:	2301      	movs	r3, #1
 800cc18:	4632      	mov	r2, r6
 800cc1a:	4649      	mov	r1, r9
 800cc1c:	4640      	mov	r0, r8
 800cc1e:	47d0      	blx	sl
 800cc20:	3001      	adds	r0, #1
 800cc22:	d09d      	beq.n	800cb60 <_printf_i+0x15c>
 800cc24:	3501      	adds	r5, #1
 800cc26:	68e3      	ldr	r3, [r4, #12]
 800cc28:	9903      	ldr	r1, [sp, #12]
 800cc2a:	1a5b      	subs	r3, r3, r1
 800cc2c:	42ab      	cmp	r3, r5
 800cc2e:	dcf2      	bgt.n	800cc16 <_printf_i+0x212>
 800cc30:	e7eb      	b.n	800cc0a <_printf_i+0x206>
 800cc32:	2500      	movs	r5, #0
 800cc34:	f104 0619 	add.w	r6, r4, #25
 800cc38:	e7f5      	b.n	800cc26 <_printf_i+0x222>
 800cc3a:	bf00      	nop
 800cc3c:	0800f156 	.word	0x0800f156
 800cc40:	0800f167 	.word	0x0800f167

0800cc44 <std>:
 800cc44:	2300      	movs	r3, #0
 800cc46:	b510      	push	{r4, lr}
 800cc48:	4604      	mov	r4, r0
 800cc4a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc52:	6083      	str	r3, [r0, #8]
 800cc54:	8181      	strh	r1, [r0, #12]
 800cc56:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc58:	81c2      	strh	r2, [r0, #14]
 800cc5a:	6183      	str	r3, [r0, #24]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	2208      	movs	r2, #8
 800cc60:	305c      	adds	r0, #92	@ 0x5c
 800cc62:	f000 f914 	bl	800ce8e <memset>
 800cc66:	4b0d      	ldr	r3, [pc, #52]	@ (800cc9c <std+0x58>)
 800cc68:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cca0 <std+0x5c>)
 800cc6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cca4 <std+0x60>)
 800cc70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc72:	4b0d      	ldr	r3, [pc, #52]	@ (800cca8 <std+0x64>)
 800cc74:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc76:	4b0d      	ldr	r3, [pc, #52]	@ (800ccac <std+0x68>)
 800cc78:	6224      	str	r4, [r4, #32]
 800cc7a:	429c      	cmp	r4, r3
 800cc7c:	d006      	beq.n	800cc8c <std+0x48>
 800cc7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc82:	4294      	cmp	r4, r2
 800cc84:	d002      	beq.n	800cc8c <std+0x48>
 800cc86:	33d0      	adds	r3, #208	@ 0xd0
 800cc88:	429c      	cmp	r4, r3
 800cc8a:	d105      	bne.n	800cc98 <std+0x54>
 800cc8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc94:	f000 b978 	b.w	800cf88 <__retarget_lock_init_recursive>
 800cc98:	bd10      	pop	{r4, pc}
 800cc9a:	bf00      	nop
 800cc9c:	0800ce09 	.word	0x0800ce09
 800cca0:	0800ce2b 	.word	0x0800ce2b
 800cca4:	0800ce63 	.word	0x0800ce63
 800cca8:	0800ce87 	.word	0x0800ce87
 800ccac:	20001e1c 	.word	0x20001e1c

0800ccb0 <stdio_exit_handler>:
 800ccb0:	4a02      	ldr	r2, [pc, #8]	@ (800ccbc <stdio_exit_handler+0xc>)
 800ccb2:	4903      	ldr	r1, [pc, #12]	@ (800ccc0 <stdio_exit_handler+0x10>)
 800ccb4:	4803      	ldr	r0, [pc, #12]	@ (800ccc4 <stdio_exit_handler+0x14>)
 800ccb6:	f000 b869 	b.w	800cd8c <_fwalk_sglue>
 800ccba:	bf00      	nop
 800ccbc:	20000108 	.word	0x20000108
 800ccc0:	0800e8e5 	.word	0x0800e8e5
 800ccc4:	20000118 	.word	0x20000118

0800ccc8 <cleanup_stdio>:
 800ccc8:	6841      	ldr	r1, [r0, #4]
 800ccca:	4b0c      	ldr	r3, [pc, #48]	@ (800ccfc <cleanup_stdio+0x34>)
 800cccc:	4299      	cmp	r1, r3
 800ccce:	b510      	push	{r4, lr}
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	d001      	beq.n	800ccd8 <cleanup_stdio+0x10>
 800ccd4:	f001 fe06 	bl	800e8e4 <_fflush_r>
 800ccd8:	68a1      	ldr	r1, [r4, #8]
 800ccda:	4b09      	ldr	r3, [pc, #36]	@ (800cd00 <cleanup_stdio+0x38>)
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	d002      	beq.n	800cce6 <cleanup_stdio+0x1e>
 800cce0:	4620      	mov	r0, r4
 800cce2:	f001 fdff 	bl	800e8e4 <_fflush_r>
 800cce6:	68e1      	ldr	r1, [r4, #12]
 800cce8:	4b06      	ldr	r3, [pc, #24]	@ (800cd04 <cleanup_stdio+0x3c>)
 800ccea:	4299      	cmp	r1, r3
 800ccec:	d004      	beq.n	800ccf8 <cleanup_stdio+0x30>
 800ccee:	4620      	mov	r0, r4
 800ccf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf4:	f001 bdf6 	b.w	800e8e4 <_fflush_r>
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20001e1c 	.word	0x20001e1c
 800cd00:	20001e84 	.word	0x20001e84
 800cd04:	20001eec 	.word	0x20001eec

0800cd08 <global_stdio_init.part.0>:
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	4b0b      	ldr	r3, [pc, #44]	@ (800cd38 <global_stdio_init.part.0+0x30>)
 800cd0c:	4c0b      	ldr	r4, [pc, #44]	@ (800cd3c <global_stdio_init.part.0+0x34>)
 800cd0e:	4a0c      	ldr	r2, [pc, #48]	@ (800cd40 <global_stdio_init.part.0+0x38>)
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	4620      	mov	r0, r4
 800cd14:	2200      	movs	r2, #0
 800cd16:	2104      	movs	r1, #4
 800cd18:	f7ff ff94 	bl	800cc44 <std>
 800cd1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd20:	2201      	movs	r2, #1
 800cd22:	2109      	movs	r1, #9
 800cd24:	f7ff ff8e 	bl	800cc44 <std>
 800cd28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd2c:	2202      	movs	r2, #2
 800cd2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd32:	2112      	movs	r1, #18
 800cd34:	f7ff bf86 	b.w	800cc44 <std>
 800cd38:	20001f54 	.word	0x20001f54
 800cd3c:	20001e1c 	.word	0x20001e1c
 800cd40:	0800ccb1 	.word	0x0800ccb1

0800cd44 <__sfp_lock_acquire>:
 800cd44:	4801      	ldr	r0, [pc, #4]	@ (800cd4c <__sfp_lock_acquire+0x8>)
 800cd46:	f000 b920 	b.w	800cf8a <__retarget_lock_acquire_recursive>
 800cd4a:	bf00      	nop
 800cd4c:	20001f5d 	.word	0x20001f5d

0800cd50 <__sfp_lock_release>:
 800cd50:	4801      	ldr	r0, [pc, #4]	@ (800cd58 <__sfp_lock_release+0x8>)
 800cd52:	f000 b91b 	b.w	800cf8c <__retarget_lock_release_recursive>
 800cd56:	bf00      	nop
 800cd58:	20001f5d 	.word	0x20001f5d

0800cd5c <__sinit>:
 800cd5c:	b510      	push	{r4, lr}
 800cd5e:	4604      	mov	r4, r0
 800cd60:	f7ff fff0 	bl	800cd44 <__sfp_lock_acquire>
 800cd64:	6a23      	ldr	r3, [r4, #32]
 800cd66:	b11b      	cbz	r3, 800cd70 <__sinit+0x14>
 800cd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd6c:	f7ff bff0 	b.w	800cd50 <__sfp_lock_release>
 800cd70:	4b04      	ldr	r3, [pc, #16]	@ (800cd84 <__sinit+0x28>)
 800cd72:	6223      	str	r3, [r4, #32]
 800cd74:	4b04      	ldr	r3, [pc, #16]	@ (800cd88 <__sinit+0x2c>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1f5      	bne.n	800cd68 <__sinit+0xc>
 800cd7c:	f7ff ffc4 	bl	800cd08 <global_stdio_init.part.0>
 800cd80:	e7f2      	b.n	800cd68 <__sinit+0xc>
 800cd82:	bf00      	nop
 800cd84:	0800ccc9 	.word	0x0800ccc9
 800cd88:	20001f54 	.word	0x20001f54

0800cd8c <_fwalk_sglue>:
 800cd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd90:	4607      	mov	r7, r0
 800cd92:	4688      	mov	r8, r1
 800cd94:	4614      	mov	r4, r2
 800cd96:	2600      	movs	r6, #0
 800cd98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd9c:	f1b9 0901 	subs.w	r9, r9, #1
 800cda0:	d505      	bpl.n	800cdae <_fwalk_sglue+0x22>
 800cda2:	6824      	ldr	r4, [r4, #0]
 800cda4:	2c00      	cmp	r4, #0
 800cda6:	d1f7      	bne.n	800cd98 <_fwalk_sglue+0xc>
 800cda8:	4630      	mov	r0, r6
 800cdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdae:	89ab      	ldrh	r3, [r5, #12]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d907      	bls.n	800cdc4 <_fwalk_sglue+0x38>
 800cdb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	d003      	beq.n	800cdc4 <_fwalk_sglue+0x38>
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	47c0      	blx	r8
 800cdc2:	4306      	orrs	r6, r0
 800cdc4:	3568      	adds	r5, #104	@ 0x68
 800cdc6:	e7e9      	b.n	800cd9c <_fwalk_sglue+0x10>

0800cdc8 <siprintf>:
 800cdc8:	b40e      	push	{r1, r2, r3}
 800cdca:	b500      	push	{lr}
 800cdcc:	b09c      	sub	sp, #112	@ 0x70
 800cdce:	ab1d      	add	r3, sp, #116	@ 0x74
 800cdd0:	9002      	str	r0, [sp, #8]
 800cdd2:	9006      	str	r0, [sp, #24]
 800cdd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cdd8:	4809      	ldr	r0, [pc, #36]	@ (800ce00 <siprintf+0x38>)
 800cdda:	9107      	str	r1, [sp, #28]
 800cddc:	9104      	str	r1, [sp, #16]
 800cdde:	4909      	ldr	r1, [pc, #36]	@ (800ce04 <siprintf+0x3c>)
 800cde0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cde4:	9105      	str	r1, [sp, #20]
 800cde6:	6800      	ldr	r0, [r0, #0]
 800cde8:	9301      	str	r3, [sp, #4]
 800cdea:	a902      	add	r1, sp, #8
 800cdec:	f001 fbfa 	bl	800e5e4 <_svfiprintf_r>
 800cdf0:	9b02      	ldr	r3, [sp, #8]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	b01c      	add	sp, #112	@ 0x70
 800cdf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdfc:	b003      	add	sp, #12
 800cdfe:	4770      	bx	lr
 800ce00:	20000114 	.word	0x20000114
 800ce04:	ffff0208 	.word	0xffff0208

0800ce08 <__sread>:
 800ce08:	b510      	push	{r4, lr}
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce10:	f000 f86c 	bl	800ceec <_read_r>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	bfab      	itete	ge
 800ce18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce1c:	181b      	addge	r3, r3, r0
 800ce1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce22:	bfac      	ite	ge
 800ce24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce26:	81a3      	strhlt	r3, [r4, #12]
 800ce28:	bd10      	pop	{r4, pc}

0800ce2a <__swrite>:
 800ce2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce2e:	461f      	mov	r7, r3
 800ce30:	898b      	ldrh	r3, [r1, #12]
 800ce32:	05db      	lsls	r3, r3, #23
 800ce34:	4605      	mov	r5, r0
 800ce36:	460c      	mov	r4, r1
 800ce38:	4616      	mov	r6, r2
 800ce3a:	d505      	bpl.n	800ce48 <__swrite+0x1e>
 800ce3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce40:	2302      	movs	r3, #2
 800ce42:	2200      	movs	r2, #0
 800ce44:	f000 f840 	bl	800cec8 <_lseek_r>
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce52:	81a3      	strh	r3, [r4, #12]
 800ce54:	4632      	mov	r2, r6
 800ce56:	463b      	mov	r3, r7
 800ce58:	4628      	mov	r0, r5
 800ce5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5e:	f000 b857 	b.w	800cf10 <_write_r>

0800ce62 <__sseek>:
 800ce62:	b510      	push	{r4, lr}
 800ce64:	460c      	mov	r4, r1
 800ce66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce6a:	f000 f82d 	bl	800cec8 <_lseek_r>
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	bf15      	itete	ne
 800ce74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce7e:	81a3      	strheq	r3, [r4, #12]
 800ce80:	bf18      	it	ne
 800ce82:	81a3      	strhne	r3, [r4, #12]
 800ce84:	bd10      	pop	{r4, pc}

0800ce86 <__sclose>:
 800ce86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce8a:	f000 b80d 	b.w	800cea8 <_close_r>

0800ce8e <memset>:
 800ce8e:	4402      	add	r2, r0
 800ce90:	4603      	mov	r3, r0
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d100      	bne.n	800ce98 <memset+0xa>
 800ce96:	4770      	bx	lr
 800ce98:	f803 1b01 	strb.w	r1, [r3], #1
 800ce9c:	e7f9      	b.n	800ce92 <memset+0x4>
	...

0800cea0 <_localeconv_r>:
 800cea0:	4800      	ldr	r0, [pc, #0]	@ (800cea4 <_localeconv_r+0x4>)
 800cea2:	4770      	bx	lr
 800cea4:	20000254 	.word	0x20000254

0800cea8 <_close_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d06      	ldr	r5, [pc, #24]	@ (800cec4 <_close_r+0x1c>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	f7f5 fa0c 	bl	80022d0 <_close>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_close_r+0x1a>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_close_r+0x1a>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	20001f58 	.word	0x20001f58

0800cec8 <_lseek_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4d07      	ldr	r5, [pc, #28]	@ (800cee8 <_lseek_r+0x20>)
 800cecc:	4604      	mov	r4, r0
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	602a      	str	r2, [r5, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	f7f5 fa21 	bl	800231e <_lseek>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_lseek_r+0x1e>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_lseek_r+0x1e>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	20001f58 	.word	0x20001f58

0800ceec <_read_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d07      	ldr	r5, [pc, #28]	@ (800cf0c <_read_r+0x20>)
 800cef0:	4604      	mov	r4, r0
 800cef2:	4608      	mov	r0, r1
 800cef4:	4611      	mov	r1, r2
 800cef6:	2200      	movs	r2, #0
 800cef8:	602a      	str	r2, [r5, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	f7f5 f9af 	bl	800225e <_read>
 800cf00:	1c43      	adds	r3, r0, #1
 800cf02:	d102      	bne.n	800cf0a <_read_r+0x1e>
 800cf04:	682b      	ldr	r3, [r5, #0]
 800cf06:	b103      	cbz	r3, 800cf0a <_read_r+0x1e>
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	bd38      	pop	{r3, r4, r5, pc}
 800cf0c:	20001f58 	.word	0x20001f58

0800cf10 <_write_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d07      	ldr	r5, [pc, #28]	@ (800cf30 <_write_r+0x20>)
 800cf14:	4604      	mov	r4, r0
 800cf16:	4608      	mov	r0, r1
 800cf18:	4611      	mov	r1, r2
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	602a      	str	r2, [r5, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f7f5 f9ba 	bl	8002298 <_write>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	d102      	bne.n	800cf2e <_write_r+0x1e>
 800cf28:	682b      	ldr	r3, [r5, #0]
 800cf2a:	b103      	cbz	r3, 800cf2e <_write_r+0x1e>
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	bd38      	pop	{r3, r4, r5, pc}
 800cf30:	20001f58 	.word	0x20001f58

0800cf34 <__errno>:
 800cf34:	4b01      	ldr	r3, [pc, #4]	@ (800cf3c <__errno+0x8>)
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	20000114 	.word	0x20000114

0800cf40 <__libc_init_array>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	4d0d      	ldr	r5, [pc, #52]	@ (800cf78 <__libc_init_array+0x38>)
 800cf44:	4c0d      	ldr	r4, [pc, #52]	@ (800cf7c <__libc_init_array+0x3c>)
 800cf46:	1b64      	subs	r4, r4, r5
 800cf48:	10a4      	asrs	r4, r4, #2
 800cf4a:	2600      	movs	r6, #0
 800cf4c:	42a6      	cmp	r6, r4
 800cf4e:	d109      	bne.n	800cf64 <__libc_init_array+0x24>
 800cf50:	4d0b      	ldr	r5, [pc, #44]	@ (800cf80 <__libc_init_array+0x40>)
 800cf52:	4c0c      	ldr	r4, [pc, #48]	@ (800cf84 <__libc_init_array+0x44>)
 800cf54:	f002 f864 	bl	800f020 <_init>
 800cf58:	1b64      	subs	r4, r4, r5
 800cf5a:	10a4      	asrs	r4, r4, #2
 800cf5c:	2600      	movs	r6, #0
 800cf5e:	42a6      	cmp	r6, r4
 800cf60:	d105      	bne.n	800cf6e <__libc_init_array+0x2e>
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf68:	4798      	blx	r3
 800cf6a:	3601      	adds	r6, #1
 800cf6c:	e7ee      	b.n	800cf4c <__libc_init_array+0xc>
 800cf6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf72:	4798      	blx	r3
 800cf74:	3601      	adds	r6, #1
 800cf76:	e7f2      	b.n	800cf5e <__libc_init_array+0x1e>
 800cf78:	0800f4c0 	.word	0x0800f4c0
 800cf7c:	0800f4c0 	.word	0x0800f4c0
 800cf80:	0800f4c0 	.word	0x0800f4c0
 800cf84:	0800f4c4 	.word	0x0800f4c4

0800cf88 <__retarget_lock_init_recursive>:
 800cf88:	4770      	bx	lr

0800cf8a <__retarget_lock_acquire_recursive>:
 800cf8a:	4770      	bx	lr

0800cf8c <__retarget_lock_release_recursive>:
 800cf8c:	4770      	bx	lr

0800cf8e <quorem>:
 800cf8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf92:	6903      	ldr	r3, [r0, #16]
 800cf94:	690c      	ldr	r4, [r1, #16]
 800cf96:	42a3      	cmp	r3, r4
 800cf98:	4607      	mov	r7, r0
 800cf9a:	db7e      	blt.n	800d09a <quorem+0x10c>
 800cf9c:	3c01      	subs	r4, #1
 800cf9e:	f101 0814 	add.w	r8, r1, #20
 800cfa2:	00a3      	lsls	r3, r4, #2
 800cfa4:	f100 0514 	add.w	r5, r0, #20
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfae:	9301      	str	r3, [sp, #4]
 800cfb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cfb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cfc0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cfc4:	d32e      	bcc.n	800d024 <quorem+0x96>
 800cfc6:	f04f 0a00 	mov.w	sl, #0
 800cfca:	46c4      	mov	ip, r8
 800cfcc:	46ae      	mov	lr, r5
 800cfce:	46d3      	mov	fp, sl
 800cfd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cfd4:	b298      	uxth	r0, r3
 800cfd6:	fb06 a000 	mla	r0, r6, r0, sl
 800cfda:	0c02      	lsrs	r2, r0, #16
 800cfdc:	0c1b      	lsrs	r3, r3, #16
 800cfde:	fb06 2303 	mla	r3, r6, r3, r2
 800cfe2:	f8de 2000 	ldr.w	r2, [lr]
 800cfe6:	b280      	uxth	r0, r0
 800cfe8:	b292      	uxth	r2, r2
 800cfea:	1a12      	subs	r2, r2, r0
 800cfec:	445a      	add	r2, fp
 800cfee:	f8de 0000 	ldr.w	r0, [lr]
 800cff2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cffc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d000:	b292      	uxth	r2, r2
 800d002:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d006:	45e1      	cmp	r9, ip
 800d008:	f84e 2b04 	str.w	r2, [lr], #4
 800d00c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d010:	d2de      	bcs.n	800cfd0 <quorem+0x42>
 800d012:	9b00      	ldr	r3, [sp, #0]
 800d014:	58eb      	ldr	r3, [r5, r3]
 800d016:	b92b      	cbnz	r3, 800d024 <quorem+0x96>
 800d018:	9b01      	ldr	r3, [sp, #4]
 800d01a:	3b04      	subs	r3, #4
 800d01c:	429d      	cmp	r5, r3
 800d01e:	461a      	mov	r2, r3
 800d020:	d32f      	bcc.n	800d082 <quorem+0xf4>
 800d022:	613c      	str	r4, [r7, #16]
 800d024:	4638      	mov	r0, r7
 800d026:	f001 f979 	bl	800e31c <__mcmp>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	db25      	blt.n	800d07a <quorem+0xec>
 800d02e:	4629      	mov	r1, r5
 800d030:	2000      	movs	r0, #0
 800d032:	f858 2b04 	ldr.w	r2, [r8], #4
 800d036:	f8d1 c000 	ldr.w	ip, [r1]
 800d03a:	fa1f fe82 	uxth.w	lr, r2
 800d03e:	fa1f f38c 	uxth.w	r3, ip
 800d042:	eba3 030e 	sub.w	r3, r3, lr
 800d046:	4403      	add	r3, r0
 800d048:	0c12      	lsrs	r2, r2, #16
 800d04a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d04e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d052:	b29b      	uxth	r3, r3
 800d054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d058:	45c1      	cmp	r9, r8
 800d05a:	f841 3b04 	str.w	r3, [r1], #4
 800d05e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d062:	d2e6      	bcs.n	800d032 <quorem+0xa4>
 800d064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d06c:	b922      	cbnz	r2, 800d078 <quorem+0xea>
 800d06e:	3b04      	subs	r3, #4
 800d070:	429d      	cmp	r5, r3
 800d072:	461a      	mov	r2, r3
 800d074:	d30b      	bcc.n	800d08e <quorem+0x100>
 800d076:	613c      	str	r4, [r7, #16]
 800d078:	3601      	adds	r6, #1
 800d07a:	4630      	mov	r0, r6
 800d07c:	b003      	add	sp, #12
 800d07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d082:	6812      	ldr	r2, [r2, #0]
 800d084:	3b04      	subs	r3, #4
 800d086:	2a00      	cmp	r2, #0
 800d088:	d1cb      	bne.n	800d022 <quorem+0x94>
 800d08a:	3c01      	subs	r4, #1
 800d08c:	e7c6      	b.n	800d01c <quorem+0x8e>
 800d08e:	6812      	ldr	r2, [r2, #0]
 800d090:	3b04      	subs	r3, #4
 800d092:	2a00      	cmp	r2, #0
 800d094:	d1ef      	bne.n	800d076 <quorem+0xe8>
 800d096:	3c01      	subs	r4, #1
 800d098:	e7ea      	b.n	800d070 <quorem+0xe2>
 800d09a:	2000      	movs	r0, #0
 800d09c:	e7ee      	b.n	800d07c <quorem+0xee>
	...

0800d0a0 <_dtoa_r>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	69c7      	ldr	r7, [r0, #28]
 800d0a6:	b099      	sub	sp, #100	@ 0x64
 800d0a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d0ac:	ec55 4b10 	vmov	r4, r5, d0
 800d0b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d0b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0b4:	4683      	mov	fp, r0
 800d0b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0ba:	b97f      	cbnz	r7, 800d0dc <_dtoa_r+0x3c>
 800d0bc:	2010      	movs	r0, #16
 800d0be:	f000 fdfd 	bl	800dcbc <malloc>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d0c8:	b920      	cbnz	r0, 800d0d4 <_dtoa_r+0x34>
 800d0ca:	4ba7      	ldr	r3, [pc, #668]	@ (800d368 <_dtoa_r+0x2c8>)
 800d0cc:	21ef      	movs	r1, #239	@ 0xef
 800d0ce:	48a7      	ldr	r0, [pc, #668]	@ (800d36c <_dtoa_r+0x2cc>)
 800d0d0:	f001 fc68 	bl	800e9a4 <__assert_func>
 800d0d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d0d8:	6007      	str	r7, [r0, #0]
 800d0da:	60c7      	str	r7, [r0, #12]
 800d0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0e0:	6819      	ldr	r1, [r3, #0]
 800d0e2:	b159      	cbz	r1, 800d0fc <_dtoa_r+0x5c>
 800d0e4:	685a      	ldr	r2, [r3, #4]
 800d0e6:	604a      	str	r2, [r1, #4]
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	4093      	lsls	r3, r2
 800d0ec:	608b      	str	r3, [r1, #8]
 800d0ee:	4658      	mov	r0, fp
 800d0f0:	f000 feda 	bl	800dea8 <_Bfree>
 800d0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	601a      	str	r2, [r3, #0]
 800d0fc:	1e2b      	subs	r3, r5, #0
 800d0fe:	bfb9      	ittee	lt
 800d100:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d104:	9303      	strlt	r3, [sp, #12]
 800d106:	2300      	movge	r3, #0
 800d108:	6033      	strge	r3, [r6, #0]
 800d10a:	9f03      	ldr	r7, [sp, #12]
 800d10c:	4b98      	ldr	r3, [pc, #608]	@ (800d370 <_dtoa_r+0x2d0>)
 800d10e:	bfbc      	itt	lt
 800d110:	2201      	movlt	r2, #1
 800d112:	6032      	strlt	r2, [r6, #0]
 800d114:	43bb      	bics	r3, r7
 800d116:	d112      	bne.n	800d13e <_dtoa_r+0x9e>
 800d118:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d11a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d11e:	6013      	str	r3, [r2, #0]
 800d120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d124:	4323      	orrs	r3, r4
 800d126:	f000 854d 	beq.w	800dbc4 <_dtoa_r+0xb24>
 800d12a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d12c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d384 <_dtoa_r+0x2e4>
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 854f 	beq.w	800dbd4 <_dtoa_r+0xb34>
 800d136:	f10a 0303 	add.w	r3, sl, #3
 800d13a:	f000 bd49 	b.w	800dbd0 <_dtoa_r+0xb30>
 800d13e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d142:	2200      	movs	r2, #0
 800d144:	ec51 0b17 	vmov	r0, r1, d7
 800d148:	2300      	movs	r3, #0
 800d14a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d14e:	f7f3 fc93 	bl	8000a78 <__aeabi_dcmpeq>
 800d152:	4680      	mov	r8, r0
 800d154:	b158      	cbz	r0, 800d16e <_dtoa_r+0xce>
 800d156:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d158:	2301      	movs	r3, #1
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d15e:	b113      	cbz	r3, 800d166 <_dtoa_r+0xc6>
 800d160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d162:	4b84      	ldr	r3, [pc, #528]	@ (800d374 <_dtoa_r+0x2d4>)
 800d164:	6013      	str	r3, [r2, #0]
 800d166:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d388 <_dtoa_r+0x2e8>
 800d16a:	f000 bd33 	b.w	800dbd4 <_dtoa_r+0xb34>
 800d16e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d172:	aa16      	add	r2, sp, #88	@ 0x58
 800d174:	a917      	add	r1, sp, #92	@ 0x5c
 800d176:	4658      	mov	r0, fp
 800d178:	f001 f980 	bl	800e47c <__d2b>
 800d17c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d180:	4681      	mov	r9, r0
 800d182:	2e00      	cmp	r6, #0
 800d184:	d077      	beq.n	800d276 <_dtoa_r+0x1d6>
 800d186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d188:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d194:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d198:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d19c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	4b74      	ldr	r3, [pc, #464]	@ (800d378 <_dtoa_r+0x2d8>)
 800d1a6:	f7f3 f847 	bl	8000238 <__aeabi_dsub>
 800d1aa:	a369      	add	r3, pc, #420	@ (adr r3, 800d350 <_dtoa_r+0x2b0>)
 800d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b0:	f7f3 f9fa 	bl	80005a8 <__aeabi_dmul>
 800d1b4:	a368      	add	r3, pc, #416	@ (adr r3, 800d358 <_dtoa_r+0x2b8>)
 800d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ba:	f7f3 f83f 	bl	800023c <__adddf3>
 800d1be:	4604      	mov	r4, r0
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	460d      	mov	r5, r1
 800d1c4:	f7f3 f986 	bl	80004d4 <__aeabi_i2d>
 800d1c8:	a365      	add	r3, pc, #404	@ (adr r3, 800d360 <_dtoa_r+0x2c0>)
 800d1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ce:	f7f3 f9eb 	bl	80005a8 <__aeabi_dmul>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	4629      	mov	r1, r5
 800d1da:	f7f3 f82f 	bl	800023c <__adddf3>
 800d1de:	4604      	mov	r4, r0
 800d1e0:	460d      	mov	r5, r1
 800d1e2:	f7f3 fc91 	bl	8000b08 <__aeabi_d2iz>
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	4607      	mov	r7, r0
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	f7f3 fc4c 	bl	8000a8c <__aeabi_dcmplt>
 800d1f4:	b140      	cbz	r0, 800d208 <_dtoa_r+0x168>
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	f7f3 f96c 	bl	80004d4 <__aeabi_i2d>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	462b      	mov	r3, r5
 800d200:	f7f3 fc3a 	bl	8000a78 <__aeabi_dcmpeq>
 800d204:	b900      	cbnz	r0, 800d208 <_dtoa_r+0x168>
 800d206:	3f01      	subs	r7, #1
 800d208:	2f16      	cmp	r7, #22
 800d20a:	d851      	bhi.n	800d2b0 <_dtoa_r+0x210>
 800d20c:	4b5b      	ldr	r3, [pc, #364]	@ (800d37c <_dtoa_r+0x2dc>)
 800d20e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d21a:	f7f3 fc37 	bl	8000a8c <__aeabi_dcmplt>
 800d21e:	2800      	cmp	r0, #0
 800d220:	d048      	beq.n	800d2b4 <_dtoa_r+0x214>
 800d222:	3f01      	subs	r7, #1
 800d224:	2300      	movs	r3, #0
 800d226:	9312      	str	r3, [sp, #72]	@ 0x48
 800d228:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d22a:	1b9b      	subs	r3, r3, r6
 800d22c:	1e5a      	subs	r2, r3, #1
 800d22e:	bf44      	itt	mi
 800d230:	f1c3 0801 	rsbmi	r8, r3, #1
 800d234:	2300      	movmi	r3, #0
 800d236:	9208      	str	r2, [sp, #32]
 800d238:	bf54      	ite	pl
 800d23a:	f04f 0800 	movpl.w	r8, #0
 800d23e:	9308      	strmi	r3, [sp, #32]
 800d240:	2f00      	cmp	r7, #0
 800d242:	db39      	blt.n	800d2b8 <_dtoa_r+0x218>
 800d244:	9b08      	ldr	r3, [sp, #32]
 800d246:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d248:	443b      	add	r3, r7
 800d24a:	9308      	str	r3, [sp, #32]
 800d24c:	2300      	movs	r3, #0
 800d24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d252:	2b09      	cmp	r3, #9
 800d254:	d864      	bhi.n	800d320 <_dtoa_r+0x280>
 800d256:	2b05      	cmp	r3, #5
 800d258:	bfc4      	itt	gt
 800d25a:	3b04      	subgt	r3, #4
 800d25c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d260:	f1a3 0302 	sub.w	r3, r3, #2
 800d264:	bfcc      	ite	gt
 800d266:	2400      	movgt	r4, #0
 800d268:	2401      	movle	r4, #1
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d863      	bhi.n	800d336 <_dtoa_r+0x296>
 800d26e:	e8df f003 	tbb	[pc, r3]
 800d272:	372a      	.short	0x372a
 800d274:	5535      	.short	0x5535
 800d276:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d27a:	441e      	add	r6, r3
 800d27c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d280:	2b20      	cmp	r3, #32
 800d282:	bfc1      	itttt	gt
 800d284:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d288:	409f      	lslgt	r7, r3
 800d28a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d28e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d292:	bfd6      	itet	le
 800d294:	f1c3 0320 	rsble	r3, r3, #32
 800d298:	ea47 0003 	orrgt.w	r0, r7, r3
 800d29c:	fa04 f003 	lslle.w	r0, r4, r3
 800d2a0:	f7f3 f908 	bl	80004b4 <__aeabi_ui2d>
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d2aa:	3e01      	subs	r6, #1
 800d2ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800d2ae:	e777      	b.n	800d1a0 <_dtoa_r+0x100>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e7b8      	b.n	800d226 <_dtoa_r+0x186>
 800d2b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d2b6:	e7b7      	b.n	800d228 <_dtoa_r+0x188>
 800d2b8:	427b      	negs	r3, r7
 800d2ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2bc:	2300      	movs	r3, #0
 800d2be:	eba8 0807 	sub.w	r8, r8, r7
 800d2c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2c4:	e7c4      	b.n	800d250 <_dtoa_r+0x1b0>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	dc35      	bgt.n	800d33c <_dtoa_r+0x29c>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	9307      	str	r3, [sp, #28]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2da:	e00b      	b.n	800d2f4 <_dtoa_r+0x254>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e7f3      	b.n	800d2c8 <_dtoa_r+0x228>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2e6:	18fb      	adds	r3, r7, r3
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	9307      	str	r3, [sp, #28]
 800d2f0:	bfb8      	it	lt
 800d2f2:	2301      	movlt	r3, #1
 800d2f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	2204      	movs	r2, #4
 800d2fc:	f102 0514 	add.w	r5, r2, #20
 800d300:	429d      	cmp	r5, r3
 800d302:	d91f      	bls.n	800d344 <_dtoa_r+0x2a4>
 800d304:	6041      	str	r1, [r0, #4]
 800d306:	4658      	mov	r0, fp
 800d308:	f000 fd8e 	bl	800de28 <_Balloc>
 800d30c:	4682      	mov	sl, r0
 800d30e:	2800      	cmp	r0, #0
 800d310:	d13c      	bne.n	800d38c <_dtoa_r+0x2ec>
 800d312:	4b1b      	ldr	r3, [pc, #108]	@ (800d380 <_dtoa_r+0x2e0>)
 800d314:	4602      	mov	r2, r0
 800d316:	f240 11af 	movw	r1, #431	@ 0x1af
 800d31a:	e6d8      	b.n	800d0ce <_dtoa_r+0x2e>
 800d31c:	2301      	movs	r3, #1
 800d31e:	e7e0      	b.n	800d2e2 <_dtoa_r+0x242>
 800d320:	2401      	movs	r4, #1
 800d322:	2300      	movs	r3, #0
 800d324:	9309      	str	r3, [sp, #36]	@ 0x24
 800d326:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d328:	f04f 33ff 	mov.w	r3, #4294967295
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	9307      	str	r3, [sp, #28]
 800d330:	2200      	movs	r2, #0
 800d332:	2312      	movs	r3, #18
 800d334:	e7d0      	b.n	800d2d8 <_dtoa_r+0x238>
 800d336:	2301      	movs	r3, #1
 800d338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d33a:	e7f5      	b.n	800d328 <_dtoa_r+0x288>
 800d33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	9307      	str	r3, [sp, #28]
 800d342:	e7d7      	b.n	800d2f4 <_dtoa_r+0x254>
 800d344:	3101      	adds	r1, #1
 800d346:	0052      	lsls	r2, r2, #1
 800d348:	e7d8      	b.n	800d2fc <_dtoa_r+0x25c>
 800d34a:	bf00      	nop
 800d34c:	f3af 8000 	nop.w
 800d350:	636f4361 	.word	0x636f4361
 800d354:	3fd287a7 	.word	0x3fd287a7
 800d358:	8b60c8b3 	.word	0x8b60c8b3
 800d35c:	3fc68a28 	.word	0x3fc68a28
 800d360:	509f79fb 	.word	0x509f79fb
 800d364:	3fd34413 	.word	0x3fd34413
 800d368:	0800f185 	.word	0x0800f185
 800d36c:	0800f19c 	.word	0x0800f19c
 800d370:	7ff00000 	.word	0x7ff00000
 800d374:	0800f155 	.word	0x0800f155
 800d378:	3ff80000 	.word	0x3ff80000
 800d37c:	0800f298 	.word	0x0800f298
 800d380:	0800f1f4 	.word	0x0800f1f4
 800d384:	0800f181 	.word	0x0800f181
 800d388:	0800f154 	.word	0x0800f154
 800d38c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d390:	6018      	str	r0, [r3, #0]
 800d392:	9b07      	ldr	r3, [sp, #28]
 800d394:	2b0e      	cmp	r3, #14
 800d396:	f200 80a4 	bhi.w	800d4e2 <_dtoa_r+0x442>
 800d39a:	2c00      	cmp	r4, #0
 800d39c:	f000 80a1 	beq.w	800d4e2 <_dtoa_r+0x442>
 800d3a0:	2f00      	cmp	r7, #0
 800d3a2:	dd33      	ble.n	800d40c <_dtoa_r+0x36c>
 800d3a4:	4bad      	ldr	r3, [pc, #692]	@ (800d65c <_dtoa_r+0x5bc>)
 800d3a6:	f007 020f 	and.w	r2, r7, #15
 800d3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3ae:	ed93 7b00 	vldr	d7, [r3]
 800d3b2:	05f8      	lsls	r0, r7, #23
 800d3b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d3b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d3bc:	d516      	bpl.n	800d3ec <_dtoa_r+0x34c>
 800d3be:	4ba8      	ldr	r3, [pc, #672]	@ (800d660 <_dtoa_r+0x5c0>)
 800d3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3c8:	f7f3 fa18 	bl	80007fc <__aeabi_ddiv>
 800d3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3d0:	f004 040f 	and.w	r4, r4, #15
 800d3d4:	2603      	movs	r6, #3
 800d3d6:	4da2      	ldr	r5, [pc, #648]	@ (800d660 <_dtoa_r+0x5c0>)
 800d3d8:	b954      	cbnz	r4, 800d3f0 <_dtoa_r+0x350>
 800d3da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3e2:	f7f3 fa0b 	bl	80007fc <__aeabi_ddiv>
 800d3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3ea:	e028      	b.n	800d43e <_dtoa_r+0x39e>
 800d3ec:	2602      	movs	r6, #2
 800d3ee:	e7f2      	b.n	800d3d6 <_dtoa_r+0x336>
 800d3f0:	07e1      	lsls	r1, r4, #31
 800d3f2:	d508      	bpl.n	800d406 <_dtoa_r+0x366>
 800d3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3fc:	f7f3 f8d4 	bl	80005a8 <__aeabi_dmul>
 800d400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d404:	3601      	adds	r6, #1
 800d406:	1064      	asrs	r4, r4, #1
 800d408:	3508      	adds	r5, #8
 800d40a:	e7e5      	b.n	800d3d8 <_dtoa_r+0x338>
 800d40c:	f000 80d2 	beq.w	800d5b4 <_dtoa_r+0x514>
 800d410:	427c      	negs	r4, r7
 800d412:	4b92      	ldr	r3, [pc, #584]	@ (800d65c <_dtoa_r+0x5bc>)
 800d414:	4d92      	ldr	r5, [pc, #584]	@ (800d660 <_dtoa_r+0x5c0>)
 800d416:	f004 020f 	and.w	r2, r4, #15
 800d41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d426:	f7f3 f8bf 	bl	80005a8 <__aeabi_dmul>
 800d42a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d42e:	1124      	asrs	r4, r4, #4
 800d430:	2300      	movs	r3, #0
 800d432:	2602      	movs	r6, #2
 800d434:	2c00      	cmp	r4, #0
 800d436:	f040 80b2 	bne.w	800d59e <_dtoa_r+0x4fe>
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1d3      	bne.n	800d3e6 <_dtoa_r+0x346>
 800d43e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d440:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	f000 80b7 	beq.w	800d5b8 <_dtoa_r+0x518>
 800d44a:	4b86      	ldr	r3, [pc, #536]	@ (800d664 <_dtoa_r+0x5c4>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	4620      	mov	r0, r4
 800d450:	4629      	mov	r1, r5
 800d452:	f7f3 fb1b 	bl	8000a8c <__aeabi_dcmplt>
 800d456:	2800      	cmp	r0, #0
 800d458:	f000 80ae 	beq.w	800d5b8 <_dtoa_r+0x518>
 800d45c:	9b07      	ldr	r3, [sp, #28]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f000 80aa 	beq.w	800d5b8 <_dtoa_r+0x518>
 800d464:	9b00      	ldr	r3, [sp, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	dd37      	ble.n	800d4da <_dtoa_r+0x43a>
 800d46a:	1e7b      	subs	r3, r7, #1
 800d46c:	9304      	str	r3, [sp, #16]
 800d46e:	4620      	mov	r0, r4
 800d470:	4b7d      	ldr	r3, [pc, #500]	@ (800d668 <_dtoa_r+0x5c8>)
 800d472:	2200      	movs	r2, #0
 800d474:	4629      	mov	r1, r5
 800d476:	f7f3 f897 	bl	80005a8 <__aeabi_dmul>
 800d47a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d47e:	9c00      	ldr	r4, [sp, #0]
 800d480:	3601      	adds	r6, #1
 800d482:	4630      	mov	r0, r6
 800d484:	f7f3 f826 	bl	80004d4 <__aeabi_i2d>
 800d488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d48c:	f7f3 f88c 	bl	80005a8 <__aeabi_dmul>
 800d490:	4b76      	ldr	r3, [pc, #472]	@ (800d66c <_dtoa_r+0x5cc>)
 800d492:	2200      	movs	r2, #0
 800d494:	f7f2 fed2 	bl	800023c <__adddf3>
 800d498:	4605      	mov	r5, r0
 800d49a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d49e:	2c00      	cmp	r4, #0
 800d4a0:	f040 808d 	bne.w	800d5be <_dtoa_r+0x51e>
 800d4a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4a8:	4b71      	ldr	r3, [pc, #452]	@ (800d670 <_dtoa_r+0x5d0>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f7f2 fec4 	bl	8000238 <__aeabi_dsub>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d4b8:	462a      	mov	r2, r5
 800d4ba:	4633      	mov	r3, r6
 800d4bc:	f7f3 fb04 	bl	8000ac8 <__aeabi_dcmpgt>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	f040 828b 	bne.w	800d9dc <_dtoa_r+0x93c>
 800d4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ca:	462a      	mov	r2, r5
 800d4cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d4d0:	f7f3 fadc 	bl	8000a8c <__aeabi_dcmplt>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f040 8128 	bne.w	800d72a <_dtoa_r+0x68a>
 800d4da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d4de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d4e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f2c0 815a 	blt.w	800d79e <_dtoa_r+0x6fe>
 800d4ea:	2f0e      	cmp	r7, #14
 800d4ec:	f300 8157 	bgt.w	800d79e <_dtoa_r+0x6fe>
 800d4f0:	4b5a      	ldr	r3, [pc, #360]	@ (800d65c <_dtoa_r+0x5bc>)
 800d4f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4f6:	ed93 7b00 	vldr	d7, [r3]
 800d4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	ed8d 7b00 	vstr	d7, [sp]
 800d502:	da03      	bge.n	800d50c <_dtoa_r+0x46c>
 800d504:	9b07      	ldr	r3, [sp, #28]
 800d506:	2b00      	cmp	r3, #0
 800d508:	f340 8101 	ble.w	800d70e <_dtoa_r+0x66e>
 800d50c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d510:	4656      	mov	r6, sl
 800d512:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d516:	4620      	mov	r0, r4
 800d518:	4629      	mov	r1, r5
 800d51a:	f7f3 f96f 	bl	80007fc <__aeabi_ddiv>
 800d51e:	f7f3 faf3 	bl	8000b08 <__aeabi_d2iz>
 800d522:	4680      	mov	r8, r0
 800d524:	f7f2 ffd6 	bl	80004d4 <__aeabi_i2d>
 800d528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d52c:	f7f3 f83c 	bl	80005a8 <__aeabi_dmul>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	4620      	mov	r0, r4
 800d536:	4629      	mov	r1, r5
 800d538:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d53c:	f7f2 fe7c 	bl	8000238 <__aeabi_dsub>
 800d540:	f806 4b01 	strb.w	r4, [r6], #1
 800d544:	9d07      	ldr	r5, [sp, #28]
 800d546:	eba6 040a 	sub.w	r4, r6, sl
 800d54a:	42a5      	cmp	r5, r4
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	f040 8117 	bne.w	800d782 <_dtoa_r+0x6e2>
 800d554:	f7f2 fe72 	bl	800023c <__adddf3>
 800d558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d55c:	4604      	mov	r4, r0
 800d55e:	460d      	mov	r5, r1
 800d560:	f7f3 fab2 	bl	8000ac8 <__aeabi_dcmpgt>
 800d564:	2800      	cmp	r0, #0
 800d566:	f040 80f9 	bne.w	800d75c <_dtoa_r+0x6bc>
 800d56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d56e:	4620      	mov	r0, r4
 800d570:	4629      	mov	r1, r5
 800d572:	f7f3 fa81 	bl	8000a78 <__aeabi_dcmpeq>
 800d576:	b118      	cbz	r0, 800d580 <_dtoa_r+0x4e0>
 800d578:	f018 0f01 	tst.w	r8, #1
 800d57c:	f040 80ee 	bne.w	800d75c <_dtoa_r+0x6bc>
 800d580:	4649      	mov	r1, r9
 800d582:	4658      	mov	r0, fp
 800d584:	f000 fc90 	bl	800dea8 <_Bfree>
 800d588:	2300      	movs	r3, #0
 800d58a:	7033      	strb	r3, [r6, #0]
 800d58c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d58e:	3701      	adds	r7, #1
 800d590:	601f      	str	r7, [r3, #0]
 800d592:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 831d 	beq.w	800dbd4 <_dtoa_r+0xb34>
 800d59a:	601e      	str	r6, [r3, #0]
 800d59c:	e31a      	b.n	800dbd4 <_dtoa_r+0xb34>
 800d59e:	07e2      	lsls	r2, r4, #31
 800d5a0:	d505      	bpl.n	800d5ae <_dtoa_r+0x50e>
 800d5a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5a6:	f7f2 ffff 	bl	80005a8 <__aeabi_dmul>
 800d5aa:	3601      	adds	r6, #1
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	1064      	asrs	r4, r4, #1
 800d5b0:	3508      	adds	r5, #8
 800d5b2:	e73f      	b.n	800d434 <_dtoa_r+0x394>
 800d5b4:	2602      	movs	r6, #2
 800d5b6:	e742      	b.n	800d43e <_dtoa_r+0x39e>
 800d5b8:	9c07      	ldr	r4, [sp, #28]
 800d5ba:	9704      	str	r7, [sp, #16]
 800d5bc:	e761      	b.n	800d482 <_dtoa_r+0x3e2>
 800d5be:	4b27      	ldr	r3, [pc, #156]	@ (800d65c <_dtoa_r+0x5bc>)
 800d5c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5ca:	4454      	add	r4, sl
 800d5cc:	2900      	cmp	r1, #0
 800d5ce:	d053      	beq.n	800d678 <_dtoa_r+0x5d8>
 800d5d0:	4928      	ldr	r1, [pc, #160]	@ (800d674 <_dtoa_r+0x5d4>)
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	f7f3 f912 	bl	80007fc <__aeabi_ddiv>
 800d5d8:	4633      	mov	r3, r6
 800d5da:	462a      	mov	r2, r5
 800d5dc:	f7f2 fe2c 	bl	8000238 <__aeabi_dsub>
 800d5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5e4:	4656      	mov	r6, sl
 800d5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ea:	f7f3 fa8d 	bl	8000b08 <__aeabi_d2iz>
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	f7f2 ff70 	bl	80004d4 <__aeabi_i2d>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5fc:	f7f2 fe1c 	bl	8000238 <__aeabi_dsub>
 800d600:	3530      	adds	r5, #48	@ 0x30
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d60a:	f806 5b01 	strb.w	r5, [r6], #1
 800d60e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d612:	f7f3 fa3b 	bl	8000a8c <__aeabi_dcmplt>
 800d616:	2800      	cmp	r0, #0
 800d618:	d171      	bne.n	800d6fe <_dtoa_r+0x65e>
 800d61a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d61e:	4911      	ldr	r1, [pc, #68]	@ (800d664 <_dtoa_r+0x5c4>)
 800d620:	2000      	movs	r0, #0
 800d622:	f7f2 fe09 	bl	8000238 <__aeabi_dsub>
 800d626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d62a:	f7f3 fa2f 	bl	8000a8c <__aeabi_dcmplt>
 800d62e:	2800      	cmp	r0, #0
 800d630:	f040 8095 	bne.w	800d75e <_dtoa_r+0x6be>
 800d634:	42a6      	cmp	r6, r4
 800d636:	f43f af50 	beq.w	800d4da <_dtoa_r+0x43a>
 800d63a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d63e:	4b0a      	ldr	r3, [pc, #40]	@ (800d668 <_dtoa_r+0x5c8>)
 800d640:	2200      	movs	r2, #0
 800d642:	f7f2 ffb1 	bl	80005a8 <__aeabi_dmul>
 800d646:	4b08      	ldr	r3, [pc, #32]	@ (800d668 <_dtoa_r+0x5c8>)
 800d648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d64c:	2200      	movs	r2, #0
 800d64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d652:	f7f2 ffa9 	bl	80005a8 <__aeabi_dmul>
 800d656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d65a:	e7c4      	b.n	800d5e6 <_dtoa_r+0x546>
 800d65c:	0800f298 	.word	0x0800f298
 800d660:	0800f270 	.word	0x0800f270
 800d664:	3ff00000 	.word	0x3ff00000
 800d668:	40240000 	.word	0x40240000
 800d66c:	401c0000 	.word	0x401c0000
 800d670:	40140000 	.word	0x40140000
 800d674:	3fe00000 	.word	0x3fe00000
 800d678:	4631      	mov	r1, r6
 800d67a:	4628      	mov	r0, r5
 800d67c:	f7f2 ff94 	bl	80005a8 <__aeabi_dmul>
 800d680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d684:	9415      	str	r4, [sp, #84]	@ 0x54
 800d686:	4656      	mov	r6, sl
 800d688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d68c:	f7f3 fa3c 	bl	8000b08 <__aeabi_d2iz>
 800d690:	4605      	mov	r5, r0
 800d692:	f7f2 ff1f 	bl	80004d4 <__aeabi_i2d>
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d69e:	f7f2 fdcb 	bl	8000238 <__aeabi_dsub>
 800d6a2:	3530      	adds	r5, #48	@ 0x30
 800d6a4:	f806 5b01 	strb.w	r5, [r6], #1
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	42a6      	cmp	r6, r4
 800d6ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6b2:	f04f 0200 	mov.w	r2, #0
 800d6b6:	d124      	bne.n	800d702 <_dtoa_r+0x662>
 800d6b8:	4bac      	ldr	r3, [pc, #688]	@ (800d96c <_dtoa_r+0x8cc>)
 800d6ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d6be:	f7f2 fdbd 	bl	800023c <__adddf3>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ca:	f7f3 f9fd 	bl	8000ac8 <__aeabi_dcmpgt>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d145      	bne.n	800d75e <_dtoa_r+0x6be>
 800d6d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6d6:	49a5      	ldr	r1, [pc, #660]	@ (800d96c <_dtoa_r+0x8cc>)
 800d6d8:	2000      	movs	r0, #0
 800d6da:	f7f2 fdad 	bl	8000238 <__aeabi_dsub>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6e6:	f7f3 f9d1 	bl	8000a8c <__aeabi_dcmplt>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	f43f aef5 	beq.w	800d4da <_dtoa_r+0x43a>
 800d6f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d6f2:	1e73      	subs	r3, r6, #1
 800d6f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d6f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d6fa:	2b30      	cmp	r3, #48	@ 0x30
 800d6fc:	d0f8      	beq.n	800d6f0 <_dtoa_r+0x650>
 800d6fe:	9f04      	ldr	r7, [sp, #16]
 800d700:	e73e      	b.n	800d580 <_dtoa_r+0x4e0>
 800d702:	4b9b      	ldr	r3, [pc, #620]	@ (800d970 <_dtoa_r+0x8d0>)
 800d704:	f7f2 ff50 	bl	80005a8 <__aeabi_dmul>
 800d708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d70c:	e7bc      	b.n	800d688 <_dtoa_r+0x5e8>
 800d70e:	d10c      	bne.n	800d72a <_dtoa_r+0x68a>
 800d710:	4b98      	ldr	r3, [pc, #608]	@ (800d974 <_dtoa_r+0x8d4>)
 800d712:	2200      	movs	r2, #0
 800d714:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d718:	f7f2 ff46 	bl	80005a8 <__aeabi_dmul>
 800d71c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d720:	f7f3 f9c8 	bl	8000ab4 <__aeabi_dcmpge>
 800d724:	2800      	cmp	r0, #0
 800d726:	f000 8157 	beq.w	800d9d8 <_dtoa_r+0x938>
 800d72a:	2400      	movs	r4, #0
 800d72c:	4625      	mov	r5, r4
 800d72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d730:	43db      	mvns	r3, r3
 800d732:	9304      	str	r3, [sp, #16]
 800d734:	4656      	mov	r6, sl
 800d736:	2700      	movs	r7, #0
 800d738:	4621      	mov	r1, r4
 800d73a:	4658      	mov	r0, fp
 800d73c:	f000 fbb4 	bl	800dea8 <_Bfree>
 800d740:	2d00      	cmp	r5, #0
 800d742:	d0dc      	beq.n	800d6fe <_dtoa_r+0x65e>
 800d744:	b12f      	cbz	r7, 800d752 <_dtoa_r+0x6b2>
 800d746:	42af      	cmp	r7, r5
 800d748:	d003      	beq.n	800d752 <_dtoa_r+0x6b2>
 800d74a:	4639      	mov	r1, r7
 800d74c:	4658      	mov	r0, fp
 800d74e:	f000 fbab 	bl	800dea8 <_Bfree>
 800d752:	4629      	mov	r1, r5
 800d754:	4658      	mov	r0, fp
 800d756:	f000 fba7 	bl	800dea8 <_Bfree>
 800d75a:	e7d0      	b.n	800d6fe <_dtoa_r+0x65e>
 800d75c:	9704      	str	r7, [sp, #16]
 800d75e:	4633      	mov	r3, r6
 800d760:	461e      	mov	r6, r3
 800d762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d766:	2a39      	cmp	r2, #57	@ 0x39
 800d768:	d107      	bne.n	800d77a <_dtoa_r+0x6da>
 800d76a:	459a      	cmp	sl, r3
 800d76c:	d1f8      	bne.n	800d760 <_dtoa_r+0x6c0>
 800d76e:	9a04      	ldr	r2, [sp, #16]
 800d770:	3201      	adds	r2, #1
 800d772:	9204      	str	r2, [sp, #16]
 800d774:	2230      	movs	r2, #48	@ 0x30
 800d776:	f88a 2000 	strb.w	r2, [sl]
 800d77a:	781a      	ldrb	r2, [r3, #0]
 800d77c:	3201      	adds	r2, #1
 800d77e:	701a      	strb	r2, [r3, #0]
 800d780:	e7bd      	b.n	800d6fe <_dtoa_r+0x65e>
 800d782:	4b7b      	ldr	r3, [pc, #492]	@ (800d970 <_dtoa_r+0x8d0>)
 800d784:	2200      	movs	r2, #0
 800d786:	f7f2 ff0f 	bl	80005a8 <__aeabi_dmul>
 800d78a:	2200      	movs	r2, #0
 800d78c:	2300      	movs	r3, #0
 800d78e:	4604      	mov	r4, r0
 800d790:	460d      	mov	r5, r1
 800d792:	f7f3 f971 	bl	8000a78 <__aeabi_dcmpeq>
 800d796:	2800      	cmp	r0, #0
 800d798:	f43f aebb 	beq.w	800d512 <_dtoa_r+0x472>
 800d79c:	e6f0      	b.n	800d580 <_dtoa_r+0x4e0>
 800d79e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d7a0:	2a00      	cmp	r2, #0
 800d7a2:	f000 80db 	beq.w	800d95c <_dtoa_r+0x8bc>
 800d7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7a8:	2a01      	cmp	r2, #1
 800d7aa:	f300 80bf 	bgt.w	800d92c <_dtoa_r+0x88c>
 800d7ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d7b0:	2a00      	cmp	r2, #0
 800d7b2:	f000 80b7 	beq.w	800d924 <_dtoa_r+0x884>
 800d7b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d7ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d7bc:	4646      	mov	r6, r8
 800d7be:	9a08      	ldr	r2, [sp, #32]
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	441a      	add	r2, r3
 800d7c4:	4658      	mov	r0, fp
 800d7c6:	4498      	add	r8, r3
 800d7c8:	9208      	str	r2, [sp, #32]
 800d7ca:	f000 fc21 	bl	800e010 <__i2b>
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	b15e      	cbz	r6, 800d7ea <_dtoa_r+0x74a>
 800d7d2:	9b08      	ldr	r3, [sp, #32]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	dd08      	ble.n	800d7ea <_dtoa_r+0x74a>
 800d7d8:	42b3      	cmp	r3, r6
 800d7da:	9a08      	ldr	r2, [sp, #32]
 800d7dc:	bfa8      	it	ge
 800d7de:	4633      	movge	r3, r6
 800d7e0:	eba8 0803 	sub.w	r8, r8, r3
 800d7e4:	1af6      	subs	r6, r6, r3
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	9308      	str	r3, [sp, #32]
 800d7ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7ec:	b1f3      	cbz	r3, 800d82c <_dtoa_r+0x78c>
 800d7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 80b7 	beq.w	800d964 <_dtoa_r+0x8c4>
 800d7f6:	b18c      	cbz	r4, 800d81c <_dtoa_r+0x77c>
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	4658      	mov	r0, fp
 800d7fe:	f000 fcc7 	bl	800e190 <__pow5mult>
 800d802:	464a      	mov	r2, r9
 800d804:	4601      	mov	r1, r0
 800d806:	4605      	mov	r5, r0
 800d808:	4658      	mov	r0, fp
 800d80a:	f000 fc17 	bl	800e03c <__multiply>
 800d80e:	4649      	mov	r1, r9
 800d810:	9004      	str	r0, [sp, #16]
 800d812:	4658      	mov	r0, fp
 800d814:	f000 fb48 	bl	800dea8 <_Bfree>
 800d818:	9b04      	ldr	r3, [sp, #16]
 800d81a:	4699      	mov	r9, r3
 800d81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d81e:	1b1a      	subs	r2, r3, r4
 800d820:	d004      	beq.n	800d82c <_dtoa_r+0x78c>
 800d822:	4649      	mov	r1, r9
 800d824:	4658      	mov	r0, fp
 800d826:	f000 fcb3 	bl	800e190 <__pow5mult>
 800d82a:	4681      	mov	r9, r0
 800d82c:	2101      	movs	r1, #1
 800d82e:	4658      	mov	r0, fp
 800d830:	f000 fbee 	bl	800e010 <__i2b>
 800d834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d836:	4604      	mov	r4, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f000 81cf 	beq.w	800dbdc <_dtoa_r+0xb3c>
 800d83e:	461a      	mov	r2, r3
 800d840:	4601      	mov	r1, r0
 800d842:	4658      	mov	r0, fp
 800d844:	f000 fca4 	bl	800e190 <__pow5mult>
 800d848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	4604      	mov	r4, r0
 800d84e:	f300 8095 	bgt.w	800d97c <_dtoa_r+0x8dc>
 800d852:	9b02      	ldr	r3, [sp, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	f040 8087 	bne.w	800d968 <_dtoa_r+0x8c8>
 800d85a:	9b03      	ldr	r3, [sp, #12]
 800d85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d860:	2b00      	cmp	r3, #0
 800d862:	f040 8089 	bne.w	800d978 <_dtoa_r+0x8d8>
 800d866:	9b03      	ldr	r3, [sp, #12]
 800d868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d86c:	0d1b      	lsrs	r3, r3, #20
 800d86e:	051b      	lsls	r3, r3, #20
 800d870:	b12b      	cbz	r3, 800d87e <_dtoa_r+0x7de>
 800d872:	9b08      	ldr	r3, [sp, #32]
 800d874:	3301      	adds	r3, #1
 800d876:	9308      	str	r3, [sp, #32]
 800d878:	f108 0801 	add.w	r8, r8, #1
 800d87c:	2301      	movs	r3, #1
 800d87e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 81b0 	beq.w	800dbe8 <_dtoa_r+0xb48>
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d88e:	6918      	ldr	r0, [r3, #16]
 800d890:	f000 fb72 	bl	800df78 <__hi0bits>
 800d894:	f1c0 0020 	rsb	r0, r0, #32
 800d898:	9b08      	ldr	r3, [sp, #32]
 800d89a:	4418      	add	r0, r3
 800d89c:	f010 001f 	ands.w	r0, r0, #31
 800d8a0:	d077      	beq.n	800d992 <_dtoa_r+0x8f2>
 800d8a2:	f1c0 0320 	rsb	r3, r0, #32
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	dd6b      	ble.n	800d982 <_dtoa_r+0x8e2>
 800d8aa:	9b08      	ldr	r3, [sp, #32]
 800d8ac:	f1c0 001c 	rsb	r0, r0, #28
 800d8b0:	4403      	add	r3, r0
 800d8b2:	4480      	add	r8, r0
 800d8b4:	4406      	add	r6, r0
 800d8b6:	9308      	str	r3, [sp, #32]
 800d8b8:	f1b8 0f00 	cmp.w	r8, #0
 800d8bc:	dd05      	ble.n	800d8ca <_dtoa_r+0x82a>
 800d8be:	4649      	mov	r1, r9
 800d8c0:	4642      	mov	r2, r8
 800d8c2:	4658      	mov	r0, fp
 800d8c4:	f000 fcbe 	bl	800e244 <__lshift>
 800d8c8:	4681      	mov	r9, r0
 800d8ca:	9b08      	ldr	r3, [sp, #32]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	dd05      	ble.n	800d8dc <_dtoa_r+0x83c>
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	4658      	mov	r0, fp
 800d8d6:	f000 fcb5 	bl	800e244 <__lshift>
 800d8da:	4604      	mov	r4, r0
 800d8dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d059      	beq.n	800d996 <_dtoa_r+0x8f6>
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	4648      	mov	r0, r9
 800d8e6:	f000 fd19 	bl	800e31c <__mcmp>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	da53      	bge.n	800d996 <_dtoa_r+0x8f6>
 800d8ee:	1e7b      	subs	r3, r7, #1
 800d8f0:	9304      	str	r3, [sp, #16]
 800d8f2:	4649      	mov	r1, r9
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	220a      	movs	r2, #10
 800d8f8:	4658      	mov	r0, fp
 800d8fa:	f000 faf7 	bl	800deec <__multadd>
 800d8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d900:	4681      	mov	r9, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	f000 8172 	beq.w	800dbec <_dtoa_r+0xb4c>
 800d908:	2300      	movs	r3, #0
 800d90a:	4629      	mov	r1, r5
 800d90c:	220a      	movs	r2, #10
 800d90e:	4658      	mov	r0, fp
 800d910:	f000 faec 	bl	800deec <__multadd>
 800d914:	9b00      	ldr	r3, [sp, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	4605      	mov	r5, r0
 800d91a:	dc67      	bgt.n	800d9ec <_dtoa_r+0x94c>
 800d91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d91e:	2b02      	cmp	r3, #2
 800d920:	dc41      	bgt.n	800d9a6 <_dtoa_r+0x906>
 800d922:	e063      	b.n	800d9ec <_dtoa_r+0x94c>
 800d924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d926:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d92a:	e746      	b.n	800d7ba <_dtoa_r+0x71a>
 800d92c:	9b07      	ldr	r3, [sp, #28]
 800d92e:	1e5c      	subs	r4, r3, #1
 800d930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d932:	42a3      	cmp	r3, r4
 800d934:	bfbf      	itttt	lt
 800d936:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d938:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d93a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d93c:	1ae3      	sublt	r3, r4, r3
 800d93e:	bfb4      	ite	lt
 800d940:	18d2      	addlt	r2, r2, r3
 800d942:	1b1c      	subge	r4, r3, r4
 800d944:	9b07      	ldr	r3, [sp, #28]
 800d946:	bfbc      	itt	lt
 800d948:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d94a:	2400      	movlt	r4, #0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	bfb5      	itete	lt
 800d950:	eba8 0603 	sublt.w	r6, r8, r3
 800d954:	9b07      	ldrge	r3, [sp, #28]
 800d956:	2300      	movlt	r3, #0
 800d958:	4646      	movge	r6, r8
 800d95a:	e730      	b.n	800d7be <_dtoa_r+0x71e>
 800d95c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d95e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d960:	4646      	mov	r6, r8
 800d962:	e735      	b.n	800d7d0 <_dtoa_r+0x730>
 800d964:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d966:	e75c      	b.n	800d822 <_dtoa_r+0x782>
 800d968:	2300      	movs	r3, #0
 800d96a:	e788      	b.n	800d87e <_dtoa_r+0x7de>
 800d96c:	3fe00000 	.word	0x3fe00000
 800d970:	40240000 	.word	0x40240000
 800d974:	40140000 	.word	0x40140000
 800d978:	9b02      	ldr	r3, [sp, #8]
 800d97a:	e780      	b.n	800d87e <_dtoa_r+0x7de>
 800d97c:	2300      	movs	r3, #0
 800d97e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d980:	e782      	b.n	800d888 <_dtoa_r+0x7e8>
 800d982:	d099      	beq.n	800d8b8 <_dtoa_r+0x818>
 800d984:	9a08      	ldr	r2, [sp, #32]
 800d986:	331c      	adds	r3, #28
 800d988:	441a      	add	r2, r3
 800d98a:	4498      	add	r8, r3
 800d98c:	441e      	add	r6, r3
 800d98e:	9208      	str	r2, [sp, #32]
 800d990:	e792      	b.n	800d8b8 <_dtoa_r+0x818>
 800d992:	4603      	mov	r3, r0
 800d994:	e7f6      	b.n	800d984 <_dtoa_r+0x8e4>
 800d996:	9b07      	ldr	r3, [sp, #28]
 800d998:	9704      	str	r7, [sp, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	dc20      	bgt.n	800d9e0 <_dtoa_r+0x940>
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a2:	2b02      	cmp	r3, #2
 800d9a4:	dd1e      	ble.n	800d9e4 <_dtoa_r+0x944>
 800d9a6:	9b00      	ldr	r3, [sp, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f47f aec0 	bne.w	800d72e <_dtoa_r+0x68e>
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	2205      	movs	r2, #5
 800d9b2:	4658      	mov	r0, fp
 800d9b4:	f000 fa9a 	bl	800deec <__multadd>
 800d9b8:	4601      	mov	r1, r0
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4648      	mov	r0, r9
 800d9be:	f000 fcad 	bl	800e31c <__mcmp>
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	f77f aeb3 	ble.w	800d72e <_dtoa_r+0x68e>
 800d9c8:	4656      	mov	r6, sl
 800d9ca:	2331      	movs	r3, #49	@ 0x31
 800d9cc:	f806 3b01 	strb.w	r3, [r6], #1
 800d9d0:	9b04      	ldr	r3, [sp, #16]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	9304      	str	r3, [sp, #16]
 800d9d6:	e6ae      	b.n	800d736 <_dtoa_r+0x696>
 800d9d8:	9c07      	ldr	r4, [sp, #28]
 800d9da:	9704      	str	r7, [sp, #16]
 800d9dc:	4625      	mov	r5, r4
 800d9de:	e7f3      	b.n	800d9c8 <_dtoa_r+0x928>
 800d9e0:	9b07      	ldr	r3, [sp, #28]
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f000 8104 	beq.w	800dbf4 <_dtoa_r+0xb54>
 800d9ec:	2e00      	cmp	r6, #0
 800d9ee:	dd05      	ble.n	800d9fc <_dtoa_r+0x95c>
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	4632      	mov	r2, r6
 800d9f4:	4658      	mov	r0, fp
 800d9f6:	f000 fc25 	bl	800e244 <__lshift>
 800d9fa:	4605      	mov	r5, r0
 800d9fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d05a      	beq.n	800dab8 <_dtoa_r+0xa18>
 800da02:	6869      	ldr	r1, [r5, #4]
 800da04:	4658      	mov	r0, fp
 800da06:	f000 fa0f 	bl	800de28 <_Balloc>
 800da0a:	4606      	mov	r6, r0
 800da0c:	b928      	cbnz	r0, 800da1a <_dtoa_r+0x97a>
 800da0e:	4b84      	ldr	r3, [pc, #528]	@ (800dc20 <_dtoa_r+0xb80>)
 800da10:	4602      	mov	r2, r0
 800da12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800da16:	f7ff bb5a 	b.w	800d0ce <_dtoa_r+0x2e>
 800da1a:	692a      	ldr	r2, [r5, #16]
 800da1c:	3202      	adds	r2, #2
 800da1e:	0092      	lsls	r2, r2, #2
 800da20:	f105 010c 	add.w	r1, r5, #12
 800da24:	300c      	adds	r0, #12
 800da26:	f000 ffaf 	bl	800e988 <memcpy>
 800da2a:	2201      	movs	r2, #1
 800da2c:	4631      	mov	r1, r6
 800da2e:	4658      	mov	r0, fp
 800da30:	f000 fc08 	bl	800e244 <__lshift>
 800da34:	f10a 0301 	add.w	r3, sl, #1
 800da38:	9307      	str	r3, [sp, #28]
 800da3a:	9b00      	ldr	r3, [sp, #0]
 800da3c:	4453      	add	r3, sl
 800da3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da40:	9b02      	ldr	r3, [sp, #8]
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	462f      	mov	r7, r5
 800da48:	930a      	str	r3, [sp, #40]	@ 0x28
 800da4a:	4605      	mov	r5, r0
 800da4c:	9b07      	ldr	r3, [sp, #28]
 800da4e:	4621      	mov	r1, r4
 800da50:	3b01      	subs	r3, #1
 800da52:	4648      	mov	r0, r9
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	f7ff fa9a 	bl	800cf8e <quorem>
 800da5a:	4639      	mov	r1, r7
 800da5c:	9002      	str	r0, [sp, #8]
 800da5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800da62:	4648      	mov	r0, r9
 800da64:	f000 fc5a 	bl	800e31c <__mcmp>
 800da68:	462a      	mov	r2, r5
 800da6a:	9008      	str	r0, [sp, #32]
 800da6c:	4621      	mov	r1, r4
 800da6e:	4658      	mov	r0, fp
 800da70:	f000 fc70 	bl	800e354 <__mdiff>
 800da74:	68c2      	ldr	r2, [r0, #12]
 800da76:	4606      	mov	r6, r0
 800da78:	bb02      	cbnz	r2, 800dabc <_dtoa_r+0xa1c>
 800da7a:	4601      	mov	r1, r0
 800da7c:	4648      	mov	r0, r9
 800da7e:	f000 fc4d 	bl	800e31c <__mcmp>
 800da82:	4602      	mov	r2, r0
 800da84:	4631      	mov	r1, r6
 800da86:	4658      	mov	r0, fp
 800da88:	920e      	str	r2, [sp, #56]	@ 0x38
 800da8a:	f000 fa0d 	bl	800dea8 <_Bfree>
 800da8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da92:	9e07      	ldr	r6, [sp, #28]
 800da94:	ea43 0102 	orr.w	r1, r3, r2
 800da98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da9a:	4319      	orrs	r1, r3
 800da9c:	d110      	bne.n	800dac0 <_dtoa_r+0xa20>
 800da9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800daa2:	d029      	beq.n	800daf8 <_dtoa_r+0xa58>
 800daa4:	9b08      	ldr	r3, [sp, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	dd02      	ble.n	800dab0 <_dtoa_r+0xa10>
 800daaa:	9b02      	ldr	r3, [sp, #8]
 800daac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dab0:	9b00      	ldr	r3, [sp, #0]
 800dab2:	f883 8000 	strb.w	r8, [r3]
 800dab6:	e63f      	b.n	800d738 <_dtoa_r+0x698>
 800dab8:	4628      	mov	r0, r5
 800daba:	e7bb      	b.n	800da34 <_dtoa_r+0x994>
 800dabc:	2201      	movs	r2, #1
 800dabe:	e7e1      	b.n	800da84 <_dtoa_r+0x9e4>
 800dac0:	9b08      	ldr	r3, [sp, #32]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	db04      	blt.n	800dad0 <_dtoa_r+0xa30>
 800dac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dac8:	430b      	orrs	r3, r1
 800daca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dacc:	430b      	orrs	r3, r1
 800dace:	d120      	bne.n	800db12 <_dtoa_r+0xa72>
 800dad0:	2a00      	cmp	r2, #0
 800dad2:	dded      	ble.n	800dab0 <_dtoa_r+0xa10>
 800dad4:	4649      	mov	r1, r9
 800dad6:	2201      	movs	r2, #1
 800dad8:	4658      	mov	r0, fp
 800dada:	f000 fbb3 	bl	800e244 <__lshift>
 800dade:	4621      	mov	r1, r4
 800dae0:	4681      	mov	r9, r0
 800dae2:	f000 fc1b 	bl	800e31c <__mcmp>
 800dae6:	2800      	cmp	r0, #0
 800dae8:	dc03      	bgt.n	800daf2 <_dtoa_r+0xa52>
 800daea:	d1e1      	bne.n	800dab0 <_dtoa_r+0xa10>
 800daec:	f018 0f01 	tst.w	r8, #1
 800daf0:	d0de      	beq.n	800dab0 <_dtoa_r+0xa10>
 800daf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800daf6:	d1d8      	bne.n	800daaa <_dtoa_r+0xa0a>
 800daf8:	9a00      	ldr	r2, [sp, #0]
 800dafa:	2339      	movs	r3, #57	@ 0x39
 800dafc:	7013      	strb	r3, [r2, #0]
 800dafe:	4633      	mov	r3, r6
 800db00:	461e      	mov	r6, r3
 800db02:	3b01      	subs	r3, #1
 800db04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800db08:	2a39      	cmp	r2, #57	@ 0x39
 800db0a:	d052      	beq.n	800dbb2 <_dtoa_r+0xb12>
 800db0c:	3201      	adds	r2, #1
 800db0e:	701a      	strb	r2, [r3, #0]
 800db10:	e612      	b.n	800d738 <_dtoa_r+0x698>
 800db12:	2a00      	cmp	r2, #0
 800db14:	dd07      	ble.n	800db26 <_dtoa_r+0xa86>
 800db16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db1a:	d0ed      	beq.n	800daf8 <_dtoa_r+0xa58>
 800db1c:	9a00      	ldr	r2, [sp, #0]
 800db1e:	f108 0301 	add.w	r3, r8, #1
 800db22:	7013      	strb	r3, [r2, #0]
 800db24:	e608      	b.n	800d738 <_dtoa_r+0x698>
 800db26:	9b07      	ldr	r3, [sp, #28]
 800db28:	9a07      	ldr	r2, [sp, #28]
 800db2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800db2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db30:	4293      	cmp	r3, r2
 800db32:	d028      	beq.n	800db86 <_dtoa_r+0xae6>
 800db34:	4649      	mov	r1, r9
 800db36:	2300      	movs	r3, #0
 800db38:	220a      	movs	r2, #10
 800db3a:	4658      	mov	r0, fp
 800db3c:	f000 f9d6 	bl	800deec <__multadd>
 800db40:	42af      	cmp	r7, r5
 800db42:	4681      	mov	r9, r0
 800db44:	f04f 0300 	mov.w	r3, #0
 800db48:	f04f 020a 	mov.w	r2, #10
 800db4c:	4639      	mov	r1, r7
 800db4e:	4658      	mov	r0, fp
 800db50:	d107      	bne.n	800db62 <_dtoa_r+0xac2>
 800db52:	f000 f9cb 	bl	800deec <__multadd>
 800db56:	4607      	mov	r7, r0
 800db58:	4605      	mov	r5, r0
 800db5a:	9b07      	ldr	r3, [sp, #28]
 800db5c:	3301      	adds	r3, #1
 800db5e:	9307      	str	r3, [sp, #28]
 800db60:	e774      	b.n	800da4c <_dtoa_r+0x9ac>
 800db62:	f000 f9c3 	bl	800deec <__multadd>
 800db66:	4629      	mov	r1, r5
 800db68:	4607      	mov	r7, r0
 800db6a:	2300      	movs	r3, #0
 800db6c:	220a      	movs	r2, #10
 800db6e:	4658      	mov	r0, fp
 800db70:	f000 f9bc 	bl	800deec <__multadd>
 800db74:	4605      	mov	r5, r0
 800db76:	e7f0      	b.n	800db5a <_dtoa_r+0xaba>
 800db78:	9b00      	ldr	r3, [sp, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	bfcc      	ite	gt
 800db7e:	461e      	movgt	r6, r3
 800db80:	2601      	movle	r6, #1
 800db82:	4456      	add	r6, sl
 800db84:	2700      	movs	r7, #0
 800db86:	4649      	mov	r1, r9
 800db88:	2201      	movs	r2, #1
 800db8a:	4658      	mov	r0, fp
 800db8c:	f000 fb5a 	bl	800e244 <__lshift>
 800db90:	4621      	mov	r1, r4
 800db92:	4681      	mov	r9, r0
 800db94:	f000 fbc2 	bl	800e31c <__mcmp>
 800db98:	2800      	cmp	r0, #0
 800db9a:	dcb0      	bgt.n	800dafe <_dtoa_r+0xa5e>
 800db9c:	d102      	bne.n	800dba4 <_dtoa_r+0xb04>
 800db9e:	f018 0f01 	tst.w	r8, #1
 800dba2:	d1ac      	bne.n	800dafe <_dtoa_r+0xa5e>
 800dba4:	4633      	mov	r3, r6
 800dba6:	461e      	mov	r6, r3
 800dba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbac:	2a30      	cmp	r2, #48	@ 0x30
 800dbae:	d0fa      	beq.n	800dba6 <_dtoa_r+0xb06>
 800dbb0:	e5c2      	b.n	800d738 <_dtoa_r+0x698>
 800dbb2:	459a      	cmp	sl, r3
 800dbb4:	d1a4      	bne.n	800db00 <_dtoa_r+0xa60>
 800dbb6:	9b04      	ldr	r3, [sp, #16]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	9304      	str	r3, [sp, #16]
 800dbbc:	2331      	movs	r3, #49	@ 0x31
 800dbbe:	f88a 3000 	strb.w	r3, [sl]
 800dbc2:	e5b9      	b.n	800d738 <_dtoa_r+0x698>
 800dbc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dbc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dc24 <_dtoa_r+0xb84>
 800dbca:	b11b      	cbz	r3, 800dbd4 <_dtoa_r+0xb34>
 800dbcc:	f10a 0308 	add.w	r3, sl, #8
 800dbd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dbd2:	6013      	str	r3, [r2, #0]
 800dbd4:	4650      	mov	r0, sl
 800dbd6:	b019      	add	sp, #100	@ 0x64
 800dbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	f77f ae37 	ble.w	800d852 <_dtoa_r+0x7b2>
 800dbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbe8:	2001      	movs	r0, #1
 800dbea:	e655      	b.n	800d898 <_dtoa_r+0x7f8>
 800dbec:	9b00      	ldr	r3, [sp, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f77f aed6 	ble.w	800d9a0 <_dtoa_r+0x900>
 800dbf4:	4656      	mov	r6, sl
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4648      	mov	r0, r9
 800dbfa:	f7ff f9c8 	bl	800cf8e <quorem>
 800dbfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc02:	f806 8b01 	strb.w	r8, [r6], #1
 800dc06:	9b00      	ldr	r3, [sp, #0]
 800dc08:	eba6 020a 	sub.w	r2, r6, sl
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	ddb3      	ble.n	800db78 <_dtoa_r+0xad8>
 800dc10:	4649      	mov	r1, r9
 800dc12:	2300      	movs	r3, #0
 800dc14:	220a      	movs	r2, #10
 800dc16:	4658      	mov	r0, fp
 800dc18:	f000 f968 	bl	800deec <__multadd>
 800dc1c:	4681      	mov	r9, r0
 800dc1e:	e7ea      	b.n	800dbf6 <_dtoa_r+0xb56>
 800dc20:	0800f1f4 	.word	0x0800f1f4
 800dc24:	0800f178 	.word	0x0800f178

0800dc28 <_free_r>:
 800dc28:	b538      	push	{r3, r4, r5, lr}
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	2900      	cmp	r1, #0
 800dc2e:	d041      	beq.n	800dcb4 <_free_r+0x8c>
 800dc30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc34:	1f0c      	subs	r4, r1, #4
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bfb8      	it	lt
 800dc3a:	18e4      	addlt	r4, r4, r3
 800dc3c:	f000 f8e8 	bl	800de10 <__malloc_lock>
 800dc40:	4a1d      	ldr	r2, [pc, #116]	@ (800dcb8 <_free_r+0x90>)
 800dc42:	6813      	ldr	r3, [r2, #0]
 800dc44:	b933      	cbnz	r3, 800dc54 <_free_r+0x2c>
 800dc46:	6063      	str	r3, [r4, #4]
 800dc48:	6014      	str	r4, [r2, #0]
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc50:	f000 b8e4 	b.w	800de1c <__malloc_unlock>
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	d908      	bls.n	800dc6a <_free_r+0x42>
 800dc58:	6820      	ldr	r0, [r4, #0]
 800dc5a:	1821      	adds	r1, r4, r0
 800dc5c:	428b      	cmp	r3, r1
 800dc5e:	bf01      	itttt	eq
 800dc60:	6819      	ldreq	r1, [r3, #0]
 800dc62:	685b      	ldreq	r3, [r3, #4]
 800dc64:	1809      	addeq	r1, r1, r0
 800dc66:	6021      	streq	r1, [r4, #0]
 800dc68:	e7ed      	b.n	800dc46 <_free_r+0x1e>
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	b10b      	cbz	r3, 800dc74 <_free_r+0x4c>
 800dc70:	42a3      	cmp	r3, r4
 800dc72:	d9fa      	bls.n	800dc6a <_free_r+0x42>
 800dc74:	6811      	ldr	r1, [r2, #0]
 800dc76:	1850      	adds	r0, r2, r1
 800dc78:	42a0      	cmp	r0, r4
 800dc7a:	d10b      	bne.n	800dc94 <_free_r+0x6c>
 800dc7c:	6820      	ldr	r0, [r4, #0]
 800dc7e:	4401      	add	r1, r0
 800dc80:	1850      	adds	r0, r2, r1
 800dc82:	4283      	cmp	r3, r0
 800dc84:	6011      	str	r1, [r2, #0]
 800dc86:	d1e0      	bne.n	800dc4a <_free_r+0x22>
 800dc88:	6818      	ldr	r0, [r3, #0]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	6053      	str	r3, [r2, #4]
 800dc8e:	4408      	add	r0, r1
 800dc90:	6010      	str	r0, [r2, #0]
 800dc92:	e7da      	b.n	800dc4a <_free_r+0x22>
 800dc94:	d902      	bls.n	800dc9c <_free_r+0x74>
 800dc96:	230c      	movs	r3, #12
 800dc98:	602b      	str	r3, [r5, #0]
 800dc9a:	e7d6      	b.n	800dc4a <_free_r+0x22>
 800dc9c:	6820      	ldr	r0, [r4, #0]
 800dc9e:	1821      	adds	r1, r4, r0
 800dca0:	428b      	cmp	r3, r1
 800dca2:	bf04      	itt	eq
 800dca4:	6819      	ldreq	r1, [r3, #0]
 800dca6:	685b      	ldreq	r3, [r3, #4]
 800dca8:	6063      	str	r3, [r4, #4]
 800dcaa:	bf04      	itt	eq
 800dcac:	1809      	addeq	r1, r1, r0
 800dcae:	6021      	streq	r1, [r4, #0]
 800dcb0:	6054      	str	r4, [r2, #4]
 800dcb2:	e7ca      	b.n	800dc4a <_free_r+0x22>
 800dcb4:	bd38      	pop	{r3, r4, r5, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20001f64 	.word	0x20001f64

0800dcbc <malloc>:
 800dcbc:	4b02      	ldr	r3, [pc, #8]	@ (800dcc8 <malloc+0xc>)
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	6818      	ldr	r0, [r3, #0]
 800dcc2:	f000 b825 	b.w	800dd10 <_malloc_r>
 800dcc6:	bf00      	nop
 800dcc8:	20000114 	.word	0x20000114

0800dccc <sbrk_aligned>:
 800dccc:	b570      	push	{r4, r5, r6, lr}
 800dcce:	4e0f      	ldr	r6, [pc, #60]	@ (800dd0c <sbrk_aligned+0x40>)
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	6831      	ldr	r1, [r6, #0]
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	b911      	cbnz	r1, 800dcde <sbrk_aligned+0x12>
 800dcd8:	f000 fe46 	bl	800e968 <_sbrk_r>
 800dcdc:	6030      	str	r0, [r6, #0]
 800dcde:	4621      	mov	r1, r4
 800dce0:	4628      	mov	r0, r5
 800dce2:	f000 fe41 	bl	800e968 <_sbrk_r>
 800dce6:	1c43      	adds	r3, r0, #1
 800dce8:	d103      	bne.n	800dcf2 <sbrk_aligned+0x26>
 800dcea:	f04f 34ff 	mov.w	r4, #4294967295
 800dcee:	4620      	mov	r0, r4
 800dcf0:	bd70      	pop	{r4, r5, r6, pc}
 800dcf2:	1cc4      	adds	r4, r0, #3
 800dcf4:	f024 0403 	bic.w	r4, r4, #3
 800dcf8:	42a0      	cmp	r0, r4
 800dcfa:	d0f8      	beq.n	800dcee <sbrk_aligned+0x22>
 800dcfc:	1a21      	subs	r1, r4, r0
 800dcfe:	4628      	mov	r0, r5
 800dd00:	f000 fe32 	bl	800e968 <_sbrk_r>
 800dd04:	3001      	adds	r0, #1
 800dd06:	d1f2      	bne.n	800dcee <sbrk_aligned+0x22>
 800dd08:	e7ef      	b.n	800dcea <sbrk_aligned+0x1e>
 800dd0a:	bf00      	nop
 800dd0c:	20001f60 	.word	0x20001f60

0800dd10 <_malloc_r>:
 800dd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd14:	1ccd      	adds	r5, r1, #3
 800dd16:	f025 0503 	bic.w	r5, r5, #3
 800dd1a:	3508      	adds	r5, #8
 800dd1c:	2d0c      	cmp	r5, #12
 800dd1e:	bf38      	it	cc
 800dd20:	250c      	movcc	r5, #12
 800dd22:	2d00      	cmp	r5, #0
 800dd24:	4606      	mov	r6, r0
 800dd26:	db01      	blt.n	800dd2c <_malloc_r+0x1c>
 800dd28:	42a9      	cmp	r1, r5
 800dd2a:	d904      	bls.n	800dd36 <_malloc_r+0x26>
 800dd2c:	230c      	movs	r3, #12
 800dd2e:	6033      	str	r3, [r6, #0]
 800dd30:	2000      	movs	r0, #0
 800dd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de0c <_malloc_r+0xfc>
 800dd3a:	f000 f869 	bl	800de10 <__malloc_lock>
 800dd3e:	f8d8 3000 	ldr.w	r3, [r8]
 800dd42:	461c      	mov	r4, r3
 800dd44:	bb44      	cbnz	r4, 800dd98 <_malloc_r+0x88>
 800dd46:	4629      	mov	r1, r5
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f7ff ffbf 	bl	800dccc <sbrk_aligned>
 800dd4e:	1c43      	adds	r3, r0, #1
 800dd50:	4604      	mov	r4, r0
 800dd52:	d158      	bne.n	800de06 <_malloc_r+0xf6>
 800dd54:	f8d8 4000 	ldr.w	r4, [r8]
 800dd58:	4627      	mov	r7, r4
 800dd5a:	2f00      	cmp	r7, #0
 800dd5c:	d143      	bne.n	800dde6 <_malloc_r+0xd6>
 800dd5e:	2c00      	cmp	r4, #0
 800dd60:	d04b      	beq.n	800ddfa <_malloc_r+0xea>
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	4639      	mov	r1, r7
 800dd66:	4630      	mov	r0, r6
 800dd68:	eb04 0903 	add.w	r9, r4, r3
 800dd6c:	f000 fdfc 	bl	800e968 <_sbrk_r>
 800dd70:	4581      	cmp	r9, r0
 800dd72:	d142      	bne.n	800ddfa <_malloc_r+0xea>
 800dd74:	6821      	ldr	r1, [r4, #0]
 800dd76:	1a6d      	subs	r5, r5, r1
 800dd78:	4629      	mov	r1, r5
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	f7ff ffa6 	bl	800dccc <sbrk_aligned>
 800dd80:	3001      	adds	r0, #1
 800dd82:	d03a      	beq.n	800ddfa <_malloc_r+0xea>
 800dd84:	6823      	ldr	r3, [r4, #0]
 800dd86:	442b      	add	r3, r5
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	f8d8 3000 	ldr.w	r3, [r8]
 800dd8e:	685a      	ldr	r2, [r3, #4]
 800dd90:	bb62      	cbnz	r2, 800ddec <_malloc_r+0xdc>
 800dd92:	f8c8 7000 	str.w	r7, [r8]
 800dd96:	e00f      	b.n	800ddb8 <_malloc_r+0xa8>
 800dd98:	6822      	ldr	r2, [r4, #0]
 800dd9a:	1b52      	subs	r2, r2, r5
 800dd9c:	d420      	bmi.n	800dde0 <_malloc_r+0xd0>
 800dd9e:	2a0b      	cmp	r2, #11
 800dda0:	d917      	bls.n	800ddd2 <_malloc_r+0xc2>
 800dda2:	1961      	adds	r1, r4, r5
 800dda4:	42a3      	cmp	r3, r4
 800dda6:	6025      	str	r5, [r4, #0]
 800dda8:	bf18      	it	ne
 800ddaa:	6059      	strne	r1, [r3, #4]
 800ddac:	6863      	ldr	r3, [r4, #4]
 800ddae:	bf08      	it	eq
 800ddb0:	f8c8 1000 	streq.w	r1, [r8]
 800ddb4:	5162      	str	r2, [r4, r5]
 800ddb6:	604b      	str	r3, [r1, #4]
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f000 f82f 	bl	800de1c <__malloc_unlock>
 800ddbe:	f104 000b 	add.w	r0, r4, #11
 800ddc2:	1d23      	adds	r3, r4, #4
 800ddc4:	f020 0007 	bic.w	r0, r0, #7
 800ddc8:	1ac2      	subs	r2, r0, r3
 800ddca:	bf1c      	itt	ne
 800ddcc:	1a1b      	subne	r3, r3, r0
 800ddce:	50a3      	strne	r3, [r4, r2]
 800ddd0:	e7af      	b.n	800dd32 <_malloc_r+0x22>
 800ddd2:	6862      	ldr	r2, [r4, #4]
 800ddd4:	42a3      	cmp	r3, r4
 800ddd6:	bf0c      	ite	eq
 800ddd8:	f8c8 2000 	streq.w	r2, [r8]
 800dddc:	605a      	strne	r2, [r3, #4]
 800ddde:	e7eb      	b.n	800ddb8 <_malloc_r+0xa8>
 800dde0:	4623      	mov	r3, r4
 800dde2:	6864      	ldr	r4, [r4, #4]
 800dde4:	e7ae      	b.n	800dd44 <_malloc_r+0x34>
 800dde6:	463c      	mov	r4, r7
 800dde8:	687f      	ldr	r7, [r7, #4]
 800ddea:	e7b6      	b.n	800dd5a <_malloc_r+0x4a>
 800ddec:	461a      	mov	r2, r3
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	42a3      	cmp	r3, r4
 800ddf2:	d1fb      	bne.n	800ddec <_malloc_r+0xdc>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	6053      	str	r3, [r2, #4]
 800ddf8:	e7de      	b.n	800ddb8 <_malloc_r+0xa8>
 800ddfa:	230c      	movs	r3, #12
 800ddfc:	6033      	str	r3, [r6, #0]
 800ddfe:	4630      	mov	r0, r6
 800de00:	f000 f80c 	bl	800de1c <__malloc_unlock>
 800de04:	e794      	b.n	800dd30 <_malloc_r+0x20>
 800de06:	6005      	str	r5, [r0, #0]
 800de08:	e7d6      	b.n	800ddb8 <_malloc_r+0xa8>
 800de0a:	bf00      	nop
 800de0c:	20001f64 	.word	0x20001f64

0800de10 <__malloc_lock>:
 800de10:	4801      	ldr	r0, [pc, #4]	@ (800de18 <__malloc_lock+0x8>)
 800de12:	f7ff b8ba 	b.w	800cf8a <__retarget_lock_acquire_recursive>
 800de16:	bf00      	nop
 800de18:	20001f5c 	.word	0x20001f5c

0800de1c <__malloc_unlock>:
 800de1c:	4801      	ldr	r0, [pc, #4]	@ (800de24 <__malloc_unlock+0x8>)
 800de1e:	f7ff b8b5 	b.w	800cf8c <__retarget_lock_release_recursive>
 800de22:	bf00      	nop
 800de24:	20001f5c 	.word	0x20001f5c

0800de28 <_Balloc>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	69c6      	ldr	r6, [r0, #28]
 800de2c:	4604      	mov	r4, r0
 800de2e:	460d      	mov	r5, r1
 800de30:	b976      	cbnz	r6, 800de50 <_Balloc+0x28>
 800de32:	2010      	movs	r0, #16
 800de34:	f7ff ff42 	bl	800dcbc <malloc>
 800de38:	4602      	mov	r2, r0
 800de3a:	61e0      	str	r0, [r4, #28]
 800de3c:	b920      	cbnz	r0, 800de48 <_Balloc+0x20>
 800de3e:	4b18      	ldr	r3, [pc, #96]	@ (800dea0 <_Balloc+0x78>)
 800de40:	4818      	ldr	r0, [pc, #96]	@ (800dea4 <_Balloc+0x7c>)
 800de42:	216b      	movs	r1, #107	@ 0x6b
 800de44:	f000 fdae 	bl	800e9a4 <__assert_func>
 800de48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de4c:	6006      	str	r6, [r0, #0]
 800de4e:	60c6      	str	r6, [r0, #12]
 800de50:	69e6      	ldr	r6, [r4, #28]
 800de52:	68f3      	ldr	r3, [r6, #12]
 800de54:	b183      	cbz	r3, 800de78 <_Balloc+0x50>
 800de56:	69e3      	ldr	r3, [r4, #28]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de5e:	b9b8      	cbnz	r0, 800de90 <_Balloc+0x68>
 800de60:	2101      	movs	r1, #1
 800de62:	fa01 f605 	lsl.w	r6, r1, r5
 800de66:	1d72      	adds	r2, r6, #5
 800de68:	0092      	lsls	r2, r2, #2
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 fdb8 	bl	800e9e0 <_calloc_r>
 800de70:	b160      	cbz	r0, 800de8c <_Balloc+0x64>
 800de72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de76:	e00e      	b.n	800de96 <_Balloc+0x6e>
 800de78:	2221      	movs	r2, #33	@ 0x21
 800de7a:	2104      	movs	r1, #4
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 fdaf 	bl	800e9e0 <_calloc_r>
 800de82:	69e3      	ldr	r3, [r4, #28]
 800de84:	60f0      	str	r0, [r6, #12]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1e4      	bne.n	800de56 <_Balloc+0x2e>
 800de8c:	2000      	movs	r0, #0
 800de8e:	bd70      	pop	{r4, r5, r6, pc}
 800de90:	6802      	ldr	r2, [r0, #0]
 800de92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de96:	2300      	movs	r3, #0
 800de98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de9c:	e7f7      	b.n	800de8e <_Balloc+0x66>
 800de9e:	bf00      	nop
 800dea0:	0800f185 	.word	0x0800f185
 800dea4:	0800f205 	.word	0x0800f205

0800dea8 <_Bfree>:
 800dea8:	b570      	push	{r4, r5, r6, lr}
 800deaa:	69c6      	ldr	r6, [r0, #28]
 800deac:	4605      	mov	r5, r0
 800deae:	460c      	mov	r4, r1
 800deb0:	b976      	cbnz	r6, 800ded0 <_Bfree+0x28>
 800deb2:	2010      	movs	r0, #16
 800deb4:	f7ff ff02 	bl	800dcbc <malloc>
 800deb8:	4602      	mov	r2, r0
 800deba:	61e8      	str	r0, [r5, #28]
 800debc:	b920      	cbnz	r0, 800dec8 <_Bfree+0x20>
 800debe:	4b09      	ldr	r3, [pc, #36]	@ (800dee4 <_Bfree+0x3c>)
 800dec0:	4809      	ldr	r0, [pc, #36]	@ (800dee8 <_Bfree+0x40>)
 800dec2:	218f      	movs	r1, #143	@ 0x8f
 800dec4:	f000 fd6e 	bl	800e9a4 <__assert_func>
 800dec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800decc:	6006      	str	r6, [r0, #0]
 800dece:	60c6      	str	r6, [r0, #12]
 800ded0:	b13c      	cbz	r4, 800dee2 <_Bfree+0x3a>
 800ded2:	69eb      	ldr	r3, [r5, #28]
 800ded4:	6862      	ldr	r2, [r4, #4]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dedc:	6021      	str	r1, [r4, #0]
 800dede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dee2:	bd70      	pop	{r4, r5, r6, pc}
 800dee4:	0800f185 	.word	0x0800f185
 800dee8:	0800f205 	.word	0x0800f205

0800deec <__multadd>:
 800deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def0:	690d      	ldr	r5, [r1, #16]
 800def2:	4607      	mov	r7, r0
 800def4:	460c      	mov	r4, r1
 800def6:	461e      	mov	r6, r3
 800def8:	f101 0c14 	add.w	ip, r1, #20
 800defc:	2000      	movs	r0, #0
 800defe:	f8dc 3000 	ldr.w	r3, [ip]
 800df02:	b299      	uxth	r1, r3
 800df04:	fb02 6101 	mla	r1, r2, r1, r6
 800df08:	0c1e      	lsrs	r6, r3, #16
 800df0a:	0c0b      	lsrs	r3, r1, #16
 800df0c:	fb02 3306 	mla	r3, r2, r6, r3
 800df10:	b289      	uxth	r1, r1
 800df12:	3001      	adds	r0, #1
 800df14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df18:	4285      	cmp	r5, r0
 800df1a:	f84c 1b04 	str.w	r1, [ip], #4
 800df1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df22:	dcec      	bgt.n	800defe <__multadd+0x12>
 800df24:	b30e      	cbz	r6, 800df6a <__multadd+0x7e>
 800df26:	68a3      	ldr	r3, [r4, #8]
 800df28:	42ab      	cmp	r3, r5
 800df2a:	dc19      	bgt.n	800df60 <__multadd+0x74>
 800df2c:	6861      	ldr	r1, [r4, #4]
 800df2e:	4638      	mov	r0, r7
 800df30:	3101      	adds	r1, #1
 800df32:	f7ff ff79 	bl	800de28 <_Balloc>
 800df36:	4680      	mov	r8, r0
 800df38:	b928      	cbnz	r0, 800df46 <__multadd+0x5a>
 800df3a:	4602      	mov	r2, r0
 800df3c:	4b0c      	ldr	r3, [pc, #48]	@ (800df70 <__multadd+0x84>)
 800df3e:	480d      	ldr	r0, [pc, #52]	@ (800df74 <__multadd+0x88>)
 800df40:	21ba      	movs	r1, #186	@ 0xba
 800df42:	f000 fd2f 	bl	800e9a4 <__assert_func>
 800df46:	6922      	ldr	r2, [r4, #16]
 800df48:	3202      	adds	r2, #2
 800df4a:	f104 010c 	add.w	r1, r4, #12
 800df4e:	0092      	lsls	r2, r2, #2
 800df50:	300c      	adds	r0, #12
 800df52:	f000 fd19 	bl	800e988 <memcpy>
 800df56:	4621      	mov	r1, r4
 800df58:	4638      	mov	r0, r7
 800df5a:	f7ff ffa5 	bl	800dea8 <_Bfree>
 800df5e:	4644      	mov	r4, r8
 800df60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df64:	3501      	adds	r5, #1
 800df66:	615e      	str	r6, [r3, #20]
 800df68:	6125      	str	r5, [r4, #16]
 800df6a:	4620      	mov	r0, r4
 800df6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df70:	0800f1f4 	.word	0x0800f1f4
 800df74:	0800f205 	.word	0x0800f205

0800df78 <__hi0bits>:
 800df78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800df7c:	4603      	mov	r3, r0
 800df7e:	bf36      	itet	cc
 800df80:	0403      	lslcc	r3, r0, #16
 800df82:	2000      	movcs	r0, #0
 800df84:	2010      	movcc	r0, #16
 800df86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df8a:	bf3c      	itt	cc
 800df8c:	021b      	lslcc	r3, r3, #8
 800df8e:	3008      	addcc	r0, #8
 800df90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df94:	bf3c      	itt	cc
 800df96:	011b      	lslcc	r3, r3, #4
 800df98:	3004      	addcc	r0, #4
 800df9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df9e:	bf3c      	itt	cc
 800dfa0:	009b      	lslcc	r3, r3, #2
 800dfa2:	3002      	addcc	r0, #2
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	db05      	blt.n	800dfb4 <__hi0bits+0x3c>
 800dfa8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dfac:	f100 0001 	add.w	r0, r0, #1
 800dfb0:	bf08      	it	eq
 800dfb2:	2020      	moveq	r0, #32
 800dfb4:	4770      	bx	lr

0800dfb6 <__lo0bits>:
 800dfb6:	6803      	ldr	r3, [r0, #0]
 800dfb8:	4602      	mov	r2, r0
 800dfba:	f013 0007 	ands.w	r0, r3, #7
 800dfbe:	d00b      	beq.n	800dfd8 <__lo0bits+0x22>
 800dfc0:	07d9      	lsls	r1, r3, #31
 800dfc2:	d421      	bmi.n	800e008 <__lo0bits+0x52>
 800dfc4:	0798      	lsls	r0, r3, #30
 800dfc6:	bf49      	itett	mi
 800dfc8:	085b      	lsrmi	r3, r3, #1
 800dfca:	089b      	lsrpl	r3, r3, #2
 800dfcc:	2001      	movmi	r0, #1
 800dfce:	6013      	strmi	r3, [r2, #0]
 800dfd0:	bf5c      	itt	pl
 800dfd2:	6013      	strpl	r3, [r2, #0]
 800dfd4:	2002      	movpl	r0, #2
 800dfd6:	4770      	bx	lr
 800dfd8:	b299      	uxth	r1, r3
 800dfda:	b909      	cbnz	r1, 800dfe0 <__lo0bits+0x2a>
 800dfdc:	0c1b      	lsrs	r3, r3, #16
 800dfde:	2010      	movs	r0, #16
 800dfe0:	b2d9      	uxtb	r1, r3
 800dfe2:	b909      	cbnz	r1, 800dfe8 <__lo0bits+0x32>
 800dfe4:	3008      	adds	r0, #8
 800dfe6:	0a1b      	lsrs	r3, r3, #8
 800dfe8:	0719      	lsls	r1, r3, #28
 800dfea:	bf04      	itt	eq
 800dfec:	091b      	lsreq	r3, r3, #4
 800dfee:	3004      	addeq	r0, #4
 800dff0:	0799      	lsls	r1, r3, #30
 800dff2:	bf04      	itt	eq
 800dff4:	089b      	lsreq	r3, r3, #2
 800dff6:	3002      	addeq	r0, #2
 800dff8:	07d9      	lsls	r1, r3, #31
 800dffa:	d403      	bmi.n	800e004 <__lo0bits+0x4e>
 800dffc:	085b      	lsrs	r3, r3, #1
 800dffe:	f100 0001 	add.w	r0, r0, #1
 800e002:	d003      	beq.n	800e00c <__lo0bits+0x56>
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	4770      	bx	lr
 800e008:	2000      	movs	r0, #0
 800e00a:	4770      	bx	lr
 800e00c:	2020      	movs	r0, #32
 800e00e:	4770      	bx	lr

0800e010 <__i2b>:
 800e010:	b510      	push	{r4, lr}
 800e012:	460c      	mov	r4, r1
 800e014:	2101      	movs	r1, #1
 800e016:	f7ff ff07 	bl	800de28 <_Balloc>
 800e01a:	4602      	mov	r2, r0
 800e01c:	b928      	cbnz	r0, 800e02a <__i2b+0x1a>
 800e01e:	4b05      	ldr	r3, [pc, #20]	@ (800e034 <__i2b+0x24>)
 800e020:	4805      	ldr	r0, [pc, #20]	@ (800e038 <__i2b+0x28>)
 800e022:	f240 1145 	movw	r1, #325	@ 0x145
 800e026:	f000 fcbd 	bl	800e9a4 <__assert_func>
 800e02a:	2301      	movs	r3, #1
 800e02c:	6144      	str	r4, [r0, #20]
 800e02e:	6103      	str	r3, [r0, #16]
 800e030:	bd10      	pop	{r4, pc}
 800e032:	bf00      	nop
 800e034:	0800f1f4 	.word	0x0800f1f4
 800e038:	0800f205 	.word	0x0800f205

0800e03c <__multiply>:
 800e03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e040:	4614      	mov	r4, r2
 800e042:	690a      	ldr	r2, [r1, #16]
 800e044:	6923      	ldr	r3, [r4, #16]
 800e046:	429a      	cmp	r2, r3
 800e048:	bfa8      	it	ge
 800e04a:	4623      	movge	r3, r4
 800e04c:	460f      	mov	r7, r1
 800e04e:	bfa4      	itt	ge
 800e050:	460c      	movge	r4, r1
 800e052:	461f      	movge	r7, r3
 800e054:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e058:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e05c:	68a3      	ldr	r3, [r4, #8]
 800e05e:	6861      	ldr	r1, [r4, #4]
 800e060:	eb0a 0609 	add.w	r6, sl, r9
 800e064:	42b3      	cmp	r3, r6
 800e066:	b085      	sub	sp, #20
 800e068:	bfb8      	it	lt
 800e06a:	3101      	addlt	r1, #1
 800e06c:	f7ff fedc 	bl	800de28 <_Balloc>
 800e070:	b930      	cbnz	r0, 800e080 <__multiply+0x44>
 800e072:	4602      	mov	r2, r0
 800e074:	4b44      	ldr	r3, [pc, #272]	@ (800e188 <__multiply+0x14c>)
 800e076:	4845      	ldr	r0, [pc, #276]	@ (800e18c <__multiply+0x150>)
 800e078:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e07c:	f000 fc92 	bl	800e9a4 <__assert_func>
 800e080:	f100 0514 	add.w	r5, r0, #20
 800e084:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e088:	462b      	mov	r3, r5
 800e08a:	2200      	movs	r2, #0
 800e08c:	4543      	cmp	r3, r8
 800e08e:	d321      	bcc.n	800e0d4 <__multiply+0x98>
 800e090:	f107 0114 	add.w	r1, r7, #20
 800e094:	f104 0214 	add.w	r2, r4, #20
 800e098:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e09c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e0a0:	9302      	str	r3, [sp, #8]
 800e0a2:	1b13      	subs	r3, r2, r4
 800e0a4:	3b15      	subs	r3, #21
 800e0a6:	f023 0303 	bic.w	r3, r3, #3
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	f104 0715 	add.w	r7, r4, #21
 800e0b0:	42ba      	cmp	r2, r7
 800e0b2:	bf38      	it	cc
 800e0b4:	2304      	movcc	r3, #4
 800e0b6:	9301      	str	r3, [sp, #4]
 800e0b8:	9b02      	ldr	r3, [sp, #8]
 800e0ba:	9103      	str	r1, [sp, #12]
 800e0bc:	428b      	cmp	r3, r1
 800e0be:	d80c      	bhi.n	800e0da <__multiply+0x9e>
 800e0c0:	2e00      	cmp	r6, #0
 800e0c2:	dd03      	ble.n	800e0cc <__multiply+0x90>
 800e0c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d05b      	beq.n	800e184 <__multiply+0x148>
 800e0cc:	6106      	str	r6, [r0, #16]
 800e0ce:	b005      	add	sp, #20
 800e0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d4:	f843 2b04 	str.w	r2, [r3], #4
 800e0d8:	e7d8      	b.n	800e08c <__multiply+0x50>
 800e0da:	f8b1 a000 	ldrh.w	sl, [r1]
 800e0de:	f1ba 0f00 	cmp.w	sl, #0
 800e0e2:	d024      	beq.n	800e12e <__multiply+0xf2>
 800e0e4:	f104 0e14 	add.w	lr, r4, #20
 800e0e8:	46a9      	mov	r9, r5
 800e0ea:	f04f 0c00 	mov.w	ip, #0
 800e0ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0f2:	f8d9 3000 	ldr.w	r3, [r9]
 800e0f6:	fa1f fb87 	uxth.w	fp, r7
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	fb0a 330b 	mla	r3, sl, fp, r3
 800e100:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e104:	f8d9 7000 	ldr.w	r7, [r9]
 800e108:	4463      	add	r3, ip
 800e10a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e10e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e112:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e116:	b29b      	uxth	r3, r3
 800e118:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e11c:	4572      	cmp	r2, lr
 800e11e:	f849 3b04 	str.w	r3, [r9], #4
 800e122:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e126:	d8e2      	bhi.n	800e0ee <__multiply+0xb2>
 800e128:	9b01      	ldr	r3, [sp, #4]
 800e12a:	f845 c003 	str.w	ip, [r5, r3]
 800e12e:	9b03      	ldr	r3, [sp, #12]
 800e130:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e134:	3104      	adds	r1, #4
 800e136:	f1b9 0f00 	cmp.w	r9, #0
 800e13a:	d021      	beq.n	800e180 <__multiply+0x144>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	f104 0c14 	add.w	ip, r4, #20
 800e142:	46ae      	mov	lr, r5
 800e144:	f04f 0a00 	mov.w	sl, #0
 800e148:	f8bc b000 	ldrh.w	fp, [ip]
 800e14c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e150:	fb09 770b 	mla	r7, r9, fp, r7
 800e154:	4457      	add	r7, sl
 800e156:	b29b      	uxth	r3, r3
 800e158:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e15c:	f84e 3b04 	str.w	r3, [lr], #4
 800e160:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e164:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e168:	f8be 3000 	ldrh.w	r3, [lr]
 800e16c:	fb09 330a 	mla	r3, r9, sl, r3
 800e170:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e174:	4562      	cmp	r2, ip
 800e176:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e17a:	d8e5      	bhi.n	800e148 <__multiply+0x10c>
 800e17c:	9f01      	ldr	r7, [sp, #4]
 800e17e:	51eb      	str	r3, [r5, r7]
 800e180:	3504      	adds	r5, #4
 800e182:	e799      	b.n	800e0b8 <__multiply+0x7c>
 800e184:	3e01      	subs	r6, #1
 800e186:	e79b      	b.n	800e0c0 <__multiply+0x84>
 800e188:	0800f1f4 	.word	0x0800f1f4
 800e18c:	0800f205 	.word	0x0800f205

0800e190 <__pow5mult>:
 800e190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e194:	4615      	mov	r5, r2
 800e196:	f012 0203 	ands.w	r2, r2, #3
 800e19a:	4607      	mov	r7, r0
 800e19c:	460e      	mov	r6, r1
 800e19e:	d007      	beq.n	800e1b0 <__pow5mult+0x20>
 800e1a0:	4c25      	ldr	r4, [pc, #148]	@ (800e238 <__pow5mult+0xa8>)
 800e1a2:	3a01      	subs	r2, #1
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1aa:	f7ff fe9f 	bl	800deec <__multadd>
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	10ad      	asrs	r5, r5, #2
 800e1b2:	d03d      	beq.n	800e230 <__pow5mult+0xa0>
 800e1b4:	69fc      	ldr	r4, [r7, #28]
 800e1b6:	b97c      	cbnz	r4, 800e1d8 <__pow5mult+0x48>
 800e1b8:	2010      	movs	r0, #16
 800e1ba:	f7ff fd7f 	bl	800dcbc <malloc>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	61f8      	str	r0, [r7, #28]
 800e1c2:	b928      	cbnz	r0, 800e1d0 <__pow5mult+0x40>
 800e1c4:	4b1d      	ldr	r3, [pc, #116]	@ (800e23c <__pow5mult+0xac>)
 800e1c6:	481e      	ldr	r0, [pc, #120]	@ (800e240 <__pow5mult+0xb0>)
 800e1c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e1cc:	f000 fbea 	bl	800e9a4 <__assert_func>
 800e1d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1d4:	6004      	str	r4, [r0, #0]
 800e1d6:	60c4      	str	r4, [r0, #12]
 800e1d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e1dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1e0:	b94c      	cbnz	r4, 800e1f6 <__pow5mult+0x66>
 800e1e2:	f240 2171 	movw	r1, #625	@ 0x271
 800e1e6:	4638      	mov	r0, r7
 800e1e8:	f7ff ff12 	bl	800e010 <__i2b>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	6003      	str	r3, [r0, #0]
 800e1f6:	f04f 0900 	mov.w	r9, #0
 800e1fa:	07eb      	lsls	r3, r5, #31
 800e1fc:	d50a      	bpl.n	800e214 <__pow5mult+0x84>
 800e1fe:	4631      	mov	r1, r6
 800e200:	4622      	mov	r2, r4
 800e202:	4638      	mov	r0, r7
 800e204:	f7ff ff1a 	bl	800e03c <__multiply>
 800e208:	4631      	mov	r1, r6
 800e20a:	4680      	mov	r8, r0
 800e20c:	4638      	mov	r0, r7
 800e20e:	f7ff fe4b 	bl	800dea8 <_Bfree>
 800e212:	4646      	mov	r6, r8
 800e214:	106d      	asrs	r5, r5, #1
 800e216:	d00b      	beq.n	800e230 <__pow5mult+0xa0>
 800e218:	6820      	ldr	r0, [r4, #0]
 800e21a:	b938      	cbnz	r0, 800e22c <__pow5mult+0x9c>
 800e21c:	4622      	mov	r2, r4
 800e21e:	4621      	mov	r1, r4
 800e220:	4638      	mov	r0, r7
 800e222:	f7ff ff0b 	bl	800e03c <__multiply>
 800e226:	6020      	str	r0, [r4, #0]
 800e228:	f8c0 9000 	str.w	r9, [r0]
 800e22c:	4604      	mov	r4, r0
 800e22e:	e7e4      	b.n	800e1fa <__pow5mult+0x6a>
 800e230:	4630      	mov	r0, r6
 800e232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e236:	bf00      	nop
 800e238:	0800f260 	.word	0x0800f260
 800e23c:	0800f185 	.word	0x0800f185
 800e240:	0800f205 	.word	0x0800f205

0800e244 <__lshift>:
 800e244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e248:	460c      	mov	r4, r1
 800e24a:	6849      	ldr	r1, [r1, #4]
 800e24c:	6923      	ldr	r3, [r4, #16]
 800e24e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e252:	68a3      	ldr	r3, [r4, #8]
 800e254:	4607      	mov	r7, r0
 800e256:	4691      	mov	r9, r2
 800e258:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e25c:	f108 0601 	add.w	r6, r8, #1
 800e260:	42b3      	cmp	r3, r6
 800e262:	db0b      	blt.n	800e27c <__lshift+0x38>
 800e264:	4638      	mov	r0, r7
 800e266:	f7ff fddf 	bl	800de28 <_Balloc>
 800e26a:	4605      	mov	r5, r0
 800e26c:	b948      	cbnz	r0, 800e282 <__lshift+0x3e>
 800e26e:	4602      	mov	r2, r0
 800e270:	4b28      	ldr	r3, [pc, #160]	@ (800e314 <__lshift+0xd0>)
 800e272:	4829      	ldr	r0, [pc, #164]	@ (800e318 <__lshift+0xd4>)
 800e274:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e278:	f000 fb94 	bl	800e9a4 <__assert_func>
 800e27c:	3101      	adds	r1, #1
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	e7ee      	b.n	800e260 <__lshift+0x1c>
 800e282:	2300      	movs	r3, #0
 800e284:	f100 0114 	add.w	r1, r0, #20
 800e288:	f100 0210 	add.w	r2, r0, #16
 800e28c:	4618      	mov	r0, r3
 800e28e:	4553      	cmp	r3, sl
 800e290:	db33      	blt.n	800e2fa <__lshift+0xb6>
 800e292:	6920      	ldr	r0, [r4, #16]
 800e294:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e298:	f104 0314 	add.w	r3, r4, #20
 800e29c:	f019 091f 	ands.w	r9, r9, #31
 800e2a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2a8:	d02b      	beq.n	800e302 <__lshift+0xbe>
 800e2aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e2ae:	468a      	mov	sl, r1
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	6818      	ldr	r0, [r3, #0]
 800e2b4:	fa00 f009 	lsl.w	r0, r0, r9
 800e2b8:	4310      	orrs	r0, r2
 800e2ba:	f84a 0b04 	str.w	r0, [sl], #4
 800e2be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2c2:	459c      	cmp	ip, r3
 800e2c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2c8:	d8f3      	bhi.n	800e2b2 <__lshift+0x6e>
 800e2ca:	ebac 0304 	sub.w	r3, ip, r4
 800e2ce:	3b15      	subs	r3, #21
 800e2d0:	f023 0303 	bic.w	r3, r3, #3
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	f104 0015 	add.w	r0, r4, #21
 800e2da:	4584      	cmp	ip, r0
 800e2dc:	bf38      	it	cc
 800e2de:	2304      	movcc	r3, #4
 800e2e0:	50ca      	str	r2, [r1, r3]
 800e2e2:	b10a      	cbz	r2, 800e2e8 <__lshift+0xa4>
 800e2e4:	f108 0602 	add.w	r6, r8, #2
 800e2e8:	3e01      	subs	r6, #1
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	612e      	str	r6, [r5, #16]
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	f7ff fdda 	bl	800dea8 <_Bfree>
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e2fe:	3301      	adds	r3, #1
 800e300:	e7c5      	b.n	800e28e <__lshift+0x4a>
 800e302:	3904      	subs	r1, #4
 800e304:	f853 2b04 	ldr.w	r2, [r3], #4
 800e308:	f841 2f04 	str.w	r2, [r1, #4]!
 800e30c:	459c      	cmp	ip, r3
 800e30e:	d8f9      	bhi.n	800e304 <__lshift+0xc0>
 800e310:	e7ea      	b.n	800e2e8 <__lshift+0xa4>
 800e312:	bf00      	nop
 800e314:	0800f1f4 	.word	0x0800f1f4
 800e318:	0800f205 	.word	0x0800f205

0800e31c <__mcmp>:
 800e31c:	690a      	ldr	r2, [r1, #16]
 800e31e:	4603      	mov	r3, r0
 800e320:	6900      	ldr	r0, [r0, #16]
 800e322:	1a80      	subs	r0, r0, r2
 800e324:	b530      	push	{r4, r5, lr}
 800e326:	d10e      	bne.n	800e346 <__mcmp+0x2a>
 800e328:	3314      	adds	r3, #20
 800e32a:	3114      	adds	r1, #20
 800e32c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e330:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e334:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e338:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e33c:	4295      	cmp	r5, r2
 800e33e:	d003      	beq.n	800e348 <__mcmp+0x2c>
 800e340:	d205      	bcs.n	800e34e <__mcmp+0x32>
 800e342:	f04f 30ff 	mov.w	r0, #4294967295
 800e346:	bd30      	pop	{r4, r5, pc}
 800e348:	42a3      	cmp	r3, r4
 800e34a:	d3f3      	bcc.n	800e334 <__mcmp+0x18>
 800e34c:	e7fb      	b.n	800e346 <__mcmp+0x2a>
 800e34e:	2001      	movs	r0, #1
 800e350:	e7f9      	b.n	800e346 <__mcmp+0x2a>
	...

0800e354 <__mdiff>:
 800e354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e358:	4689      	mov	r9, r1
 800e35a:	4606      	mov	r6, r0
 800e35c:	4611      	mov	r1, r2
 800e35e:	4648      	mov	r0, r9
 800e360:	4614      	mov	r4, r2
 800e362:	f7ff ffdb 	bl	800e31c <__mcmp>
 800e366:	1e05      	subs	r5, r0, #0
 800e368:	d112      	bne.n	800e390 <__mdiff+0x3c>
 800e36a:	4629      	mov	r1, r5
 800e36c:	4630      	mov	r0, r6
 800e36e:	f7ff fd5b 	bl	800de28 <_Balloc>
 800e372:	4602      	mov	r2, r0
 800e374:	b928      	cbnz	r0, 800e382 <__mdiff+0x2e>
 800e376:	4b3f      	ldr	r3, [pc, #252]	@ (800e474 <__mdiff+0x120>)
 800e378:	f240 2137 	movw	r1, #567	@ 0x237
 800e37c:	483e      	ldr	r0, [pc, #248]	@ (800e478 <__mdiff+0x124>)
 800e37e:	f000 fb11 	bl	800e9a4 <__assert_func>
 800e382:	2301      	movs	r3, #1
 800e384:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e388:	4610      	mov	r0, r2
 800e38a:	b003      	add	sp, #12
 800e38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e390:	bfbc      	itt	lt
 800e392:	464b      	movlt	r3, r9
 800e394:	46a1      	movlt	r9, r4
 800e396:	4630      	mov	r0, r6
 800e398:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e39c:	bfba      	itte	lt
 800e39e:	461c      	movlt	r4, r3
 800e3a0:	2501      	movlt	r5, #1
 800e3a2:	2500      	movge	r5, #0
 800e3a4:	f7ff fd40 	bl	800de28 <_Balloc>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	b918      	cbnz	r0, 800e3b4 <__mdiff+0x60>
 800e3ac:	4b31      	ldr	r3, [pc, #196]	@ (800e474 <__mdiff+0x120>)
 800e3ae:	f240 2145 	movw	r1, #581	@ 0x245
 800e3b2:	e7e3      	b.n	800e37c <__mdiff+0x28>
 800e3b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e3b8:	6926      	ldr	r6, [r4, #16]
 800e3ba:	60c5      	str	r5, [r0, #12]
 800e3bc:	f109 0310 	add.w	r3, r9, #16
 800e3c0:	f109 0514 	add.w	r5, r9, #20
 800e3c4:	f104 0e14 	add.w	lr, r4, #20
 800e3c8:	f100 0b14 	add.w	fp, r0, #20
 800e3cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e3d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e3d4:	9301      	str	r3, [sp, #4]
 800e3d6:	46d9      	mov	r9, fp
 800e3d8:	f04f 0c00 	mov.w	ip, #0
 800e3dc:	9b01      	ldr	r3, [sp, #4]
 800e3de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e3e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e3e6:	9301      	str	r3, [sp, #4]
 800e3e8:	fa1f f38a 	uxth.w	r3, sl
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	b283      	uxth	r3, r0
 800e3f0:	1acb      	subs	r3, r1, r3
 800e3f2:	0c00      	lsrs	r0, r0, #16
 800e3f4:	4463      	add	r3, ip
 800e3f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e3fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e404:	4576      	cmp	r6, lr
 800e406:	f849 3b04 	str.w	r3, [r9], #4
 800e40a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e40e:	d8e5      	bhi.n	800e3dc <__mdiff+0x88>
 800e410:	1b33      	subs	r3, r6, r4
 800e412:	3b15      	subs	r3, #21
 800e414:	f023 0303 	bic.w	r3, r3, #3
 800e418:	3415      	adds	r4, #21
 800e41a:	3304      	adds	r3, #4
 800e41c:	42a6      	cmp	r6, r4
 800e41e:	bf38      	it	cc
 800e420:	2304      	movcc	r3, #4
 800e422:	441d      	add	r5, r3
 800e424:	445b      	add	r3, fp
 800e426:	461e      	mov	r6, r3
 800e428:	462c      	mov	r4, r5
 800e42a:	4544      	cmp	r4, r8
 800e42c:	d30e      	bcc.n	800e44c <__mdiff+0xf8>
 800e42e:	f108 0103 	add.w	r1, r8, #3
 800e432:	1b49      	subs	r1, r1, r5
 800e434:	f021 0103 	bic.w	r1, r1, #3
 800e438:	3d03      	subs	r5, #3
 800e43a:	45a8      	cmp	r8, r5
 800e43c:	bf38      	it	cc
 800e43e:	2100      	movcc	r1, #0
 800e440:	440b      	add	r3, r1
 800e442:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e446:	b191      	cbz	r1, 800e46e <__mdiff+0x11a>
 800e448:	6117      	str	r7, [r2, #16]
 800e44a:	e79d      	b.n	800e388 <__mdiff+0x34>
 800e44c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e450:	46e6      	mov	lr, ip
 800e452:	0c08      	lsrs	r0, r1, #16
 800e454:	fa1c fc81 	uxtah	ip, ip, r1
 800e458:	4471      	add	r1, lr
 800e45a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e45e:	b289      	uxth	r1, r1
 800e460:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e464:	f846 1b04 	str.w	r1, [r6], #4
 800e468:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e46c:	e7dd      	b.n	800e42a <__mdiff+0xd6>
 800e46e:	3f01      	subs	r7, #1
 800e470:	e7e7      	b.n	800e442 <__mdiff+0xee>
 800e472:	bf00      	nop
 800e474:	0800f1f4 	.word	0x0800f1f4
 800e478:	0800f205 	.word	0x0800f205

0800e47c <__d2b>:
 800e47c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e480:	460f      	mov	r7, r1
 800e482:	2101      	movs	r1, #1
 800e484:	ec59 8b10 	vmov	r8, r9, d0
 800e488:	4616      	mov	r6, r2
 800e48a:	f7ff fccd 	bl	800de28 <_Balloc>
 800e48e:	4604      	mov	r4, r0
 800e490:	b930      	cbnz	r0, 800e4a0 <__d2b+0x24>
 800e492:	4602      	mov	r2, r0
 800e494:	4b23      	ldr	r3, [pc, #140]	@ (800e524 <__d2b+0xa8>)
 800e496:	4824      	ldr	r0, [pc, #144]	@ (800e528 <__d2b+0xac>)
 800e498:	f240 310f 	movw	r1, #783	@ 0x30f
 800e49c:	f000 fa82 	bl	800e9a4 <__assert_func>
 800e4a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e4a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4a8:	b10d      	cbz	r5, 800e4ae <__d2b+0x32>
 800e4aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4ae:	9301      	str	r3, [sp, #4]
 800e4b0:	f1b8 0300 	subs.w	r3, r8, #0
 800e4b4:	d023      	beq.n	800e4fe <__d2b+0x82>
 800e4b6:	4668      	mov	r0, sp
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	f7ff fd7c 	bl	800dfb6 <__lo0bits>
 800e4be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e4c2:	b1d0      	cbz	r0, 800e4fa <__d2b+0x7e>
 800e4c4:	f1c0 0320 	rsb	r3, r0, #32
 800e4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4cc:	430b      	orrs	r3, r1
 800e4ce:	40c2      	lsrs	r2, r0
 800e4d0:	6163      	str	r3, [r4, #20]
 800e4d2:	9201      	str	r2, [sp, #4]
 800e4d4:	9b01      	ldr	r3, [sp, #4]
 800e4d6:	61a3      	str	r3, [r4, #24]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	bf0c      	ite	eq
 800e4dc:	2201      	moveq	r2, #1
 800e4de:	2202      	movne	r2, #2
 800e4e0:	6122      	str	r2, [r4, #16]
 800e4e2:	b1a5      	cbz	r5, 800e50e <__d2b+0x92>
 800e4e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e4e8:	4405      	add	r5, r0
 800e4ea:	603d      	str	r5, [r7, #0]
 800e4ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e4f0:	6030      	str	r0, [r6, #0]
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	b003      	add	sp, #12
 800e4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4fa:	6161      	str	r1, [r4, #20]
 800e4fc:	e7ea      	b.n	800e4d4 <__d2b+0x58>
 800e4fe:	a801      	add	r0, sp, #4
 800e500:	f7ff fd59 	bl	800dfb6 <__lo0bits>
 800e504:	9b01      	ldr	r3, [sp, #4]
 800e506:	6163      	str	r3, [r4, #20]
 800e508:	3020      	adds	r0, #32
 800e50a:	2201      	movs	r2, #1
 800e50c:	e7e8      	b.n	800e4e0 <__d2b+0x64>
 800e50e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e512:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e516:	6038      	str	r0, [r7, #0]
 800e518:	6918      	ldr	r0, [r3, #16]
 800e51a:	f7ff fd2d 	bl	800df78 <__hi0bits>
 800e51e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e522:	e7e5      	b.n	800e4f0 <__d2b+0x74>
 800e524:	0800f1f4 	.word	0x0800f1f4
 800e528:	0800f205 	.word	0x0800f205

0800e52c <__ssputs_r>:
 800e52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e530:	688e      	ldr	r6, [r1, #8]
 800e532:	461f      	mov	r7, r3
 800e534:	42be      	cmp	r6, r7
 800e536:	680b      	ldr	r3, [r1, #0]
 800e538:	4682      	mov	sl, r0
 800e53a:	460c      	mov	r4, r1
 800e53c:	4690      	mov	r8, r2
 800e53e:	d82d      	bhi.n	800e59c <__ssputs_r+0x70>
 800e540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e544:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e548:	d026      	beq.n	800e598 <__ssputs_r+0x6c>
 800e54a:	6965      	ldr	r5, [r4, #20]
 800e54c:	6909      	ldr	r1, [r1, #16]
 800e54e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e552:	eba3 0901 	sub.w	r9, r3, r1
 800e556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e55a:	1c7b      	adds	r3, r7, #1
 800e55c:	444b      	add	r3, r9
 800e55e:	106d      	asrs	r5, r5, #1
 800e560:	429d      	cmp	r5, r3
 800e562:	bf38      	it	cc
 800e564:	461d      	movcc	r5, r3
 800e566:	0553      	lsls	r3, r2, #21
 800e568:	d527      	bpl.n	800e5ba <__ssputs_r+0x8e>
 800e56a:	4629      	mov	r1, r5
 800e56c:	f7ff fbd0 	bl	800dd10 <_malloc_r>
 800e570:	4606      	mov	r6, r0
 800e572:	b360      	cbz	r0, 800e5ce <__ssputs_r+0xa2>
 800e574:	6921      	ldr	r1, [r4, #16]
 800e576:	464a      	mov	r2, r9
 800e578:	f000 fa06 	bl	800e988 <memcpy>
 800e57c:	89a3      	ldrh	r3, [r4, #12]
 800e57e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e586:	81a3      	strh	r3, [r4, #12]
 800e588:	6126      	str	r6, [r4, #16]
 800e58a:	6165      	str	r5, [r4, #20]
 800e58c:	444e      	add	r6, r9
 800e58e:	eba5 0509 	sub.w	r5, r5, r9
 800e592:	6026      	str	r6, [r4, #0]
 800e594:	60a5      	str	r5, [r4, #8]
 800e596:	463e      	mov	r6, r7
 800e598:	42be      	cmp	r6, r7
 800e59a:	d900      	bls.n	800e59e <__ssputs_r+0x72>
 800e59c:	463e      	mov	r6, r7
 800e59e:	6820      	ldr	r0, [r4, #0]
 800e5a0:	4632      	mov	r2, r6
 800e5a2:	4641      	mov	r1, r8
 800e5a4:	f000 f9c6 	bl	800e934 <memmove>
 800e5a8:	68a3      	ldr	r3, [r4, #8]
 800e5aa:	1b9b      	subs	r3, r3, r6
 800e5ac:	60a3      	str	r3, [r4, #8]
 800e5ae:	6823      	ldr	r3, [r4, #0]
 800e5b0:	4433      	add	r3, r6
 800e5b2:	6023      	str	r3, [r4, #0]
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ba:	462a      	mov	r2, r5
 800e5bc:	f000 fa36 	bl	800ea2c <_realloc_r>
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	d1e0      	bne.n	800e588 <__ssputs_r+0x5c>
 800e5c6:	6921      	ldr	r1, [r4, #16]
 800e5c8:	4650      	mov	r0, sl
 800e5ca:	f7ff fb2d 	bl	800dc28 <_free_r>
 800e5ce:	230c      	movs	r3, #12
 800e5d0:	f8ca 3000 	str.w	r3, [sl]
 800e5d4:	89a3      	ldrh	r3, [r4, #12]
 800e5d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5da:	81a3      	strh	r3, [r4, #12]
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e0:	e7e9      	b.n	800e5b6 <__ssputs_r+0x8a>
	...

0800e5e4 <_svfiprintf_r>:
 800e5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e8:	4698      	mov	r8, r3
 800e5ea:	898b      	ldrh	r3, [r1, #12]
 800e5ec:	061b      	lsls	r3, r3, #24
 800e5ee:	b09d      	sub	sp, #116	@ 0x74
 800e5f0:	4607      	mov	r7, r0
 800e5f2:	460d      	mov	r5, r1
 800e5f4:	4614      	mov	r4, r2
 800e5f6:	d510      	bpl.n	800e61a <_svfiprintf_r+0x36>
 800e5f8:	690b      	ldr	r3, [r1, #16]
 800e5fa:	b973      	cbnz	r3, 800e61a <_svfiprintf_r+0x36>
 800e5fc:	2140      	movs	r1, #64	@ 0x40
 800e5fe:	f7ff fb87 	bl	800dd10 <_malloc_r>
 800e602:	6028      	str	r0, [r5, #0]
 800e604:	6128      	str	r0, [r5, #16]
 800e606:	b930      	cbnz	r0, 800e616 <_svfiprintf_r+0x32>
 800e608:	230c      	movs	r3, #12
 800e60a:	603b      	str	r3, [r7, #0]
 800e60c:	f04f 30ff 	mov.w	r0, #4294967295
 800e610:	b01d      	add	sp, #116	@ 0x74
 800e612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e616:	2340      	movs	r3, #64	@ 0x40
 800e618:	616b      	str	r3, [r5, #20]
 800e61a:	2300      	movs	r3, #0
 800e61c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e61e:	2320      	movs	r3, #32
 800e620:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e624:	f8cd 800c 	str.w	r8, [sp, #12]
 800e628:	2330      	movs	r3, #48	@ 0x30
 800e62a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e7c8 <_svfiprintf_r+0x1e4>
 800e62e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e632:	f04f 0901 	mov.w	r9, #1
 800e636:	4623      	mov	r3, r4
 800e638:	469a      	mov	sl, r3
 800e63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e63e:	b10a      	cbz	r2, 800e644 <_svfiprintf_r+0x60>
 800e640:	2a25      	cmp	r2, #37	@ 0x25
 800e642:	d1f9      	bne.n	800e638 <_svfiprintf_r+0x54>
 800e644:	ebba 0b04 	subs.w	fp, sl, r4
 800e648:	d00b      	beq.n	800e662 <_svfiprintf_r+0x7e>
 800e64a:	465b      	mov	r3, fp
 800e64c:	4622      	mov	r2, r4
 800e64e:	4629      	mov	r1, r5
 800e650:	4638      	mov	r0, r7
 800e652:	f7ff ff6b 	bl	800e52c <__ssputs_r>
 800e656:	3001      	adds	r0, #1
 800e658:	f000 80a7 	beq.w	800e7aa <_svfiprintf_r+0x1c6>
 800e65c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e65e:	445a      	add	r2, fp
 800e660:	9209      	str	r2, [sp, #36]	@ 0x24
 800e662:	f89a 3000 	ldrb.w	r3, [sl]
 800e666:	2b00      	cmp	r3, #0
 800e668:	f000 809f 	beq.w	800e7aa <_svfiprintf_r+0x1c6>
 800e66c:	2300      	movs	r3, #0
 800e66e:	f04f 32ff 	mov.w	r2, #4294967295
 800e672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e676:	f10a 0a01 	add.w	sl, sl, #1
 800e67a:	9304      	str	r3, [sp, #16]
 800e67c:	9307      	str	r3, [sp, #28]
 800e67e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e682:	931a      	str	r3, [sp, #104]	@ 0x68
 800e684:	4654      	mov	r4, sl
 800e686:	2205      	movs	r2, #5
 800e688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e68c:	484e      	ldr	r0, [pc, #312]	@ (800e7c8 <_svfiprintf_r+0x1e4>)
 800e68e:	f7f1 fd77 	bl	8000180 <memchr>
 800e692:	9a04      	ldr	r2, [sp, #16]
 800e694:	b9d8      	cbnz	r0, 800e6ce <_svfiprintf_r+0xea>
 800e696:	06d0      	lsls	r0, r2, #27
 800e698:	bf44      	itt	mi
 800e69a:	2320      	movmi	r3, #32
 800e69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6a0:	0711      	lsls	r1, r2, #28
 800e6a2:	bf44      	itt	mi
 800e6a4:	232b      	movmi	r3, #43	@ 0x2b
 800e6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e6ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6b0:	d015      	beq.n	800e6de <_svfiprintf_r+0xfa>
 800e6b2:	9a07      	ldr	r2, [sp, #28]
 800e6b4:	4654      	mov	r4, sl
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	f04f 0c0a 	mov.w	ip, #10
 800e6bc:	4621      	mov	r1, r4
 800e6be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6c2:	3b30      	subs	r3, #48	@ 0x30
 800e6c4:	2b09      	cmp	r3, #9
 800e6c6:	d94b      	bls.n	800e760 <_svfiprintf_r+0x17c>
 800e6c8:	b1b0      	cbz	r0, 800e6f8 <_svfiprintf_r+0x114>
 800e6ca:	9207      	str	r2, [sp, #28]
 800e6cc:	e014      	b.n	800e6f8 <_svfiprintf_r+0x114>
 800e6ce:	eba0 0308 	sub.w	r3, r0, r8
 800e6d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	9304      	str	r3, [sp, #16]
 800e6da:	46a2      	mov	sl, r4
 800e6dc:	e7d2      	b.n	800e684 <_svfiprintf_r+0xa0>
 800e6de:	9b03      	ldr	r3, [sp, #12]
 800e6e0:	1d19      	adds	r1, r3, #4
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	9103      	str	r1, [sp, #12]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	bfbb      	ittet	lt
 800e6ea:	425b      	neglt	r3, r3
 800e6ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e6f0:	9307      	strge	r3, [sp, #28]
 800e6f2:	9307      	strlt	r3, [sp, #28]
 800e6f4:	bfb8      	it	lt
 800e6f6:	9204      	strlt	r2, [sp, #16]
 800e6f8:	7823      	ldrb	r3, [r4, #0]
 800e6fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6fc:	d10a      	bne.n	800e714 <_svfiprintf_r+0x130>
 800e6fe:	7863      	ldrb	r3, [r4, #1]
 800e700:	2b2a      	cmp	r3, #42	@ 0x2a
 800e702:	d132      	bne.n	800e76a <_svfiprintf_r+0x186>
 800e704:	9b03      	ldr	r3, [sp, #12]
 800e706:	1d1a      	adds	r2, r3, #4
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	9203      	str	r2, [sp, #12]
 800e70c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e710:	3402      	adds	r4, #2
 800e712:	9305      	str	r3, [sp, #20]
 800e714:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e7d8 <_svfiprintf_r+0x1f4>
 800e718:	7821      	ldrb	r1, [r4, #0]
 800e71a:	2203      	movs	r2, #3
 800e71c:	4650      	mov	r0, sl
 800e71e:	f7f1 fd2f 	bl	8000180 <memchr>
 800e722:	b138      	cbz	r0, 800e734 <_svfiprintf_r+0x150>
 800e724:	9b04      	ldr	r3, [sp, #16]
 800e726:	eba0 000a 	sub.w	r0, r0, sl
 800e72a:	2240      	movs	r2, #64	@ 0x40
 800e72c:	4082      	lsls	r2, r0
 800e72e:	4313      	orrs	r3, r2
 800e730:	3401      	adds	r4, #1
 800e732:	9304      	str	r3, [sp, #16]
 800e734:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e738:	4824      	ldr	r0, [pc, #144]	@ (800e7cc <_svfiprintf_r+0x1e8>)
 800e73a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e73e:	2206      	movs	r2, #6
 800e740:	f7f1 fd1e 	bl	8000180 <memchr>
 800e744:	2800      	cmp	r0, #0
 800e746:	d036      	beq.n	800e7b6 <_svfiprintf_r+0x1d2>
 800e748:	4b21      	ldr	r3, [pc, #132]	@ (800e7d0 <_svfiprintf_r+0x1ec>)
 800e74a:	bb1b      	cbnz	r3, 800e794 <_svfiprintf_r+0x1b0>
 800e74c:	9b03      	ldr	r3, [sp, #12]
 800e74e:	3307      	adds	r3, #7
 800e750:	f023 0307 	bic.w	r3, r3, #7
 800e754:	3308      	adds	r3, #8
 800e756:	9303      	str	r3, [sp, #12]
 800e758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e75a:	4433      	add	r3, r6
 800e75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e75e:	e76a      	b.n	800e636 <_svfiprintf_r+0x52>
 800e760:	fb0c 3202 	mla	r2, ip, r2, r3
 800e764:	460c      	mov	r4, r1
 800e766:	2001      	movs	r0, #1
 800e768:	e7a8      	b.n	800e6bc <_svfiprintf_r+0xd8>
 800e76a:	2300      	movs	r3, #0
 800e76c:	3401      	adds	r4, #1
 800e76e:	9305      	str	r3, [sp, #20]
 800e770:	4619      	mov	r1, r3
 800e772:	f04f 0c0a 	mov.w	ip, #10
 800e776:	4620      	mov	r0, r4
 800e778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e77c:	3a30      	subs	r2, #48	@ 0x30
 800e77e:	2a09      	cmp	r2, #9
 800e780:	d903      	bls.n	800e78a <_svfiprintf_r+0x1a6>
 800e782:	2b00      	cmp	r3, #0
 800e784:	d0c6      	beq.n	800e714 <_svfiprintf_r+0x130>
 800e786:	9105      	str	r1, [sp, #20]
 800e788:	e7c4      	b.n	800e714 <_svfiprintf_r+0x130>
 800e78a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e78e:	4604      	mov	r4, r0
 800e790:	2301      	movs	r3, #1
 800e792:	e7f0      	b.n	800e776 <_svfiprintf_r+0x192>
 800e794:	ab03      	add	r3, sp, #12
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	462a      	mov	r2, r5
 800e79a:	4b0e      	ldr	r3, [pc, #56]	@ (800e7d4 <_svfiprintf_r+0x1f0>)
 800e79c:	a904      	add	r1, sp, #16
 800e79e:	4638      	mov	r0, r7
 800e7a0:	f7fd fe98 	bl	800c4d4 <_printf_float>
 800e7a4:	1c42      	adds	r2, r0, #1
 800e7a6:	4606      	mov	r6, r0
 800e7a8:	d1d6      	bne.n	800e758 <_svfiprintf_r+0x174>
 800e7aa:	89ab      	ldrh	r3, [r5, #12]
 800e7ac:	065b      	lsls	r3, r3, #25
 800e7ae:	f53f af2d 	bmi.w	800e60c <_svfiprintf_r+0x28>
 800e7b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7b4:	e72c      	b.n	800e610 <_svfiprintf_r+0x2c>
 800e7b6:	ab03      	add	r3, sp, #12
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	462a      	mov	r2, r5
 800e7bc:	4b05      	ldr	r3, [pc, #20]	@ (800e7d4 <_svfiprintf_r+0x1f0>)
 800e7be:	a904      	add	r1, sp, #16
 800e7c0:	4638      	mov	r0, r7
 800e7c2:	f7fe f91f 	bl	800ca04 <_printf_i>
 800e7c6:	e7ed      	b.n	800e7a4 <_svfiprintf_r+0x1c0>
 800e7c8:	0800f360 	.word	0x0800f360
 800e7cc:	0800f36a 	.word	0x0800f36a
 800e7d0:	0800c4d5 	.word	0x0800c4d5
 800e7d4:	0800e52d 	.word	0x0800e52d
 800e7d8:	0800f366 	.word	0x0800f366

0800e7dc <__sflush_r>:
 800e7dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e4:	0716      	lsls	r6, r2, #28
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	460c      	mov	r4, r1
 800e7ea:	d454      	bmi.n	800e896 <__sflush_r+0xba>
 800e7ec:	684b      	ldr	r3, [r1, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	dc02      	bgt.n	800e7f8 <__sflush_r+0x1c>
 800e7f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	dd48      	ble.n	800e88a <__sflush_r+0xae>
 800e7f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7fa:	2e00      	cmp	r6, #0
 800e7fc:	d045      	beq.n	800e88a <__sflush_r+0xae>
 800e7fe:	2300      	movs	r3, #0
 800e800:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e804:	682f      	ldr	r7, [r5, #0]
 800e806:	6a21      	ldr	r1, [r4, #32]
 800e808:	602b      	str	r3, [r5, #0]
 800e80a:	d030      	beq.n	800e86e <__sflush_r+0x92>
 800e80c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	0759      	lsls	r1, r3, #29
 800e812:	d505      	bpl.n	800e820 <__sflush_r+0x44>
 800e814:	6863      	ldr	r3, [r4, #4]
 800e816:	1ad2      	subs	r2, r2, r3
 800e818:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e81a:	b10b      	cbz	r3, 800e820 <__sflush_r+0x44>
 800e81c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e81e:	1ad2      	subs	r2, r2, r3
 800e820:	2300      	movs	r3, #0
 800e822:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e824:	6a21      	ldr	r1, [r4, #32]
 800e826:	4628      	mov	r0, r5
 800e828:	47b0      	blx	r6
 800e82a:	1c43      	adds	r3, r0, #1
 800e82c:	89a3      	ldrh	r3, [r4, #12]
 800e82e:	d106      	bne.n	800e83e <__sflush_r+0x62>
 800e830:	6829      	ldr	r1, [r5, #0]
 800e832:	291d      	cmp	r1, #29
 800e834:	d82b      	bhi.n	800e88e <__sflush_r+0xb2>
 800e836:	4a2a      	ldr	r2, [pc, #168]	@ (800e8e0 <__sflush_r+0x104>)
 800e838:	410a      	asrs	r2, r1
 800e83a:	07d6      	lsls	r6, r2, #31
 800e83c:	d427      	bmi.n	800e88e <__sflush_r+0xb2>
 800e83e:	2200      	movs	r2, #0
 800e840:	6062      	str	r2, [r4, #4]
 800e842:	04d9      	lsls	r1, r3, #19
 800e844:	6922      	ldr	r2, [r4, #16]
 800e846:	6022      	str	r2, [r4, #0]
 800e848:	d504      	bpl.n	800e854 <__sflush_r+0x78>
 800e84a:	1c42      	adds	r2, r0, #1
 800e84c:	d101      	bne.n	800e852 <__sflush_r+0x76>
 800e84e:	682b      	ldr	r3, [r5, #0]
 800e850:	b903      	cbnz	r3, 800e854 <__sflush_r+0x78>
 800e852:	6560      	str	r0, [r4, #84]	@ 0x54
 800e854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e856:	602f      	str	r7, [r5, #0]
 800e858:	b1b9      	cbz	r1, 800e88a <__sflush_r+0xae>
 800e85a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e85e:	4299      	cmp	r1, r3
 800e860:	d002      	beq.n	800e868 <__sflush_r+0x8c>
 800e862:	4628      	mov	r0, r5
 800e864:	f7ff f9e0 	bl	800dc28 <_free_r>
 800e868:	2300      	movs	r3, #0
 800e86a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e86c:	e00d      	b.n	800e88a <__sflush_r+0xae>
 800e86e:	2301      	movs	r3, #1
 800e870:	4628      	mov	r0, r5
 800e872:	47b0      	blx	r6
 800e874:	4602      	mov	r2, r0
 800e876:	1c50      	adds	r0, r2, #1
 800e878:	d1c9      	bne.n	800e80e <__sflush_r+0x32>
 800e87a:	682b      	ldr	r3, [r5, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d0c6      	beq.n	800e80e <__sflush_r+0x32>
 800e880:	2b1d      	cmp	r3, #29
 800e882:	d001      	beq.n	800e888 <__sflush_r+0xac>
 800e884:	2b16      	cmp	r3, #22
 800e886:	d11e      	bne.n	800e8c6 <__sflush_r+0xea>
 800e888:	602f      	str	r7, [r5, #0]
 800e88a:	2000      	movs	r0, #0
 800e88c:	e022      	b.n	800e8d4 <__sflush_r+0xf8>
 800e88e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e892:	b21b      	sxth	r3, r3
 800e894:	e01b      	b.n	800e8ce <__sflush_r+0xf2>
 800e896:	690f      	ldr	r7, [r1, #16]
 800e898:	2f00      	cmp	r7, #0
 800e89a:	d0f6      	beq.n	800e88a <__sflush_r+0xae>
 800e89c:	0793      	lsls	r3, r2, #30
 800e89e:	680e      	ldr	r6, [r1, #0]
 800e8a0:	bf08      	it	eq
 800e8a2:	694b      	ldreq	r3, [r1, #20]
 800e8a4:	600f      	str	r7, [r1, #0]
 800e8a6:	bf18      	it	ne
 800e8a8:	2300      	movne	r3, #0
 800e8aa:	eba6 0807 	sub.w	r8, r6, r7
 800e8ae:	608b      	str	r3, [r1, #8]
 800e8b0:	f1b8 0f00 	cmp.w	r8, #0
 800e8b4:	dde9      	ble.n	800e88a <__sflush_r+0xae>
 800e8b6:	6a21      	ldr	r1, [r4, #32]
 800e8b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e8ba:	4643      	mov	r3, r8
 800e8bc:	463a      	mov	r2, r7
 800e8be:	4628      	mov	r0, r5
 800e8c0:	47b0      	blx	r6
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	dc08      	bgt.n	800e8d8 <__sflush_r+0xfc>
 800e8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8ce:	81a3      	strh	r3, [r4, #12]
 800e8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d8:	4407      	add	r7, r0
 800e8da:	eba8 0800 	sub.w	r8, r8, r0
 800e8de:	e7e7      	b.n	800e8b0 <__sflush_r+0xd4>
 800e8e0:	dfbffffe 	.word	0xdfbffffe

0800e8e4 <_fflush_r>:
 800e8e4:	b538      	push	{r3, r4, r5, lr}
 800e8e6:	690b      	ldr	r3, [r1, #16]
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	460c      	mov	r4, r1
 800e8ec:	b913      	cbnz	r3, 800e8f4 <_fflush_r+0x10>
 800e8ee:	2500      	movs	r5, #0
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	bd38      	pop	{r3, r4, r5, pc}
 800e8f4:	b118      	cbz	r0, 800e8fe <_fflush_r+0x1a>
 800e8f6:	6a03      	ldr	r3, [r0, #32]
 800e8f8:	b90b      	cbnz	r3, 800e8fe <_fflush_r+0x1a>
 800e8fa:	f7fe fa2f 	bl	800cd5c <__sinit>
 800e8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d0f3      	beq.n	800e8ee <_fflush_r+0xa>
 800e906:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e908:	07d0      	lsls	r0, r2, #31
 800e90a:	d404      	bmi.n	800e916 <_fflush_r+0x32>
 800e90c:	0599      	lsls	r1, r3, #22
 800e90e:	d402      	bmi.n	800e916 <_fflush_r+0x32>
 800e910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e912:	f7fe fb3a 	bl	800cf8a <__retarget_lock_acquire_recursive>
 800e916:	4628      	mov	r0, r5
 800e918:	4621      	mov	r1, r4
 800e91a:	f7ff ff5f 	bl	800e7dc <__sflush_r>
 800e91e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e920:	07da      	lsls	r2, r3, #31
 800e922:	4605      	mov	r5, r0
 800e924:	d4e4      	bmi.n	800e8f0 <_fflush_r+0xc>
 800e926:	89a3      	ldrh	r3, [r4, #12]
 800e928:	059b      	lsls	r3, r3, #22
 800e92a:	d4e1      	bmi.n	800e8f0 <_fflush_r+0xc>
 800e92c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e92e:	f7fe fb2d 	bl	800cf8c <__retarget_lock_release_recursive>
 800e932:	e7dd      	b.n	800e8f0 <_fflush_r+0xc>

0800e934 <memmove>:
 800e934:	4288      	cmp	r0, r1
 800e936:	b510      	push	{r4, lr}
 800e938:	eb01 0402 	add.w	r4, r1, r2
 800e93c:	d902      	bls.n	800e944 <memmove+0x10>
 800e93e:	4284      	cmp	r4, r0
 800e940:	4623      	mov	r3, r4
 800e942:	d807      	bhi.n	800e954 <memmove+0x20>
 800e944:	1e43      	subs	r3, r0, #1
 800e946:	42a1      	cmp	r1, r4
 800e948:	d008      	beq.n	800e95c <memmove+0x28>
 800e94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e94e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e952:	e7f8      	b.n	800e946 <memmove+0x12>
 800e954:	4402      	add	r2, r0
 800e956:	4601      	mov	r1, r0
 800e958:	428a      	cmp	r2, r1
 800e95a:	d100      	bne.n	800e95e <memmove+0x2a>
 800e95c:	bd10      	pop	{r4, pc}
 800e95e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e966:	e7f7      	b.n	800e958 <memmove+0x24>

0800e968 <_sbrk_r>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	4d06      	ldr	r5, [pc, #24]	@ (800e984 <_sbrk_r+0x1c>)
 800e96c:	2300      	movs	r3, #0
 800e96e:	4604      	mov	r4, r0
 800e970:	4608      	mov	r0, r1
 800e972:	602b      	str	r3, [r5, #0]
 800e974:	f7f3 fce0 	bl	8002338 <_sbrk>
 800e978:	1c43      	adds	r3, r0, #1
 800e97a:	d102      	bne.n	800e982 <_sbrk_r+0x1a>
 800e97c:	682b      	ldr	r3, [r5, #0]
 800e97e:	b103      	cbz	r3, 800e982 <_sbrk_r+0x1a>
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	bd38      	pop	{r3, r4, r5, pc}
 800e984:	20001f58 	.word	0x20001f58

0800e988 <memcpy>:
 800e988:	440a      	add	r2, r1
 800e98a:	4291      	cmp	r1, r2
 800e98c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e990:	d100      	bne.n	800e994 <memcpy+0xc>
 800e992:	4770      	bx	lr
 800e994:	b510      	push	{r4, lr}
 800e996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e99e:	4291      	cmp	r1, r2
 800e9a0:	d1f9      	bne.n	800e996 <memcpy+0xe>
 800e9a2:	bd10      	pop	{r4, pc}

0800e9a4 <__assert_func>:
 800e9a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9a6:	4614      	mov	r4, r2
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	4b09      	ldr	r3, [pc, #36]	@ (800e9d0 <__assert_func+0x2c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	68d8      	ldr	r0, [r3, #12]
 800e9b2:	b954      	cbnz	r4, 800e9ca <__assert_func+0x26>
 800e9b4:	4b07      	ldr	r3, [pc, #28]	@ (800e9d4 <__assert_func+0x30>)
 800e9b6:	461c      	mov	r4, r3
 800e9b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9bc:	9100      	str	r1, [sp, #0]
 800e9be:	462b      	mov	r3, r5
 800e9c0:	4905      	ldr	r1, [pc, #20]	@ (800e9d8 <__assert_func+0x34>)
 800e9c2:	f000 f86f 	bl	800eaa4 <fiprintf>
 800e9c6:	f000 f87f 	bl	800eac8 <abort>
 800e9ca:	4b04      	ldr	r3, [pc, #16]	@ (800e9dc <__assert_func+0x38>)
 800e9cc:	e7f4      	b.n	800e9b8 <__assert_func+0x14>
 800e9ce:	bf00      	nop
 800e9d0:	20000114 	.word	0x20000114
 800e9d4:	0800f3b6 	.word	0x0800f3b6
 800e9d8:	0800f388 	.word	0x0800f388
 800e9dc:	0800f37b 	.word	0x0800f37b

0800e9e0 <_calloc_r>:
 800e9e0:	b570      	push	{r4, r5, r6, lr}
 800e9e2:	fba1 5402 	umull	r5, r4, r1, r2
 800e9e6:	b93c      	cbnz	r4, 800e9f8 <_calloc_r+0x18>
 800e9e8:	4629      	mov	r1, r5
 800e9ea:	f7ff f991 	bl	800dd10 <_malloc_r>
 800e9ee:	4606      	mov	r6, r0
 800e9f0:	b928      	cbnz	r0, 800e9fe <_calloc_r+0x1e>
 800e9f2:	2600      	movs	r6, #0
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	bd70      	pop	{r4, r5, r6, pc}
 800e9f8:	220c      	movs	r2, #12
 800e9fa:	6002      	str	r2, [r0, #0]
 800e9fc:	e7f9      	b.n	800e9f2 <_calloc_r+0x12>
 800e9fe:	462a      	mov	r2, r5
 800ea00:	4621      	mov	r1, r4
 800ea02:	f7fe fa44 	bl	800ce8e <memset>
 800ea06:	e7f5      	b.n	800e9f4 <_calloc_r+0x14>

0800ea08 <__ascii_mbtowc>:
 800ea08:	b082      	sub	sp, #8
 800ea0a:	b901      	cbnz	r1, 800ea0e <__ascii_mbtowc+0x6>
 800ea0c:	a901      	add	r1, sp, #4
 800ea0e:	b142      	cbz	r2, 800ea22 <__ascii_mbtowc+0x1a>
 800ea10:	b14b      	cbz	r3, 800ea26 <__ascii_mbtowc+0x1e>
 800ea12:	7813      	ldrb	r3, [r2, #0]
 800ea14:	600b      	str	r3, [r1, #0]
 800ea16:	7812      	ldrb	r2, [r2, #0]
 800ea18:	1e10      	subs	r0, r2, #0
 800ea1a:	bf18      	it	ne
 800ea1c:	2001      	movne	r0, #1
 800ea1e:	b002      	add	sp, #8
 800ea20:	4770      	bx	lr
 800ea22:	4610      	mov	r0, r2
 800ea24:	e7fb      	b.n	800ea1e <__ascii_mbtowc+0x16>
 800ea26:	f06f 0001 	mvn.w	r0, #1
 800ea2a:	e7f8      	b.n	800ea1e <__ascii_mbtowc+0x16>

0800ea2c <_realloc_r>:
 800ea2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea30:	4680      	mov	r8, r0
 800ea32:	4615      	mov	r5, r2
 800ea34:	460c      	mov	r4, r1
 800ea36:	b921      	cbnz	r1, 800ea42 <_realloc_r+0x16>
 800ea38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3c:	4611      	mov	r1, r2
 800ea3e:	f7ff b967 	b.w	800dd10 <_malloc_r>
 800ea42:	b92a      	cbnz	r2, 800ea50 <_realloc_r+0x24>
 800ea44:	f7ff f8f0 	bl	800dc28 <_free_r>
 800ea48:	2400      	movs	r4, #0
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea50:	f000 f841 	bl	800ead6 <_malloc_usable_size_r>
 800ea54:	4285      	cmp	r5, r0
 800ea56:	4606      	mov	r6, r0
 800ea58:	d802      	bhi.n	800ea60 <_realloc_r+0x34>
 800ea5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ea5e:	d8f4      	bhi.n	800ea4a <_realloc_r+0x1e>
 800ea60:	4629      	mov	r1, r5
 800ea62:	4640      	mov	r0, r8
 800ea64:	f7ff f954 	bl	800dd10 <_malloc_r>
 800ea68:	4607      	mov	r7, r0
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d0ec      	beq.n	800ea48 <_realloc_r+0x1c>
 800ea6e:	42b5      	cmp	r5, r6
 800ea70:	462a      	mov	r2, r5
 800ea72:	4621      	mov	r1, r4
 800ea74:	bf28      	it	cs
 800ea76:	4632      	movcs	r2, r6
 800ea78:	f7ff ff86 	bl	800e988 <memcpy>
 800ea7c:	4621      	mov	r1, r4
 800ea7e:	4640      	mov	r0, r8
 800ea80:	f7ff f8d2 	bl	800dc28 <_free_r>
 800ea84:	463c      	mov	r4, r7
 800ea86:	e7e0      	b.n	800ea4a <_realloc_r+0x1e>

0800ea88 <__ascii_wctomb>:
 800ea88:	4603      	mov	r3, r0
 800ea8a:	4608      	mov	r0, r1
 800ea8c:	b141      	cbz	r1, 800eaa0 <__ascii_wctomb+0x18>
 800ea8e:	2aff      	cmp	r2, #255	@ 0xff
 800ea90:	d904      	bls.n	800ea9c <__ascii_wctomb+0x14>
 800ea92:	228a      	movs	r2, #138	@ 0x8a
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	f04f 30ff 	mov.w	r0, #4294967295
 800ea9a:	4770      	bx	lr
 800ea9c:	700a      	strb	r2, [r1, #0]
 800ea9e:	2001      	movs	r0, #1
 800eaa0:	4770      	bx	lr
	...

0800eaa4 <fiprintf>:
 800eaa4:	b40e      	push	{r1, r2, r3}
 800eaa6:	b503      	push	{r0, r1, lr}
 800eaa8:	4601      	mov	r1, r0
 800eaaa:	ab03      	add	r3, sp, #12
 800eaac:	4805      	ldr	r0, [pc, #20]	@ (800eac4 <fiprintf+0x20>)
 800eaae:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab2:	6800      	ldr	r0, [r0, #0]
 800eab4:	9301      	str	r3, [sp, #4]
 800eab6:	f000 f83f 	bl	800eb38 <_vfiprintf_r>
 800eaba:	b002      	add	sp, #8
 800eabc:	f85d eb04 	ldr.w	lr, [sp], #4
 800eac0:	b003      	add	sp, #12
 800eac2:	4770      	bx	lr
 800eac4:	20000114 	.word	0x20000114

0800eac8 <abort>:
 800eac8:	b508      	push	{r3, lr}
 800eaca:	2006      	movs	r0, #6
 800eacc:	f000 fa08 	bl	800eee0 <raise>
 800ead0:	2001      	movs	r0, #1
 800ead2:	f7f3 fbb9 	bl	8002248 <_exit>

0800ead6 <_malloc_usable_size_r>:
 800ead6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eada:	1f18      	subs	r0, r3, #4
 800eadc:	2b00      	cmp	r3, #0
 800eade:	bfbc      	itt	lt
 800eae0:	580b      	ldrlt	r3, [r1, r0]
 800eae2:	18c0      	addlt	r0, r0, r3
 800eae4:	4770      	bx	lr

0800eae6 <__sfputc_r>:
 800eae6:	6893      	ldr	r3, [r2, #8]
 800eae8:	3b01      	subs	r3, #1
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	b410      	push	{r4}
 800eaee:	6093      	str	r3, [r2, #8]
 800eaf0:	da08      	bge.n	800eb04 <__sfputc_r+0x1e>
 800eaf2:	6994      	ldr	r4, [r2, #24]
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	db01      	blt.n	800eafc <__sfputc_r+0x16>
 800eaf8:	290a      	cmp	r1, #10
 800eafa:	d103      	bne.n	800eb04 <__sfputc_r+0x1e>
 800eafc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb00:	f000 b932 	b.w	800ed68 <__swbuf_r>
 800eb04:	6813      	ldr	r3, [r2, #0]
 800eb06:	1c58      	adds	r0, r3, #1
 800eb08:	6010      	str	r0, [r2, #0]
 800eb0a:	7019      	strb	r1, [r3, #0]
 800eb0c:	4608      	mov	r0, r1
 800eb0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <__sfputs_r>:
 800eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb16:	4606      	mov	r6, r0
 800eb18:	460f      	mov	r7, r1
 800eb1a:	4614      	mov	r4, r2
 800eb1c:	18d5      	adds	r5, r2, r3
 800eb1e:	42ac      	cmp	r4, r5
 800eb20:	d101      	bne.n	800eb26 <__sfputs_r+0x12>
 800eb22:	2000      	movs	r0, #0
 800eb24:	e007      	b.n	800eb36 <__sfputs_r+0x22>
 800eb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb2a:	463a      	mov	r2, r7
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7ff ffda 	bl	800eae6 <__sfputc_r>
 800eb32:	1c43      	adds	r3, r0, #1
 800eb34:	d1f3      	bne.n	800eb1e <__sfputs_r+0xa>
 800eb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb38 <_vfiprintf_r>:
 800eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3c:	460d      	mov	r5, r1
 800eb3e:	b09d      	sub	sp, #116	@ 0x74
 800eb40:	4614      	mov	r4, r2
 800eb42:	4698      	mov	r8, r3
 800eb44:	4606      	mov	r6, r0
 800eb46:	b118      	cbz	r0, 800eb50 <_vfiprintf_r+0x18>
 800eb48:	6a03      	ldr	r3, [r0, #32]
 800eb4a:	b90b      	cbnz	r3, 800eb50 <_vfiprintf_r+0x18>
 800eb4c:	f7fe f906 	bl	800cd5c <__sinit>
 800eb50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb52:	07d9      	lsls	r1, r3, #31
 800eb54:	d405      	bmi.n	800eb62 <_vfiprintf_r+0x2a>
 800eb56:	89ab      	ldrh	r3, [r5, #12]
 800eb58:	059a      	lsls	r2, r3, #22
 800eb5a:	d402      	bmi.n	800eb62 <_vfiprintf_r+0x2a>
 800eb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb5e:	f7fe fa14 	bl	800cf8a <__retarget_lock_acquire_recursive>
 800eb62:	89ab      	ldrh	r3, [r5, #12]
 800eb64:	071b      	lsls	r3, r3, #28
 800eb66:	d501      	bpl.n	800eb6c <_vfiprintf_r+0x34>
 800eb68:	692b      	ldr	r3, [r5, #16]
 800eb6a:	b99b      	cbnz	r3, 800eb94 <_vfiprintf_r+0x5c>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	4630      	mov	r0, r6
 800eb70:	f000 f938 	bl	800ede4 <__swsetup_r>
 800eb74:	b170      	cbz	r0, 800eb94 <_vfiprintf_r+0x5c>
 800eb76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb78:	07dc      	lsls	r4, r3, #31
 800eb7a:	d504      	bpl.n	800eb86 <_vfiprintf_r+0x4e>
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	b01d      	add	sp, #116	@ 0x74
 800eb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb86:	89ab      	ldrh	r3, [r5, #12]
 800eb88:	0598      	lsls	r0, r3, #22
 800eb8a:	d4f7      	bmi.n	800eb7c <_vfiprintf_r+0x44>
 800eb8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb8e:	f7fe f9fd 	bl	800cf8c <__retarget_lock_release_recursive>
 800eb92:	e7f3      	b.n	800eb7c <_vfiprintf_r+0x44>
 800eb94:	2300      	movs	r3, #0
 800eb96:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb98:	2320      	movs	r3, #32
 800eb9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800eba2:	2330      	movs	r3, #48	@ 0x30
 800eba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ed54 <_vfiprintf_r+0x21c>
 800eba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebac:	f04f 0901 	mov.w	r9, #1
 800ebb0:	4623      	mov	r3, r4
 800ebb2:	469a      	mov	sl, r3
 800ebb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebb8:	b10a      	cbz	r2, 800ebbe <_vfiprintf_r+0x86>
 800ebba:	2a25      	cmp	r2, #37	@ 0x25
 800ebbc:	d1f9      	bne.n	800ebb2 <_vfiprintf_r+0x7a>
 800ebbe:	ebba 0b04 	subs.w	fp, sl, r4
 800ebc2:	d00b      	beq.n	800ebdc <_vfiprintf_r+0xa4>
 800ebc4:	465b      	mov	r3, fp
 800ebc6:	4622      	mov	r2, r4
 800ebc8:	4629      	mov	r1, r5
 800ebca:	4630      	mov	r0, r6
 800ebcc:	f7ff ffa2 	bl	800eb14 <__sfputs_r>
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	f000 80a7 	beq.w	800ed24 <_vfiprintf_r+0x1ec>
 800ebd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebd8:	445a      	add	r2, fp
 800ebda:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebdc:	f89a 3000 	ldrb.w	r3, [sl]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 809f 	beq.w	800ed24 <_vfiprintf_r+0x1ec>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebf0:	f10a 0a01 	add.w	sl, sl, #1
 800ebf4:	9304      	str	r3, [sp, #16]
 800ebf6:	9307      	str	r3, [sp, #28]
 800ebf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ebfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebfe:	4654      	mov	r4, sl
 800ec00:	2205      	movs	r2, #5
 800ec02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec06:	4853      	ldr	r0, [pc, #332]	@ (800ed54 <_vfiprintf_r+0x21c>)
 800ec08:	f7f1 faba 	bl	8000180 <memchr>
 800ec0c:	9a04      	ldr	r2, [sp, #16]
 800ec0e:	b9d8      	cbnz	r0, 800ec48 <_vfiprintf_r+0x110>
 800ec10:	06d1      	lsls	r1, r2, #27
 800ec12:	bf44      	itt	mi
 800ec14:	2320      	movmi	r3, #32
 800ec16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec1a:	0713      	lsls	r3, r2, #28
 800ec1c:	bf44      	itt	mi
 800ec1e:	232b      	movmi	r3, #43	@ 0x2b
 800ec20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec24:	f89a 3000 	ldrb.w	r3, [sl]
 800ec28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec2a:	d015      	beq.n	800ec58 <_vfiprintf_r+0x120>
 800ec2c:	9a07      	ldr	r2, [sp, #28]
 800ec2e:	4654      	mov	r4, sl
 800ec30:	2000      	movs	r0, #0
 800ec32:	f04f 0c0a 	mov.w	ip, #10
 800ec36:	4621      	mov	r1, r4
 800ec38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec3c:	3b30      	subs	r3, #48	@ 0x30
 800ec3e:	2b09      	cmp	r3, #9
 800ec40:	d94b      	bls.n	800ecda <_vfiprintf_r+0x1a2>
 800ec42:	b1b0      	cbz	r0, 800ec72 <_vfiprintf_r+0x13a>
 800ec44:	9207      	str	r2, [sp, #28]
 800ec46:	e014      	b.n	800ec72 <_vfiprintf_r+0x13a>
 800ec48:	eba0 0308 	sub.w	r3, r0, r8
 800ec4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ec50:	4313      	orrs	r3, r2
 800ec52:	9304      	str	r3, [sp, #16]
 800ec54:	46a2      	mov	sl, r4
 800ec56:	e7d2      	b.n	800ebfe <_vfiprintf_r+0xc6>
 800ec58:	9b03      	ldr	r3, [sp, #12]
 800ec5a:	1d19      	adds	r1, r3, #4
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	9103      	str	r1, [sp, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	bfbb      	ittet	lt
 800ec64:	425b      	neglt	r3, r3
 800ec66:	f042 0202 	orrlt.w	r2, r2, #2
 800ec6a:	9307      	strge	r3, [sp, #28]
 800ec6c:	9307      	strlt	r3, [sp, #28]
 800ec6e:	bfb8      	it	lt
 800ec70:	9204      	strlt	r2, [sp, #16]
 800ec72:	7823      	ldrb	r3, [r4, #0]
 800ec74:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec76:	d10a      	bne.n	800ec8e <_vfiprintf_r+0x156>
 800ec78:	7863      	ldrb	r3, [r4, #1]
 800ec7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec7c:	d132      	bne.n	800ece4 <_vfiprintf_r+0x1ac>
 800ec7e:	9b03      	ldr	r3, [sp, #12]
 800ec80:	1d1a      	adds	r2, r3, #4
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	9203      	str	r2, [sp, #12]
 800ec86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec8a:	3402      	adds	r4, #2
 800ec8c:	9305      	str	r3, [sp, #20]
 800ec8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ed64 <_vfiprintf_r+0x22c>
 800ec92:	7821      	ldrb	r1, [r4, #0]
 800ec94:	2203      	movs	r2, #3
 800ec96:	4650      	mov	r0, sl
 800ec98:	f7f1 fa72 	bl	8000180 <memchr>
 800ec9c:	b138      	cbz	r0, 800ecae <_vfiprintf_r+0x176>
 800ec9e:	9b04      	ldr	r3, [sp, #16]
 800eca0:	eba0 000a 	sub.w	r0, r0, sl
 800eca4:	2240      	movs	r2, #64	@ 0x40
 800eca6:	4082      	lsls	r2, r0
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	3401      	adds	r4, #1
 800ecac:	9304      	str	r3, [sp, #16]
 800ecae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb2:	4829      	ldr	r0, [pc, #164]	@ (800ed58 <_vfiprintf_r+0x220>)
 800ecb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecb8:	2206      	movs	r2, #6
 800ecba:	f7f1 fa61 	bl	8000180 <memchr>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d03f      	beq.n	800ed42 <_vfiprintf_r+0x20a>
 800ecc2:	4b26      	ldr	r3, [pc, #152]	@ (800ed5c <_vfiprintf_r+0x224>)
 800ecc4:	bb1b      	cbnz	r3, 800ed0e <_vfiprintf_r+0x1d6>
 800ecc6:	9b03      	ldr	r3, [sp, #12]
 800ecc8:	3307      	adds	r3, #7
 800ecca:	f023 0307 	bic.w	r3, r3, #7
 800ecce:	3308      	adds	r3, #8
 800ecd0:	9303      	str	r3, [sp, #12]
 800ecd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecd4:	443b      	add	r3, r7
 800ecd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd8:	e76a      	b.n	800ebb0 <_vfiprintf_r+0x78>
 800ecda:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecde:	460c      	mov	r4, r1
 800ece0:	2001      	movs	r0, #1
 800ece2:	e7a8      	b.n	800ec36 <_vfiprintf_r+0xfe>
 800ece4:	2300      	movs	r3, #0
 800ece6:	3401      	adds	r4, #1
 800ece8:	9305      	str	r3, [sp, #20]
 800ecea:	4619      	mov	r1, r3
 800ecec:	f04f 0c0a 	mov.w	ip, #10
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecf6:	3a30      	subs	r2, #48	@ 0x30
 800ecf8:	2a09      	cmp	r2, #9
 800ecfa:	d903      	bls.n	800ed04 <_vfiprintf_r+0x1cc>
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d0c6      	beq.n	800ec8e <_vfiprintf_r+0x156>
 800ed00:	9105      	str	r1, [sp, #20]
 800ed02:	e7c4      	b.n	800ec8e <_vfiprintf_r+0x156>
 800ed04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed08:	4604      	mov	r4, r0
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e7f0      	b.n	800ecf0 <_vfiprintf_r+0x1b8>
 800ed0e:	ab03      	add	r3, sp, #12
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	462a      	mov	r2, r5
 800ed14:	4b12      	ldr	r3, [pc, #72]	@ (800ed60 <_vfiprintf_r+0x228>)
 800ed16:	a904      	add	r1, sp, #16
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f7fd fbdb 	bl	800c4d4 <_printf_float>
 800ed1e:	4607      	mov	r7, r0
 800ed20:	1c78      	adds	r0, r7, #1
 800ed22:	d1d6      	bne.n	800ecd2 <_vfiprintf_r+0x19a>
 800ed24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed26:	07d9      	lsls	r1, r3, #31
 800ed28:	d405      	bmi.n	800ed36 <_vfiprintf_r+0x1fe>
 800ed2a:	89ab      	ldrh	r3, [r5, #12]
 800ed2c:	059a      	lsls	r2, r3, #22
 800ed2e:	d402      	bmi.n	800ed36 <_vfiprintf_r+0x1fe>
 800ed30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed32:	f7fe f92b 	bl	800cf8c <__retarget_lock_release_recursive>
 800ed36:	89ab      	ldrh	r3, [r5, #12]
 800ed38:	065b      	lsls	r3, r3, #25
 800ed3a:	f53f af1f 	bmi.w	800eb7c <_vfiprintf_r+0x44>
 800ed3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed40:	e71e      	b.n	800eb80 <_vfiprintf_r+0x48>
 800ed42:	ab03      	add	r3, sp, #12
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	462a      	mov	r2, r5
 800ed48:	4b05      	ldr	r3, [pc, #20]	@ (800ed60 <_vfiprintf_r+0x228>)
 800ed4a:	a904      	add	r1, sp, #16
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	f7fd fe59 	bl	800ca04 <_printf_i>
 800ed52:	e7e4      	b.n	800ed1e <_vfiprintf_r+0x1e6>
 800ed54:	0800f360 	.word	0x0800f360
 800ed58:	0800f36a 	.word	0x0800f36a
 800ed5c:	0800c4d5 	.word	0x0800c4d5
 800ed60:	0800eb15 	.word	0x0800eb15
 800ed64:	0800f366 	.word	0x0800f366

0800ed68 <__swbuf_r>:
 800ed68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6a:	460e      	mov	r6, r1
 800ed6c:	4614      	mov	r4, r2
 800ed6e:	4605      	mov	r5, r0
 800ed70:	b118      	cbz	r0, 800ed7a <__swbuf_r+0x12>
 800ed72:	6a03      	ldr	r3, [r0, #32]
 800ed74:	b90b      	cbnz	r3, 800ed7a <__swbuf_r+0x12>
 800ed76:	f7fd fff1 	bl	800cd5c <__sinit>
 800ed7a:	69a3      	ldr	r3, [r4, #24]
 800ed7c:	60a3      	str	r3, [r4, #8]
 800ed7e:	89a3      	ldrh	r3, [r4, #12]
 800ed80:	071a      	lsls	r2, r3, #28
 800ed82:	d501      	bpl.n	800ed88 <__swbuf_r+0x20>
 800ed84:	6923      	ldr	r3, [r4, #16]
 800ed86:	b943      	cbnz	r3, 800ed9a <__swbuf_r+0x32>
 800ed88:	4621      	mov	r1, r4
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f000 f82a 	bl	800ede4 <__swsetup_r>
 800ed90:	b118      	cbz	r0, 800ed9a <__swbuf_r+0x32>
 800ed92:	f04f 37ff 	mov.w	r7, #4294967295
 800ed96:	4638      	mov	r0, r7
 800ed98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	6922      	ldr	r2, [r4, #16]
 800ed9e:	1a98      	subs	r0, r3, r2
 800eda0:	6963      	ldr	r3, [r4, #20]
 800eda2:	b2f6      	uxtb	r6, r6
 800eda4:	4283      	cmp	r3, r0
 800eda6:	4637      	mov	r7, r6
 800eda8:	dc05      	bgt.n	800edb6 <__swbuf_r+0x4e>
 800edaa:	4621      	mov	r1, r4
 800edac:	4628      	mov	r0, r5
 800edae:	f7ff fd99 	bl	800e8e4 <_fflush_r>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d1ed      	bne.n	800ed92 <__swbuf_r+0x2a>
 800edb6:	68a3      	ldr	r3, [r4, #8]
 800edb8:	3b01      	subs	r3, #1
 800edba:	60a3      	str	r3, [r4, #8]
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	1c5a      	adds	r2, r3, #1
 800edc0:	6022      	str	r2, [r4, #0]
 800edc2:	701e      	strb	r6, [r3, #0]
 800edc4:	6962      	ldr	r2, [r4, #20]
 800edc6:	1c43      	adds	r3, r0, #1
 800edc8:	429a      	cmp	r2, r3
 800edca:	d004      	beq.n	800edd6 <__swbuf_r+0x6e>
 800edcc:	89a3      	ldrh	r3, [r4, #12]
 800edce:	07db      	lsls	r3, r3, #31
 800edd0:	d5e1      	bpl.n	800ed96 <__swbuf_r+0x2e>
 800edd2:	2e0a      	cmp	r6, #10
 800edd4:	d1df      	bne.n	800ed96 <__swbuf_r+0x2e>
 800edd6:	4621      	mov	r1, r4
 800edd8:	4628      	mov	r0, r5
 800edda:	f7ff fd83 	bl	800e8e4 <_fflush_r>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d0d9      	beq.n	800ed96 <__swbuf_r+0x2e>
 800ede2:	e7d6      	b.n	800ed92 <__swbuf_r+0x2a>

0800ede4 <__swsetup_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4b29      	ldr	r3, [pc, #164]	@ (800ee8c <__swsetup_r+0xa8>)
 800ede8:	4605      	mov	r5, r0
 800edea:	6818      	ldr	r0, [r3, #0]
 800edec:	460c      	mov	r4, r1
 800edee:	b118      	cbz	r0, 800edf8 <__swsetup_r+0x14>
 800edf0:	6a03      	ldr	r3, [r0, #32]
 800edf2:	b90b      	cbnz	r3, 800edf8 <__swsetup_r+0x14>
 800edf4:	f7fd ffb2 	bl	800cd5c <__sinit>
 800edf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edfc:	0719      	lsls	r1, r3, #28
 800edfe:	d422      	bmi.n	800ee46 <__swsetup_r+0x62>
 800ee00:	06da      	lsls	r2, r3, #27
 800ee02:	d407      	bmi.n	800ee14 <__swsetup_r+0x30>
 800ee04:	2209      	movs	r2, #9
 800ee06:	602a      	str	r2, [r5, #0]
 800ee08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee0c:	81a3      	strh	r3, [r4, #12]
 800ee0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee12:	e033      	b.n	800ee7c <__swsetup_r+0x98>
 800ee14:	0758      	lsls	r0, r3, #29
 800ee16:	d512      	bpl.n	800ee3e <__swsetup_r+0x5a>
 800ee18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee1a:	b141      	cbz	r1, 800ee2e <__swsetup_r+0x4a>
 800ee1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee20:	4299      	cmp	r1, r3
 800ee22:	d002      	beq.n	800ee2a <__swsetup_r+0x46>
 800ee24:	4628      	mov	r0, r5
 800ee26:	f7fe feff 	bl	800dc28 <_free_r>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee2e:	89a3      	ldrh	r3, [r4, #12]
 800ee30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ee34:	81a3      	strh	r3, [r4, #12]
 800ee36:	2300      	movs	r3, #0
 800ee38:	6063      	str	r3, [r4, #4]
 800ee3a:	6923      	ldr	r3, [r4, #16]
 800ee3c:	6023      	str	r3, [r4, #0]
 800ee3e:	89a3      	ldrh	r3, [r4, #12]
 800ee40:	f043 0308 	orr.w	r3, r3, #8
 800ee44:	81a3      	strh	r3, [r4, #12]
 800ee46:	6923      	ldr	r3, [r4, #16]
 800ee48:	b94b      	cbnz	r3, 800ee5e <__swsetup_r+0x7a>
 800ee4a:	89a3      	ldrh	r3, [r4, #12]
 800ee4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ee50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee54:	d003      	beq.n	800ee5e <__swsetup_r+0x7a>
 800ee56:	4621      	mov	r1, r4
 800ee58:	4628      	mov	r0, r5
 800ee5a:	f000 f883 	bl	800ef64 <__smakebuf_r>
 800ee5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee62:	f013 0201 	ands.w	r2, r3, #1
 800ee66:	d00a      	beq.n	800ee7e <__swsetup_r+0x9a>
 800ee68:	2200      	movs	r2, #0
 800ee6a:	60a2      	str	r2, [r4, #8]
 800ee6c:	6962      	ldr	r2, [r4, #20]
 800ee6e:	4252      	negs	r2, r2
 800ee70:	61a2      	str	r2, [r4, #24]
 800ee72:	6922      	ldr	r2, [r4, #16]
 800ee74:	b942      	cbnz	r2, 800ee88 <__swsetup_r+0xa4>
 800ee76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ee7a:	d1c5      	bne.n	800ee08 <__swsetup_r+0x24>
 800ee7c:	bd38      	pop	{r3, r4, r5, pc}
 800ee7e:	0799      	lsls	r1, r3, #30
 800ee80:	bf58      	it	pl
 800ee82:	6962      	ldrpl	r2, [r4, #20]
 800ee84:	60a2      	str	r2, [r4, #8]
 800ee86:	e7f4      	b.n	800ee72 <__swsetup_r+0x8e>
 800ee88:	2000      	movs	r0, #0
 800ee8a:	e7f7      	b.n	800ee7c <__swsetup_r+0x98>
 800ee8c:	20000114 	.word	0x20000114

0800ee90 <_raise_r>:
 800ee90:	291f      	cmp	r1, #31
 800ee92:	b538      	push	{r3, r4, r5, lr}
 800ee94:	4605      	mov	r5, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	d904      	bls.n	800eea4 <_raise_r+0x14>
 800ee9a:	2316      	movs	r3, #22
 800ee9c:	6003      	str	r3, [r0, #0]
 800ee9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eea6:	b112      	cbz	r2, 800eeae <_raise_r+0x1e>
 800eea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eeac:	b94b      	cbnz	r3, 800eec2 <_raise_r+0x32>
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f000 f830 	bl	800ef14 <_getpid_r>
 800eeb4:	4622      	mov	r2, r4
 800eeb6:	4601      	mov	r1, r0
 800eeb8:	4628      	mov	r0, r5
 800eeba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eebe:	f000 b817 	b.w	800eef0 <_kill_r>
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d00a      	beq.n	800eedc <_raise_r+0x4c>
 800eec6:	1c59      	adds	r1, r3, #1
 800eec8:	d103      	bne.n	800eed2 <_raise_r+0x42>
 800eeca:	2316      	movs	r3, #22
 800eecc:	6003      	str	r3, [r0, #0]
 800eece:	2001      	movs	r0, #1
 800eed0:	e7e7      	b.n	800eea2 <_raise_r+0x12>
 800eed2:	2100      	movs	r1, #0
 800eed4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eed8:	4620      	mov	r0, r4
 800eeda:	4798      	blx	r3
 800eedc:	2000      	movs	r0, #0
 800eede:	e7e0      	b.n	800eea2 <_raise_r+0x12>

0800eee0 <raise>:
 800eee0:	4b02      	ldr	r3, [pc, #8]	@ (800eeec <raise+0xc>)
 800eee2:	4601      	mov	r1, r0
 800eee4:	6818      	ldr	r0, [r3, #0]
 800eee6:	f7ff bfd3 	b.w	800ee90 <_raise_r>
 800eeea:	bf00      	nop
 800eeec:	20000114 	.word	0x20000114

0800eef0 <_kill_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4d07      	ldr	r5, [pc, #28]	@ (800ef10 <_kill_r+0x20>)
 800eef4:	2300      	movs	r3, #0
 800eef6:	4604      	mov	r4, r0
 800eef8:	4608      	mov	r0, r1
 800eefa:	4611      	mov	r1, r2
 800eefc:	602b      	str	r3, [r5, #0]
 800eefe:	f7f3 f993 	bl	8002228 <_kill>
 800ef02:	1c43      	adds	r3, r0, #1
 800ef04:	d102      	bne.n	800ef0c <_kill_r+0x1c>
 800ef06:	682b      	ldr	r3, [r5, #0]
 800ef08:	b103      	cbz	r3, 800ef0c <_kill_r+0x1c>
 800ef0a:	6023      	str	r3, [r4, #0]
 800ef0c:	bd38      	pop	{r3, r4, r5, pc}
 800ef0e:	bf00      	nop
 800ef10:	20001f58 	.word	0x20001f58

0800ef14 <_getpid_r>:
 800ef14:	f7f3 b980 	b.w	8002218 <_getpid>

0800ef18 <__swhatbuf_r>:
 800ef18:	b570      	push	{r4, r5, r6, lr}
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef20:	2900      	cmp	r1, #0
 800ef22:	b096      	sub	sp, #88	@ 0x58
 800ef24:	4615      	mov	r5, r2
 800ef26:	461e      	mov	r6, r3
 800ef28:	da0d      	bge.n	800ef46 <__swhatbuf_r+0x2e>
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ef30:	f04f 0100 	mov.w	r1, #0
 800ef34:	bf14      	ite	ne
 800ef36:	2340      	movne	r3, #64	@ 0x40
 800ef38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	6031      	str	r1, [r6, #0]
 800ef40:	602b      	str	r3, [r5, #0]
 800ef42:	b016      	add	sp, #88	@ 0x58
 800ef44:	bd70      	pop	{r4, r5, r6, pc}
 800ef46:	466a      	mov	r2, sp
 800ef48:	f000 f848 	bl	800efdc <_fstat_r>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	dbec      	blt.n	800ef2a <__swhatbuf_r+0x12>
 800ef50:	9901      	ldr	r1, [sp, #4]
 800ef52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ef56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ef5a:	4259      	negs	r1, r3
 800ef5c:	4159      	adcs	r1, r3
 800ef5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef62:	e7eb      	b.n	800ef3c <__swhatbuf_r+0x24>

0800ef64 <__smakebuf_r>:
 800ef64:	898b      	ldrh	r3, [r1, #12]
 800ef66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef68:	079d      	lsls	r5, r3, #30
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	460c      	mov	r4, r1
 800ef6e:	d507      	bpl.n	800ef80 <__smakebuf_r+0x1c>
 800ef70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ef74:	6023      	str	r3, [r4, #0]
 800ef76:	6123      	str	r3, [r4, #16]
 800ef78:	2301      	movs	r3, #1
 800ef7a:	6163      	str	r3, [r4, #20]
 800ef7c:	b003      	add	sp, #12
 800ef7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef80:	ab01      	add	r3, sp, #4
 800ef82:	466a      	mov	r2, sp
 800ef84:	f7ff ffc8 	bl	800ef18 <__swhatbuf_r>
 800ef88:	9f00      	ldr	r7, [sp, #0]
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	4639      	mov	r1, r7
 800ef8e:	4630      	mov	r0, r6
 800ef90:	f7fe febe 	bl	800dd10 <_malloc_r>
 800ef94:	b948      	cbnz	r0, 800efaa <__smakebuf_r+0x46>
 800ef96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef9a:	059a      	lsls	r2, r3, #22
 800ef9c:	d4ee      	bmi.n	800ef7c <__smakebuf_r+0x18>
 800ef9e:	f023 0303 	bic.w	r3, r3, #3
 800efa2:	f043 0302 	orr.w	r3, r3, #2
 800efa6:	81a3      	strh	r3, [r4, #12]
 800efa8:	e7e2      	b.n	800ef70 <__smakebuf_r+0xc>
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	6020      	str	r0, [r4, #0]
 800efae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efb2:	81a3      	strh	r3, [r4, #12]
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800efba:	b15b      	cbz	r3, 800efd4 <__smakebuf_r+0x70>
 800efbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efc0:	4630      	mov	r0, r6
 800efc2:	f000 f81d 	bl	800f000 <_isatty_r>
 800efc6:	b128      	cbz	r0, 800efd4 <__smakebuf_r+0x70>
 800efc8:	89a3      	ldrh	r3, [r4, #12]
 800efca:	f023 0303 	bic.w	r3, r3, #3
 800efce:	f043 0301 	orr.w	r3, r3, #1
 800efd2:	81a3      	strh	r3, [r4, #12]
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	431d      	orrs	r5, r3
 800efd8:	81a5      	strh	r5, [r4, #12]
 800efda:	e7cf      	b.n	800ef7c <__smakebuf_r+0x18>

0800efdc <_fstat_r>:
 800efdc:	b538      	push	{r3, r4, r5, lr}
 800efde:	4d07      	ldr	r5, [pc, #28]	@ (800effc <_fstat_r+0x20>)
 800efe0:	2300      	movs	r3, #0
 800efe2:	4604      	mov	r4, r0
 800efe4:	4608      	mov	r0, r1
 800efe6:	4611      	mov	r1, r2
 800efe8:	602b      	str	r3, [r5, #0]
 800efea:	f7f3 f97d 	bl	80022e8 <_fstat>
 800efee:	1c43      	adds	r3, r0, #1
 800eff0:	d102      	bne.n	800eff8 <_fstat_r+0x1c>
 800eff2:	682b      	ldr	r3, [r5, #0]
 800eff4:	b103      	cbz	r3, 800eff8 <_fstat_r+0x1c>
 800eff6:	6023      	str	r3, [r4, #0]
 800eff8:	bd38      	pop	{r3, r4, r5, pc}
 800effa:	bf00      	nop
 800effc:	20001f58 	.word	0x20001f58

0800f000 <_isatty_r>:
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	4d06      	ldr	r5, [pc, #24]	@ (800f01c <_isatty_r+0x1c>)
 800f004:	2300      	movs	r3, #0
 800f006:	4604      	mov	r4, r0
 800f008:	4608      	mov	r0, r1
 800f00a:	602b      	str	r3, [r5, #0]
 800f00c:	f7f3 f97c 	bl	8002308 <_isatty>
 800f010:	1c43      	adds	r3, r0, #1
 800f012:	d102      	bne.n	800f01a <_isatty_r+0x1a>
 800f014:	682b      	ldr	r3, [r5, #0]
 800f016:	b103      	cbz	r3, 800f01a <_isatty_r+0x1a>
 800f018:	6023      	str	r3, [r4, #0]
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	20001f58 	.word	0x20001f58

0800f020 <_init>:
 800f020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f022:	bf00      	nop
 800f024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f026:	bc08      	pop	{r3}
 800f028:	469e      	mov	lr, r3
 800f02a:	4770      	bx	lr

0800f02c <_fini>:
 800f02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02e:	bf00      	nop
 800f030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f032:	bc08      	pop	{r3}
 800f034:	469e      	mov	lr, r3
 800f036:	4770      	bx	lr
